
Cluster_Control_V01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005084  08005084  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005084  08005084  00015084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800508c  0800508c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000065c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006cc  200006cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebcf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020c6  00000000  00000000  0002ec6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00030d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  000319a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242c9  00000000  00000000  00032550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e224  00000000  00000000  00056819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d78e9  00000000  00000000  00064a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c326  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c94  00000000  00000000  0013c378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004d90 	.word	0x08004d90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004d90 	.word	0x08004d90

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <__io_putchar+0x20>)
 80005a6:	f001 ffff 	bl	80025a8 <HAL_UART_Transmit>
  return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fd4f 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f8e3 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f9d9 	bl	800097c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 f97f 	bl	80008cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ce:	f000 f9a7 	bl	8000920 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005d2:	f000 f945 	bl	8000860 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // HAL_UART_Receive_IT(&huart3, &UART_RX_data, 1);

  printf("\r\n----------------------------------------------------------------- \r\n");
 80005d6:	4858      	ldr	r0, [pc, #352]	; (8000738 <main+0x180>)
 80005d8:	f003 fc14 	bl	8003e04 <puts>
  printf("Version 2022, 10, 06 Cluster Control Board Ver 0.0.3 \r\n");
 80005dc:	4857      	ldr	r0, [pc, #348]	; (800073c <main+0x184>)
 80005de:	f003 fc11 	bl	8003e04 <puts>
  printf("0.0.1 Labview Communication Test Checked Labview RX\r\n");
 80005e2:	4857      	ldr	r0, [pc, #348]	; (8000740 <main+0x188>)
 80005e4:	f003 fc0e 	bl	8003e04 <puts>
  printf("0.0.2 Labview Communication Test Checked Labview TX\r\n");
 80005e8:	4856      	ldr	r0, [pc, #344]	; (8000744 <main+0x18c>)
 80005ea:	f003 fc0b 	bl	8003e04 <puts>
  printf("0.0.3 Labview Communication Test Checked Data Parsing Test \r\n");
 80005ee:	4856      	ldr	r0, [pc, #344]	; (8000748 <main+0x190>)
 80005f0:	f003 fc08 	bl	8003e04 <puts>
  printf("0.0.4 Git Test  \r\n");
 80005f4:	4855      	ldr	r0, [pc, #340]	; (800074c <main+0x194>)
 80005f6:	f003 fc05 	bl	8003e04 <puts>
  printf("0.0.5 Labview Communication Test Labview Parsing Test \r\n");
 80005fa:	4855      	ldr	r0, [pc, #340]	; (8000750 <main+0x198>)
 80005fc:	f003 fc02 	bl	8003e04 <puts>
  printf("0.0.6 Labview Communication Test ARM Parsing Test \r\n");
 8000600:	4854      	ldr	r0, [pc, #336]	; (8000754 <main+0x19c>)
 8000602:	f003 fbff 	bl	8003e04 <puts>
  printf("0.0.7 ARM Protocol Ver 0.1 \r\n");
 8000606:	4854      	ldr	r0, [pc, #336]	; (8000758 <main+0x1a0>)
 8000608:	f003 fbfc 	bl	8003e04 <puts>
  MCU       +1T0R000# - OK send +1T0R000#
  Labview   +1T0R000# - X
  Labview   -1T0R000# - O
  If you want to send a different signal, change the first character, but you may be confused with the first character sign, so if you have tried to send more than 30 times during the transmission verification process and are not recognized, add an algorithm to change the first character
  */
  printf("----------------------------------------------------------------- \r\n");
 800060c:	4853      	ldr	r0, [pc, #332]	; (800075c <main+0x1a4>)
 800060e:	f003 fbf9 	bl	8003e04 <puts>
  HAL_GPIO_WritePin(GPIOE, 0x02, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	4852      	ldr	r0, [pc, #328]	; (8000760 <main+0x1a8>)
 8000618:	f001 f908 	bl	800182c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(5);
 800061c:	2005      	movs	r0, #5
 800061e:	f000 fd91 	bl	8001144 <HAL_Delay>
    printf("System Count : %d end\r\n", cnt++);
 8000622:	4b50      	ldr	r3, [pc, #320]	; (8000764 <main+0x1ac>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	494e      	ldr	r1, [pc, #312]	; (8000764 <main+0x1ac>)
 800062a:	600a      	str	r2, [r1, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	484e      	ldr	r0, [pc, #312]	; (8000768 <main+0x1b0>)
 8000630:	f003 fb4c 	bl	8003ccc <iprintf>
    //주기적으로 신호를 보냄으로서 정상 동작 한다는 것을 알림

    // UART 신호 수신
    rcvStat = HAL_UART_Receive(&huart3, UART_RX_data, data_length, 10);
 8000634:	230a      	movs	r3, #10
 8000636:	2264      	movs	r2, #100	; 0x64
 8000638:	494c      	ldr	r1, [pc, #304]	; (800076c <main+0x1b4>)
 800063a:	484d      	ldr	r0, [pc, #308]	; (8000770 <main+0x1b8>)
 800063c:	f002 f846 	bl	80026cc <HAL_UART_Receive>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <main+0x1bc>)
 8000646:	701a      	strb	r2, [r3, #0]

    //받은 데이터 중에 시작 문자와 끝 문자가 있는지 판별
    for (int n = 0; n < data_length; n++)
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e016      	b.n	800067c <main+0xc4>
    {
      if (UART_RX_data[n] == '+')
 800064e:	4a47      	ldr	r2, [pc, #284]	; (800076c <main+0x1b4>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b2b      	cmp	r3, #43	; 0x2b
 8000658:	d10d      	bne.n	8000676 <main+0xbe>
      {
        // printf("Find Start %d \r\n", n);
        if ((UART_RX_data[n + 7]) == '#')
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3307      	adds	r3, #7
 800065e:	4a43      	ldr	r2, [pc, #268]	; (800076c <main+0x1b4>)
 8000660:	5cd3      	ldrb	r3, [r2, r3]
 8000662:	2b23      	cmp	r3, #35	; 0x23
 8000664:	d107      	bne.n	8000676 <main+0xbe>
        {
          start_char_flag = 1;
 8000666:	4b44      	ldr	r3, [pc, #272]	; (8000778 <main+0x1c0>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
          // printf("Find end");
          uart_cnt = n;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <main+0x1c4>)
 8000672:	701a      	strb	r2, [r3, #0]
          break;
 8000674:	e005      	b.n	8000682 <main+0xca>
    for (int n = 0; n < data_length; n++)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b63      	cmp	r3, #99	; 0x63
 8000680:	dde5      	ble.n	800064e <main+0x96>
        }
      }
    }
  //만약 시작 문자와 끝문자가 검출되면 start_char_flag = 1
    if (start_char_flag == 1)
 8000682:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <main+0x1c0>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d1c8      	bne.n	800061c <main+0x64>
    {
      start_char_flag = 0;
 800068a:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <main+0x1c0>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
      for (int m = 0; m < 8; m++)
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	e00e      	b.n	80006b4 <main+0xfc>
      {
        // printf("%c", UART_RX_data[uart_cnt + m]);
        //데이터를 UART_RX_temp에 옮겨 담는다.
        UART_RX_temp[m] = UART_RX_data[uart_cnt + m];
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <main+0x1c4>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	4a32      	ldr	r2, [pc, #200]	; (800076c <main+0x1b4>)
 80006a2:	5cd1      	ldrb	r1, [r2, r3]
 80006a4:	4a36      	ldr	r2, [pc, #216]	; (8000780 <main+0x1c8>)
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
      for (int m = 0; m < 8; m++)
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	2b07      	cmp	r3, #7
 80006b8:	dded      	ble.n	8000696 <main+0xde>
        
      }
      //이전에 받은 데이터와 비교해서 달라졌으면 실행, 달라지지 않았으면 그대로 간다
      for (int n = 0; n < 8; n++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e017      	b.n	80006f0 <main+0x138>
      {
        if (UART_RX_data_word[n] != UART_RX_temp[n])
 80006c0:	4a30      	ldr	r2, [pc, #192]	; (8000784 <main+0x1cc>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	492d      	ldr	r1, [pc, #180]	; (8000780 <main+0x1c8>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	440b      	add	r3, r1
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d00a      	beq.n	80006ea <main+0x132>
        {
          // printf("Test MI \r\n");
          // HAL_GPIO_WritePin(GPIOE, 0x02, GPIO_PIN_SET);
          HAL_GPIO_TogglePin(GPIOE, 0xFF);
 80006d4:	21ff      	movs	r1, #255	; 0xff
 80006d6:	4822      	ldr	r0, [pc, #136]	; (8000760 <main+0x1a8>)
 80006d8:	f001 f8c1 	bl	800185e <HAL_GPIO_TogglePin>
          HAL_Delay(5);
 80006dc:	2005      	movs	r0, #5
 80006de:	f000 fd31 	bl	8001144 <HAL_Delay>
          data_flag = 1;
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <main+0x1d0>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
          break;
 80006e8:	e005      	b.n	80006f6 <main+0x13e>
      for (int n = 0; n < 8; n++)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3301      	adds	r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	dde4      	ble.n	80006c0 <main+0x108>
        }
      }
//비교 기준이 되는 이전 데이터 자리에 현재 데이터를 넣는다 
      for (int k = 0; k < 8; k++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	e016      	b.n	800072a <main+0x172>
      {
        UART_RX_data_word[k] = UART_RX_temp[k];
 80006fc:	4a20      	ldr	r2, [pc, #128]	; (8000780 <main+0x1c8>)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	4413      	add	r3, r2
 8000702:	7819      	ldrb	r1, [r3, #0]
 8000704:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <main+0x1cc>)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	460a      	mov	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
        if (data_flag == 1)
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <main+0x1d0>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d106      	bne.n	8000724 <main+0x16c>
        {
          printf("%c", UART_RX_data_word[k]);
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <main+0x1cc>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f003 faec 	bl	8003cfc <putchar>
      for (int k = 0; k < 8; k++)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2b07      	cmp	r3, #7
 800072e:	dde5      	ble.n	80006fc <main+0x144>
        }
      }
      data_flag = 0;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <main+0x1d0>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000736:	e771      	b.n	800061c <main+0x64>
 8000738:	08004da8 	.word	0x08004da8
 800073c:	08004df0 	.word	0x08004df0
 8000740:	08004e28 	.word	0x08004e28
 8000744:	08004e60 	.word	0x08004e60
 8000748:	08004e98 	.word	0x08004e98
 800074c:	08004ed8 	.word	0x08004ed8
 8000750:	08004eec 	.word	0x08004eec
 8000754:	08004f24 	.word	0x08004f24
 8000758:	08004f58 	.word	0x08004f58
 800075c:	08004f78 	.word	0x08004f78
 8000760:	40021000 	.word	0x40021000
 8000764:	200006ac 	.word	0x200006ac
 8000768:	08004fbc 	.word	0x08004fbc
 800076c:	20000634 	.word	0x20000634
 8000770:	200000e4 	.word	0x200000e4
 8000774:	200006b1 	.word	0x200006b1
 8000778:	200006b0 	.word	0x200006b0
 800077c:	200006a9 	.word	0x200006a9
 8000780:	200006a0 	.word	0x200006a0
 8000784:	20000698 	.word	0x20000698
 8000788:	200006a8 	.word	0x200006a8

0800078c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fa8e 	bl	8003cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000800:	23a8      	movs	r3, #168	; 0xa8
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000808:	2307      	movs	r3, #7
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f001 f95b 	bl	8001acc <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 f9ec 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2105      	movs	r1, #5
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fbbc 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084a:	f000 f9d5 	bl	8000bf8 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <MX_SPI1_Init+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008ac:	220a      	movs	r2, #10
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_SPI1_Init+0x64>)
 80008b2:	f001 fda3 	bl	80023fc <HAL_SPI_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008bc:	f000 f99c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART3_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART3_UART_Init+0x4c>)
 8000904:	f001 fe03 	bl	800250e <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f973 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000e4 	.word	0x200000e4
 800091c:	40004800 	.word	0x40004800

08000920 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800092a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2204      	movs	r2, #4
 8000930:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2202      	movs	r2, #2
 8000936:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2202      	movs	r2, #2
 8000942:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2201      	movs	r2, #1
 8000948:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2201      	movs	r2, #1
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	f000 ff95 	bl	8001892 <HAL_PCD_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f943 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000128 	.word	0x20000128

0800097c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	; 0x38
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
 8000996:	4b8b      	ldr	r3, [pc, #556]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a8a      	ldr	r2, [pc, #552]	; (8000bc4 <MX_GPIO_Init+0x248>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b88      	ldr	r3, [pc, #544]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	623b      	str	r3, [r7, #32]
 80009ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
 80009b2:	4b84      	ldr	r3, [pc, #528]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a83      	ldr	r2, [pc, #524]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b81      	ldr	r3, [pc, #516]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b7d      	ldr	r3, [pc, #500]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a7c      	ldr	r2, [pc, #496]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009d4:	f043 0320 	orr.w	r3, r3, #32
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b7a      	ldr	r3, [pc, #488]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0320 	and.w	r3, r3, #32
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b76      	ldr	r3, [pc, #472]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a75      	ldr	r2, [pc, #468]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b73      	ldr	r3, [pc, #460]	; (8000bc4 <MX_GPIO_Init+0x248>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b6f      	ldr	r3, [pc, #444]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a6e      	ldr	r2, [pc, #440]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b6c      	ldr	r3, [pc, #432]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b68      	ldr	r3, [pc, #416]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a67      	ldr	r2, [pc, #412]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <MX_GPIO_Init+0x248>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a78:	4853      	ldr	r0, [pc, #332]	; (8000bc8 <MX_GPIO_Init+0x24c>)
 8000a7a:	f000 fed7 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a84:	4851      	ldr	r0, [pc, #324]	; (8000bcc <MX_GPIO_Init+0x250>)
 8000a86:	f000 fed1 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	4850      	ldr	r0, [pc, #320]	; (8000bd0 <MX_GPIO_Init+0x254>)
 8000a90:	f000 fecc 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin | RX_EN_1_Pin | GPIO_PIN_2, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2107      	movs	r1, #7
 8000a98:	484e      	ldr	r0, [pc, #312]	; (8000bd4 <MX_GPIO_Init+0x258>)
 8000a9a:	f000 fec7 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_10 | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f644 4181 	movw	r1, #19585	; 0x4c81
 8000aa4:	484c      	ldr	r0, [pc, #304]	; (8000bd8 <MX_GPIO_Init+0x25c>)
 8000aa6:	f000 fec1 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CSA_Pin | CSB_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2143      	movs	r1, #67	; 0x43
 8000aae:	484b      	ldr	r0, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x260>)
 8000ab0:	f000 febc 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR_0_Pin | WR_1_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	4849      	ldr	r0, [pc, #292]	; (8000be0 <MX_GPIO_Init+0x264>)
 8000aba:	f000 feb7 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_MUX_SEL_2_Pin TX_MUX_SEL_3_Pin TX_MUX_SEL_4_Pin TX_MUX_SEL_5_Pin
                           TX_MUX_SEL_6_Pin TX_MUX_SEL_7_Pin TX_MUX_SEL_8_Pin TX_MUX_SEL_9_Pin
                           TX_MUX_SEL_10_Pin TX_MUX_SEL_11_Pin TX_MUX_SEL_12_Pin TX_MUX_SEL_13_Pin
                           TX_MUX_SEL_14_Pin TX_MUX_SEL_15_Pin TX_MUX_SEL_0_Pin TX_MUX_SEL_1_Pin */
  GPIO_InitStruct.Pin = TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin;
 8000abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	483c      	ldr	r0, [pc, #240]	; (8000bc8 <MX_GPIO_Init+0x24c>)
 8000ad8:	f000 fcfc 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <MX_GPIO_Init+0x254>)
 8000af4:	f000 fcee 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_MUX_SEL_16_Pin TX_MUX_SEL_17_Pin TX_MUX_SEL_18_Pin TX_MUX_SEL_19_Pin
                           TX_MUX_SEL_20_Pin TX_MUX_SEL_21_Pin TX_MUX_SEL_22_Pin TX_MUX_SEL_23_Pin
                           TX_MUX_SEL_24_Pin TX_MUX_SEL_25_Pin TX_MUX_SEL_26_Pin TX_MUX_SEL_27_Pin
                           TX_MUX_SEL_28_Pin TX_MUX_SEL_29_Pin TX_MUX_SEL_30_Pin TX_MUX_SEL_31_Pin */
  GPIO_InitStruct.Pin = TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin;
 8000af8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482e      	ldr	r0, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x250>)
 8000b12:	f000 fcdf 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_ADDR_0_Pin RX_ADDR_1_Pin RX_ADDR_2_Pin RX_ADDR_3_Pin */
  GPIO_InitStruct.Pin = RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin;
 8000b16:	230f      	movs	r3, #15
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4828      	ldr	r0, [pc, #160]	; (8000bd0 <MX_GPIO_Init+0x254>)
 8000b2e:	f000 fcd1 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_EN_0_Pin RX_EN_1_Pin PA2 */
  GPIO_InitStruct.Pin = RX_EN_0_Pin | RX_EN_1_Pin | GPIO_PIN_2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <MX_GPIO_Init+0x258>)
 8000b4a:	f000 fcc3 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_10 | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8000b4e:	f644 4381 	movw	r3, #19585	; 0x4c81
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <MX_GPIO_Init+0x25c>)
 8000b68:	f000 fcb4 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSA_Pin CSB_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = CSA_Pin | CSB_Pin | USB_PowerSwitchOn_Pin;
 8000b6c:	2343      	movs	r3, #67	; 0x43
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_GPIO_Init+0x260>)
 8000b84:	f000 fca6 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_GPIO_Init+0x260>)
 8000b9c:	f000 fc9a 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WR_0_Pin WR_1_Pin */
  GPIO_InitStruct.Pin = WR_0_Pin | WR_1_Pin;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480a      	ldr	r0, [pc, #40]	; (8000be0 <MX_GPIO_Init+0x264>)
 8000bb8:	f000 fc8c 	bl	80014d4 <HAL_GPIO_Init>
}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	; 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40021800 	.word	0x40021800
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    // ?��?��?�� 1개�?? ?��?��?���? ?��?��?��?���? 발생?��?��?��.
    // HAL_UART_Receive_IT(&huart3, &UART_RX_data, 1);
    // HAL_UART_Transmit(&huart3, &UART_RX_data, 1, 1000);
    // uart_flag = 1;
  }
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cae:	23e0      	movs	r3, #224	; 0xe0
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x8c>)
 8000cca:	f000 fc03 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_UART_MspInit+0x94>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d134      	bne.n	8000d70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_UART_MspInit+0x98>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d50:	2307      	movs	r3, #7
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_UART_MspInit+0x9c>)
 8000d5c:	f000 fbba 	bl	80014d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2027      	movs	r0, #39	; 0x27
 8000d66:	f000 faec 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d6a:	2027      	movs	r0, #39	; 0x27
 8000d6c:	f000 fb05 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40004800 	.word	0x40004800
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da4:	d13f      	bne.n	8000e26 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dc2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4815      	ldr	r0, [pc, #84]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000de0:	f000 fb78 	bl	80014d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <HAL_PCD_MspInit+0xb0>)
 8000dfa:	f000 fb6b 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e08:	6353      	str	r3, [r2, #52]	; 0x34
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_PCD_MspInit+0xac>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f93e 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USART3_IRQHandler+0x10>)
 8000e92:	f001 fcbd 	bl	8002810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200000e4 	.word	0x200000e4

08000ea0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
	}

return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e009      	b.n	8000f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fb4d 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf1      	blt.n	8000eec <_write+0x12>
	}
	return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
	return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f002 fe5c 	bl	8003c68 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20030000 	.word	0x20030000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	200006b4 	.word	0x200006b4
 8000fe4:	200006d0 	.word	0x200006d0

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001012:	490e      	ldr	r1, [pc, #56]	; (800104c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001028:	4c0b      	ldr	r4, [pc, #44]	; (8001058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001036:	f7ff ffd7 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f002 fe1b 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fabb 	bl	80005b8 <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001044:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001050:	08005094 	.word	0x08005094
  ldr r2, =_sbss
 8001054:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001058:	200006cc 	.word	0x200006cc

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_Init+0x40>)
 800106a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_Init+0x40>)
 8001076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x40>)
 8001082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f94f 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff fdb6 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023c00 	.word	0x40023c00

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f967 	bl	8001396 <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 f92f 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	200006b8 	.word	0x200006b8

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200006b8 	.word	0x200006b8

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff ffee 	bl	800112c <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffde 	bl	800112c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff3e 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff8e 	bl	8001280 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5d 	bl	800122c <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff31 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa2 	bl	80012e8 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013bc:	f7ff feb6 	bl	800112c <HAL_GetTick>
 80013c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d008      	beq.n	80013e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e052      	b.n	8001486 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0216 	bic.w	r2, r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	2b00      	cmp	r3, #0
 8001406:	d103      	bne.n	8001410 <HAL_DMA_Abort+0x62>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0208 	bic.w	r2, r2, #8
 800141e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001430:	e013      	b.n	800145a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001432:	f7ff fe7b 	bl	800112c <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b05      	cmp	r3, #5
 800143e:	d90c      	bls.n	800145a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e015      	b.n	8001486 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e4      	bne.n	8001432 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	223f      	movs	r2, #63	; 0x3f
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d004      	beq.n	80014ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e00c      	b.n	80014c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2205      	movs	r2, #5
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e177      	b.n	80017e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 8166 	bne.w	80017da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d005      	beq.n	8001526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	2b02      	cmp	r3, #2
 8001524:	d130      	bne.n	8001588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80c0 	beq.w	80017da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <HAL_GPIO_Init+0x324>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a65      	ldr	r2, [pc, #404]	; (80017f8 <HAL_GPIO_Init+0x324>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_GPIO_Init+0x324>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a61      	ldr	r2, [pc, #388]	; (80017fc <HAL_GPIO_Init+0x328>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a58      	ldr	r2, [pc, #352]	; (8001800 <HAL_GPIO_Init+0x32c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d037      	beq.n	8001712 <HAL_GPIO_Init+0x23e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a57      	ldr	r2, [pc, #348]	; (8001804 <HAL_GPIO_Init+0x330>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d031      	beq.n	800170e <HAL_GPIO_Init+0x23a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a56      	ldr	r2, [pc, #344]	; (8001808 <HAL_GPIO_Init+0x334>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d02b      	beq.n	800170a <HAL_GPIO_Init+0x236>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a55      	ldr	r2, [pc, #340]	; (800180c <HAL_GPIO_Init+0x338>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d025      	beq.n	8001706 <HAL_GPIO_Init+0x232>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a54      	ldr	r2, [pc, #336]	; (8001810 <HAL_GPIO_Init+0x33c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d01f      	beq.n	8001702 <HAL_GPIO_Init+0x22e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a53      	ldr	r2, [pc, #332]	; (8001814 <HAL_GPIO_Init+0x340>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d019      	beq.n	80016fe <HAL_GPIO_Init+0x22a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a52      	ldr	r2, [pc, #328]	; (8001818 <HAL_GPIO_Init+0x344>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0x226>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a51      	ldr	r2, [pc, #324]	; (800181c <HAL_GPIO_Init+0x348>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00d      	beq.n	80016f6 <HAL_GPIO_Init+0x222>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a50      	ldr	r2, [pc, #320]	; (8001820 <HAL_GPIO_Init+0x34c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d007      	beq.n	80016f2 <HAL_GPIO_Init+0x21e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4f      	ldr	r2, [pc, #316]	; (8001824 <HAL_GPIO_Init+0x350>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d101      	bne.n	80016ee <HAL_GPIO_Init+0x21a>
 80016ea:	2309      	movs	r3, #9
 80016ec:	e012      	b.n	8001714 <HAL_GPIO_Init+0x240>
 80016ee:	230a      	movs	r3, #10
 80016f0:	e010      	b.n	8001714 <HAL_GPIO_Init+0x240>
 80016f2:	2308      	movs	r3, #8
 80016f4:	e00e      	b.n	8001714 <HAL_GPIO_Init+0x240>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x240>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x240>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x240>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x240>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x240>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x240>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x240>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	; (80017fc <HAL_GPIO_Init+0x328>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_GPIO_Init+0x354>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001756:	4a34      	ldr	r2, [pc, #208]	; (8001828 <HAL_GPIO_Init+0x354>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <HAL_GPIO_Init+0x354>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001780:	4a29      	ldr	r2, [pc, #164]	; (8001828 <HAL_GPIO_Init+0x354>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_GPIO_Init+0x354>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_GPIO_Init+0x354>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_GPIO_Init+0x354>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <HAL_GPIO_Init+0x354>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f ae84 	bls.w	80014f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40013800 	.word	0x40013800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021000 	.word	0x40021000
 8001814:	40021400 	.word	0x40021400
 8001818:	40021800 	.word	0x40021800
 800181c:	40021c00 	.word	0x40021c00
 8001820:	40022000 	.word	0x40022000
 8001824:	40022400 	.word	0x40022400
 8001828:	40013c00 	.word	0x40013c00

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	041a      	lsls	r2, r3, #16
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43d9      	mvns	r1, r3
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	400b      	ands	r3, r1
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001894:	b08f      	sub	sp, #60	; 0x3c
 8001896:	af0a      	add	r7, sp, #40	; 0x28
 8001898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e10f      	b.n	8001ac4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fa60 	bl	8000d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 ff1f 	bl	8003726 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	687e      	ldr	r6, [r7, #4]
 80018f0:	466d      	mov	r5, sp
 80018f2:	f106 0410 	add.w	r4, r6, #16
 80018f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001902:	e885 0003 	stmia.w	r5, {r0, r1}
 8001906:	1d33      	adds	r3, r6, #4
 8001908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f001 feaa 	bl	8003664 <USB_CoreInit>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0d0      	b.n	8001ac4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f001 ff0d 	bl	8003748 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	e04a      	b.n	80019ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	333d      	adds	r3, #61	; 0x3d
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	333c      	adds	r3, #60	; 0x3c
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	b298      	uxth	r0, r3
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	3344      	adds	r3, #68	; 0x44
 8001970:	4602      	mov	r2, r0
 8001972:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3340      	adds	r3, #64	; 0x40
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	3348      	adds	r3, #72	; 0x48
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	334c      	adds	r3, #76	; 0x4c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3354      	adds	r3, #84	; 0x54
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3301      	adds	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3af      	bcc.n	8001934 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e044      	b.n	8001a64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a02:	7bfa      	ldrb	r2, [r7, #15]
 8001a04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	3301      	adds	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3b5      	bcc.n	80019da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	687e      	ldr	r6, [r7, #4]
 8001a76:	466d      	mov	r5, sp
 8001a78:	f106 0410 	add.w	r4, r6, #16
 8001a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a8c:	1d33      	adds	r3, r6, #4
 8001a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f001 fea5 	bl	80037e0 <USB_DevInit>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e00d      	b.n	8001ac4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 f870 	bl	8003ba2 <USB_DevDisconnect>

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e267      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d075      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aea:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d00c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d112      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0e:	d10b      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	4b7e      	ldr	r3, [pc, #504]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05b      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x108>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d157      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e242      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x74>
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e01d      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x98>
 8001b4a:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6f      	ldr	r2, [pc, #444]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6c      	ldr	r2, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b64:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a68      	ldr	r2, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fad2 	bl	800112c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff face 	bl	800112c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e207      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0xc0>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fabe 	bl	800112c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff faba 	bl	800112c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1f3      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xe8>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d063      	beq.n	8001caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d11c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d116      	bne.n	8001c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x152>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e1c7      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4937      	ldr	r1, [pc, #220]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	e03a      	b.n	8001caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3c:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCC_OscConfig+0x244>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff fa73 	bl	800112c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fa6f 	bl	800112c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1a8      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4925      	ldr	r1, [pc, #148]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e015      	b.n	8001caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x244>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fa52 	bl	800112c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fa4e 	bl	800112c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e187      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d036      	beq.n	8001d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x248>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fa32 	bl	800112c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fa2e 	bl	800112c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e167      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x200>
 8001cea:	e01b      	b.n	8001d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_OscConfig+0x248>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fa1b 	bl	800112c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	e00e      	b.n	8001d18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa17 	bl	800112c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d907      	bls.n	8001d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e150      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	42470000 	.word	0x42470000
 8001d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ea      	bne.n	8001cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8097 	beq.w	8001e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d36:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b7d      	ldr	r3, [pc, #500]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a7c      	ldr	r2, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b77      	ldr	r3, [pc, #476]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6e:	4b74      	ldr	r3, [pc, #464]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a73      	ldr	r2, [pc, #460]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff f9d7 	bl	800112c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff f9d3 	bl	800112c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e10c      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2ea>
 8001da8:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a63      	ldr	r2, [pc, #396]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x324>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x30c>
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a5b      	ldr	r2, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x324>
 8001dd8:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a57      	ldr	r2, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f998 	bl	800112c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f994 	bl	800112c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0cb      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ee      	beq.n	8001e00 <HAL_RCC_OscConfig+0x334>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f982 	bl	800112c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f97e 	bl	800112c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0b5      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ee      	bne.n	8001e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	4a38      	ldr	r2, [pc, #224]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a1 	beq.w	8001fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d05c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d141      	bne.n	8001f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_OscConfig+0x478>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff f952 	bl	800112c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f94e 	bl	800112c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e087      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	491b      	ldr	r1, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_RCC_OscConfig+0x478>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff f927 	bl	800112c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f923 	bl	800112c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e05c      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x416>
 8001f00:	e054      	b.n	8001fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_OscConfig+0x478>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff f910 	bl	800112c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f90c 	bl	800112c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e045      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x444>
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e038      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000
 8001f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x4ec>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d028      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d121      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d11a      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d111      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	3b01      	subs	r3, #1
 8001f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cc      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d90c      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800201a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d044      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d119      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d003      	beq.n	800207a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e067      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff f83e 	bl	800112c <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff f83a 	bl	800112c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20c      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe ff9e 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00
 8002178:	40023800 	.word	0x40023800
 800217c:	08004fd4 	.word	0x08004fd4
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800218c:	b094      	sub	sp, #80	; 0x50
 800218e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
 8002194:	2300      	movs	r3, #0
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002198:	2300      	movs	r3, #0
 800219a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a0:	4b79      	ldr	r3, [pc, #484]	; (8002388 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d00d      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x40>
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	f200 80e1 	bhi.w	8002374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x34>
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ba:	e0db      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_RCC_GetSysClockFreq+0x204>)
 80021be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021c0:	e0db      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c2:	4b73      	ldr	r3, [pc, #460]	; (8002390 <HAL_RCC_GetSysClockFreq+0x208>)
 80021c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021c6:	e0d8      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c8:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d2:	4b6d      	ldr	r3, [pc, #436]	; (8002388 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d063      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	2200      	movs	r2, #0
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
 80021f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021fa:	4622      	mov	r2, r4
 80021fc:	462b      	mov	r3, r5
 80021fe:	f04f 0000 	mov.w	r0, #0
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	0159      	lsls	r1, r3, #5
 8002208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800220c:	0150      	lsls	r0, r2, #5
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4621      	mov	r1, r4
 8002214:	1a51      	subs	r1, r2, r1
 8002216:	6139      	str	r1, [r7, #16]
 8002218:	4629      	mov	r1, r5
 800221a:	eb63 0301 	sbc.w	r3, r3, r1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800222c:	4659      	mov	r1, fp
 800222e:	018b      	lsls	r3, r1, #6
 8002230:	4651      	mov	r1, sl
 8002232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002236:	4651      	mov	r1, sl
 8002238:	018a      	lsls	r2, r1, #6
 800223a:	4651      	mov	r1, sl
 800223c:	ebb2 0801 	subs.w	r8, r2, r1
 8002240:	4659      	mov	r1, fp
 8002242:	eb63 0901 	sbc.w	r9, r3, r1
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800225a:	4690      	mov	r8, r2
 800225c:	4699      	mov	r9, r3
 800225e:	4623      	mov	r3, r4
 8002260:	eb18 0303 	adds.w	r3, r8, r3
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	462b      	mov	r3, r5
 8002268:	eb49 0303 	adc.w	r3, r9, r3
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800227a:	4629      	mov	r1, r5
 800227c:	024b      	lsls	r3, r1, #9
 800227e:	4621      	mov	r1, r4
 8002280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002284:	4621      	mov	r1, r4
 8002286:	024a      	lsls	r2, r1, #9
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228e:	2200      	movs	r2, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
 8002292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002298:	f7fd fffa 	bl	8000290 <__aeabi_uldivmod>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4613      	mov	r3, r2
 80022a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a4:	e058      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	099b      	lsrs	r3, r3, #6
 80022ac:	2200      	movs	r2, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	4611      	mov	r1, r2
 80022b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
 80022bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022c0:	4642      	mov	r2, r8
 80022c2:	464b      	mov	r3, r9
 80022c4:	f04f 0000 	mov.w	r0, #0
 80022c8:	f04f 0100 	mov.w	r1, #0
 80022cc:	0159      	lsls	r1, r3, #5
 80022ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d2:	0150      	lsls	r0, r2, #5
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4641      	mov	r1, r8
 80022da:	ebb2 0a01 	subs.w	sl, r2, r1
 80022de:	4649      	mov	r1, r9
 80022e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022f8:	ebb2 040a 	subs.w	r4, r2, sl
 80022fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	00eb      	lsls	r3, r5, #3
 800230a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800230e:	00e2      	lsls	r2, r4, #3
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	4643      	mov	r3, r8
 8002316:	18e3      	adds	r3, r4, r3
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	464b      	mov	r3, r9
 800231c:	eb45 0303 	adc.w	r3, r5, r3
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800232e:	4629      	mov	r1, r5
 8002330:	028b      	lsls	r3, r1, #10
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002338:	4621      	mov	r1, r4
 800233a:	028a      	lsls	r2, r1, #10
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002342:	2200      	movs	r2, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	61fa      	str	r2, [r7, #28]
 8002348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234c:	f7fd ffa0 	bl	8000290 <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4613      	mov	r3, r2
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_GetSysClockFreq+0x200>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	3301      	adds	r3, #1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800236a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetSysClockFreq+0x204>)
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800237c:	4618      	mov	r0, r3
 800237e:	3750      	adds	r7, #80	; 0x50
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	00f42400 	.word	0x00f42400
 8002390:	007a1200 	.word	0x007a1200

08002394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023b0:	f7ff fff0 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0a9b      	lsrs	r3, r3, #10
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08004fe4 	.word	0x08004fe4

080023d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023d8:	f7ff ffdc 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0b5b      	lsrs	r3, r3, #13
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08004fe4 	.word	0x08004fe4

080023fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07b      	b.n	8002506 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	2b00      	cmp	r3, #0
 8002414:	d108      	bne.n	8002428 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800241e:	d009      	beq.n	8002434 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
 8002426:	e005      	b.n	8002434 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fc00 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800246a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	ea42 0103 	orr.w	r1, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	f003 0104 	and.w	r1, r3, #4
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f003 0210 	and.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e03f      	b.n	80025a0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7fe fbd5 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2224      	movs	r2, #36	; 0x24
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002550:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fe12 	bl	800317c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002566:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002576:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002586:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d17c      	bne.n	80026c2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_UART_Transmit+0x2c>
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e075      	b.n	80026c4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_UART_Transmit+0x3e>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e06e      	b.n	80026c4 <HAL_UART_Transmit+0x11c>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2221      	movs	r2, #33	; 0x21
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fd96 	bl	800112c <HAL_GetTick>
 8002600:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d108      	bne.n	800262a <HAL_UART_Transmit+0x82>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e003      	b.n	8002632 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800263a:	e02a      	b.n	8002692 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2200      	movs	r2, #0
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb90 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e036      	b.n	80026c4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800266a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	3302      	adds	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e007      	b.n	8002684 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	781a      	ldrb	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3301      	adds	r3, #1
 8002682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002696:	b29b      	uxth	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1cf      	bne.n	800263c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2200      	movs	r2, #0
 80026a4:	2140      	movs	r1, #64	; 0x40
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fb60 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e006      	b.n	80026c4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	f040 808c 	bne.w	8002806 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_UART_Receive+0x2e>
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e084      	b.n	8002808 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_UART_Receive+0x40>
 8002708:	2302      	movs	r3, #2
 800270a:	e07d      	b.n	8002808 <HAL_UART_Receive+0x13c>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2222      	movs	r2, #34	; 0x22
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002728:	f7fe fd00 	bl	800112c <HAL_GetTick>
 800272c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002742:	d108      	bne.n	8002756 <HAL_UART_Receive+0x8a>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e003      	b.n	800275e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002766:	e043      	b.n	80027f0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2200      	movs	r2, #0
 8002770:	2120      	movs	r1, #32
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fafa 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e042      	b.n	8002808 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002794:	b29a      	uxth	r2, r3
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3302      	adds	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e01f      	b.n	80027e2 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	d007      	beq.n	80027bc <HAL_UART_Receive+0xf0>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <HAL_UART_Receive+0xfe>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d106      	bne.n	80027ca <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e008      	b.n	80027dc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3301      	adds	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1b6      	bne.n	8002768 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b0ba      	sub	sp, #232	; 0xe8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800284e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_UART_IRQHandler+0x66>
 8002862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fbc9 	bl	8003006 <UART_Receive_IT>
      return;
 8002874:	e256      	b.n	8002d24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80de 	beq.w	8002a3c <HAL_UART_IRQHandler+0x22c>
 8002880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800288c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002890:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80d1 	beq.w	8002a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_UART_IRQHandler+0xae>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_UART_IRQHandler+0xd2>
 80028ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_UART_IRQHandler+0xf6>
 80028ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d011      	beq.n	8002936 <HAL_UART_IRQHandler+0x126>
 8002912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800291e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0208 	orr.w	r2, r3, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 81ed 	beq.w	8002d1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_UART_IRQHandler+0x14e>
 800294c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fb54 	bl	8003006 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <HAL_UART_IRQHandler+0x17a>
 8002982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d04f      	beq.n	8002a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa5c 	bl	8002e48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d141      	bne.n	8002a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3314      	adds	r3, #20
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3314      	adds	r3, #20
 80029c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029da:	e841 2300 	strex	r3, r2, [r1]
 80029de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1d9      	bne.n	800299e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d013      	beq.n	8002a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	4a7d      	ldr	r2, [pc, #500]	; (8002bec <HAL_UART_IRQHandler+0x3dc>)
 80029f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fd45 	bl	800148e <HAL_DMA_Abort_IT>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d016      	beq.n	8002a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a14:	4610      	mov	r0, r2
 8002a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e00e      	b.n	8002a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f990 	bl	8002d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a20:	e00a      	b.n	8002a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f98c 	bl	8002d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a28:	e006      	b.n	8002a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f988 	bl	8002d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a36:	e170      	b.n	8002d1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	bf00      	nop
    return;
 8002a3a:	e16e      	b.n	8002d1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f040 814a 	bne.w	8002cda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8143 	beq.w	8002cda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 813c 	beq.w	8002cda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	f040 80b4 	bne.w	8002bf0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8140 	beq.w	8002d1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f080 8139 	bcs.w	8002d1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	f000 8088 	beq.w	8002bd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002afa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1d9      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3314      	adds	r3, #20
 8002b14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3314      	adds	r3, #20
 8002b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b3e:	e841 2300 	strex	r3, r2, [r1]
 8002b42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1e1      	bne.n	8002b0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e3      	bne.n	8002b4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba2:	f023 0310 	bic.w	r3, r3, #16
 8002ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bbc:	e841 2300 	strex	r3, r2, [r1]
 8002bc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1e3      	bne.n	8002b90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fbee 	bl	80013ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8b6 	bl	8002d54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002be8:	e099      	b.n	8002d1e <HAL_UART_IRQHandler+0x50e>
 8002bea:	bf00      	nop
 8002bec:	08002f0f 	.word	0x08002f0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 808b 	beq.w	8002d22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8086 	beq.w	8002d22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e3      	bne.n	8002c16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3314      	adds	r3, #20
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c72:	633a      	str	r2, [r7, #48]	; 0x30
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7a:	e841 2300 	strex	r3, r2, [r1]
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e3      	bne.n	8002c4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	330c      	adds	r3, #12
 8002c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0310 	bic.w	r3, r3, #16
 8002caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cb8:	61fa      	str	r2, [r7, #28]
 8002cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	69b9      	ldr	r1, [r7, #24]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	e841 2300 	strex	r3, r2, [r1]
 8002cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e3      	bne.n	8002c94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f83e 	bl	8002d54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cd8:	e023      	b.n	8002d22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_UART_IRQHandler+0x4ea>
 8002ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f91f 	bl	8002f36 <UART_Transmit_IT>
    return;
 8002cf8:	e014      	b.n	8002d24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00e      	beq.n	8002d24 <HAL_UART_IRQHandler+0x514>
 8002d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f95f 	bl	8002fd6 <UART_EndTransmit_IT>
    return;
 8002d18:	e004      	b.n	8002d24 <HAL_UART_IRQHandler+0x514>
    return;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <HAL_UART_IRQHandler+0x514>
      return;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <HAL_UART_IRQHandler+0x514>
      return;
 8002d22:	bf00      	nop
  }
}
 8002d24:	37e8      	adds	r7, #232	; 0xe8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop

08002d2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b090      	sub	sp, #64	; 0x40
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	e050      	b.n	8002e20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d04c      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8c:	f7fe f9ce 	bl	800112c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d241      	bcs.n	8002e20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dbc:	637a      	str	r2, [r7, #52]	; 0x34
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3314      	adds	r3, #20
 8002dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	613b      	str	r3, [r7, #16]
   return(result);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3314      	adds	r3, #20
 8002dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002df0:	623a      	str	r2, [r7, #32]
 8002df2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	69f9      	ldr	r1, [r7, #28]
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e5      	bne.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e00f      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d09f      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3740      	adds	r7, #64	; 0x40
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b095      	sub	sp, #84	; 0x54
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e70:	643a      	str	r2, [r7, #64]	; 0x40
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e5      	bne.n	8002e50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3314      	adds	r3, #20
 8002ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d119      	bne.n	8002ef4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f023 0310 	bic.w	r3, r3, #16
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee0:	61ba      	str	r2, [r7, #24]
 8002ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	6979      	ldr	r1, [r7, #20]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	613b      	str	r3, [r7, #16]
   return(result);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e5      	bne.n	8002ec0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f02:	bf00      	nop
 8002f04:	3754      	adds	r7, #84	; 0x54
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7ff ff09 	bl	8002d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b21      	cmp	r3, #33	; 0x21
 8002f48:	d13e      	bne.n	8002fc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f52:	d114      	bne.n	8002f7e <UART_Transmit_IT+0x48>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d110      	bne.n	8002f7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	1c9a      	adds	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	621a      	str	r2, [r3, #32]
 8002f7c:	e008      	b.n	8002f90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6211      	str	r1, [r2, #32]
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fe98 	bl	8002d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b08c      	sub	sp, #48	; 0x30
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b22      	cmp	r3, #34	; 0x22
 8003018:	f040 80ab 	bne.w	8003172 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d117      	bne.n	8003056 <UART_Receive_IT+0x50>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d113      	bne.n	8003056 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003044:	b29a      	uxth	r2, r3
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	1c9a      	adds	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
 8003054:	e026      	b.n	80030a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003068:	d007      	beq.n	800307a <UART_Receive_IT+0x74>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <UART_Receive_IT+0x82>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e008      	b.n	800309a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003094:	b2da      	uxtb	r2, r3
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4619      	mov	r1, r3
 80030b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d15a      	bne.n	800316e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0220 	bic.w	r2, r2, #32
 80030c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0201 	bic.w	r2, r2, #1
 80030e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d135      	bne.n	8003164 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	613b      	str	r3, [r7, #16]
   return(result);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f023 0310 	bic.w	r3, r3, #16
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	623a      	str	r2, [r7, #32]
 8003120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	69f9      	ldr	r1, [r7, #28]
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	61bb      	str	r3, [r7, #24]
   return(result);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b10      	cmp	r3, #16
 800313e:	d10a      	bne.n	8003156 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800315a:	4619      	mov	r1, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fdf9 	bl	8002d54 <HAL_UARTEx_RxEventCallback>
 8003162:	e002      	b.n	800316a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fd3d 	bl	8000be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e002      	b.n	8003174 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3730      	adds	r7, #48	; 0x30
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b0c0      	sub	sp, #256	; 0x100
 8003182:	af00      	add	r7, sp, #0
 8003184:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	68d9      	ldr	r1, [r3, #12]
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	ea40 0301 	orr.w	r3, r0, r1
 80031a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031d4:	f021 010c 	bic.w	r1, r1, #12
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031e2:	430b      	orrs	r3, r1
 80031e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f6:	6999      	ldr	r1, [r3, #24]
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	ea40 0301 	orr.w	r3, r0, r1
 8003202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b8f      	ldr	r3, [pc, #572]	; (8003448 <UART_SetConfig+0x2cc>)
 800320c:	429a      	cmp	r2, r3
 800320e:	d005      	beq.n	800321c <UART_SetConfig+0xa0>
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b8d      	ldr	r3, [pc, #564]	; (800344c <UART_SetConfig+0x2d0>)
 8003218:	429a      	cmp	r2, r3
 800321a:	d104      	bne.n	8003226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff f8da 	bl	80023d4 <HAL_RCC_GetPCLK2Freq>
 8003220:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003224:	e003      	b.n	800322e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003226:	f7ff f8c1 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 800322a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	f040 810c 	bne.w	8003454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800323c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003246:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800324a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800324e:	4622      	mov	r2, r4
 8003250:	462b      	mov	r3, r5
 8003252:	1891      	adds	r1, r2, r2
 8003254:	65b9      	str	r1, [r7, #88]	; 0x58
 8003256:	415b      	adcs	r3, r3
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800325a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800325e:	4621      	mov	r1, r4
 8003260:	eb12 0801 	adds.w	r8, r2, r1
 8003264:	4629      	mov	r1, r5
 8003266:	eb43 0901 	adc.w	r9, r3, r1
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800327a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800327e:	4690      	mov	r8, r2
 8003280:	4699      	mov	r9, r3
 8003282:	4623      	mov	r3, r4
 8003284:	eb18 0303 	adds.w	r3, r8, r3
 8003288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800328c:	462b      	mov	r3, r5
 800328e:	eb49 0303 	adc.w	r3, r9, r3
 8003292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032aa:	460b      	mov	r3, r1
 80032ac:	18db      	adds	r3, r3, r3
 80032ae:	653b      	str	r3, [r7, #80]	; 0x50
 80032b0:	4613      	mov	r3, r2
 80032b2:	eb42 0303 	adc.w	r3, r2, r3
 80032b6:	657b      	str	r3, [r7, #84]	; 0x54
 80032b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032c0:	f7fc ffe6 	bl	8000290 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4b61      	ldr	r3, [pc, #388]	; (8003450 <UART_SetConfig+0x2d4>)
 80032ca:	fba3 2302 	umull	r2, r3, r3, r2
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	011c      	lsls	r4, r3, #4
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032e4:	4642      	mov	r2, r8
 80032e6:	464b      	mov	r3, r9
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80032ec:	415b      	adcs	r3, r3
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032f4:	4641      	mov	r1, r8
 80032f6:	eb12 0a01 	adds.w	sl, r2, r1
 80032fa:	4649      	mov	r1, r9
 80032fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800330c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003314:	4692      	mov	sl, r2
 8003316:	469b      	mov	fp, r3
 8003318:	4643      	mov	r3, r8
 800331a:	eb1a 0303 	adds.w	r3, sl, r3
 800331e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003322:	464b      	mov	r3, r9
 8003324:	eb4b 0303 	adc.w	r3, fp, r3
 8003328:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003338:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800333c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003340:	460b      	mov	r3, r1
 8003342:	18db      	adds	r3, r3, r3
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
 8003346:	4613      	mov	r3, r2
 8003348:	eb42 0303 	adc.w	r3, r2, r3
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
 800334e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003356:	f7fc ff9b 	bl	8000290 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4611      	mov	r1, r2
 8003360:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <UART_SetConfig+0x2d4>)
 8003362:	fba3 2301 	umull	r2, r3, r3, r1
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2264      	movs	r2, #100	; 0x64
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	1acb      	subs	r3, r1, r3
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <UART_SetConfig+0x2d4>)
 8003378:	fba3 2302 	umull	r2, r3, r3, r2
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003384:	441c      	add	r4, r3
 8003386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003390:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	1891      	adds	r1, r2, r2
 800339e:	63b9      	str	r1, [r7, #56]	; 0x38
 80033a0:	415b      	adcs	r3, r3
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033a8:	4641      	mov	r1, r8
 80033aa:	1851      	adds	r1, r2, r1
 80033ac:	6339      	str	r1, [r7, #48]	; 0x30
 80033ae:	4649      	mov	r1, r9
 80033b0:	414b      	adcs	r3, r1
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033c0:	4659      	mov	r1, fp
 80033c2:	00cb      	lsls	r3, r1, #3
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ca:	4651      	mov	r1, sl
 80033cc:	00ca      	lsls	r2, r1, #3
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	4642      	mov	r2, r8
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033dc:	464b      	mov	r3, r9
 80033de:	460a      	mov	r2, r1
 80033e0:	eb42 0303 	adc.w	r3, r2, r3
 80033e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033fc:	460b      	mov	r3, r1
 80033fe:	18db      	adds	r3, r3, r3
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
 8003402:	4613      	mov	r3, r2
 8003404:	eb42 0303 	adc.w	r3, r2, r3
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800340e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003412:	f7fc ff3d 	bl	8000290 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <UART_SetConfig+0x2d4>)
 800341c:	fba3 1302 	umull	r1, r3, r3, r2
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	2164      	movs	r1, #100	; 0x64
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	3332      	adds	r3, #50	; 0x32
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <UART_SetConfig+0x2d4>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4422      	add	r2, r4
 8003442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003444:	e105      	b.n	8003652 <UART_SetConfig+0x4d6>
 8003446:	bf00      	nop
 8003448:	40011000 	.word	0x40011000
 800344c:	40011400 	.word	0x40011400
 8003450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800345e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003466:	4642      	mov	r2, r8
 8003468:	464b      	mov	r3, r9
 800346a:	1891      	adds	r1, r2, r2
 800346c:	6239      	str	r1, [r7, #32]
 800346e:	415b      	adcs	r3, r3
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003476:	4641      	mov	r1, r8
 8003478:	1854      	adds	r4, r2, r1
 800347a:	4649      	mov	r1, r9
 800347c:	eb43 0501 	adc.w	r5, r3, r1
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	00eb      	lsls	r3, r5, #3
 800348a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800348e:	00e2      	lsls	r2, r4, #3
 8003490:	4614      	mov	r4, r2
 8003492:	461d      	mov	r5, r3
 8003494:	4643      	mov	r3, r8
 8003496:	18e3      	adds	r3, r4, r3
 8003498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800349c:	464b      	mov	r3, r9
 800349e:	eb45 0303 	adc.w	r3, r5, r3
 80034a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034c2:	4629      	mov	r1, r5
 80034c4:	008b      	lsls	r3, r1, #2
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034cc:	4621      	mov	r1, r4
 80034ce:	008a      	lsls	r2, r1, #2
 80034d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034d4:	f7fc fedc 	bl	8000290 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4b60      	ldr	r3, [pc, #384]	; (8003660 <UART_SetConfig+0x4e4>)
 80034de:	fba3 2302 	umull	r2, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	011c      	lsls	r4, r3, #4
 80034e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034f8:	4642      	mov	r2, r8
 80034fa:	464b      	mov	r3, r9
 80034fc:	1891      	adds	r1, r2, r2
 80034fe:	61b9      	str	r1, [r7, #24]
 8003500:	415b      	adcs	r3, r3
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003508:	4641      	mov	r1, r8
 800350a:	1851      	adds	r1, r2, r1
 800350c:	6139      	str	r1, [r7, #16]
 800350e:	4649      	mov	r1, r9
 8003510:	414b      	adcs	r3, r1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003520:	4659      	mov	r1, fp
 8003522:	00cb      	lsls	r3, r1, #3
 8003524:	4651      	mov	r1, sl
 8003526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800352a:	4651      	mov	r1, sl
 800352c:	00ca      	lsls	r2, r1, #3
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	4603      	mov	r3, r0
 8003534:	4642      	mov	r2, r8
 8003536:	189b      	adds	r3, r3, r2
 8003538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800353c:	464b      	mov	r3, r9
 800353e:	460a      	mov	r2, r1
 8003540:	eb42 0303 	adc.w	r3, r2, r3
 8003544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	67bb      	str	r3, [r7, #120]	; 0x78
 8003552:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003560:	4649      	mov	r1, r9
 8003562:	008b      	lsls	r3, r1, #2
 8003564:	4641      	mov	r1, r8
 8003566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800356a:	4641      	mov	r1, r8
 800356c:	008a      	lsls	r2, r1, #2
 800356e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003572:	f7fc fe8d 	bl	8000290 <__aeabi_uldivmod>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <UART_SetConfig+0x4e4>)
 800357c:	fba3 1302 	umull	r1, r3, r3, r2
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	2164      	movs	r1, #100	; 0x64
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	3332      	adds	r3, #50	; 0x32
 800358e:	4a34      	ldr	r2, [pc, #208]	; (8003660 <UART_SetConfig+0x4e4>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359a:	441c      	add	r4, r3
 800359c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a0:	2200      	movs	r2, #0
 80035a2:	673b      	str	r3, [r7, #112]	; 0x70
 80035a4:	677a      	str	r2, [r7, #116]	; 0x74
 80035a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035aa:	4642      	mov	r2, r8
 80035ac:	464b      	mov	r3, r9
 80035ae:	1891      	adds	r1, r2, r2
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	415b      	adcs	r3, r3
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ba:	4641      	mov	r1, r8
 80035bc:	1851      	adds	r1, r2, r1
 80035be:	6039      	str	r1, [r7, #0]
 80035c0:	4649      	mov	r1, r9
 80035c2:	414b      	adcs	r3, r1
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035d2:	4659      	mov	r1, fp
 80035d4:	00cb      	lsls	r3, r1, #3
 80035d6:	4651      	mov	r1, sl
 80035d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035dc:	4651      	mov	r1, sl
 80035de:	00ca      	lsls	r2, r1, #3
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	4603      	mov	r3, r0
 80035e6:	4642      	mov	r2, r8
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80035ec:	464b      	mov	r3, r9
 80035ee:	460a      	mov	r2, r1
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003600:	667a      	str	r2, [r7, #100]	; 0x64
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800360e:	4649      	mov	r1, r9
 8003610:	008b      	lsls	r3, r1, #2
 8003612:	4641      	mov	r1, r8
 8003614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003618:	4641      	mov	r1, r8
 800361a:	008a      	lsls	r2, r1, #2
 800361c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003620:	f7fc fe36 	bl	8000290 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <UART_SetConfig+0x4e4>)
 800362a:	fba3 1302 	umull	r1, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2164      	movs	r1, #100	; 0x64
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	3332      	adds	r3, #50	; 0x32
 800363c:	4a08      	ldr	r2, [pc, #32]	; (8003660 <UART_SetConfig+0x4e4>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4422      	add	r2, r4
 8003650:	609a      	str	r2, [r3, #8]
}
 8003652:	bf00      	nop
 8003654:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	51eb851f 	.word	0x51eb851f

08003664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003664:	b084      	sub	sp, #16
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	f107 001c 	add.w	r0, r7, #28
 8003672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	d122      	bne.n	80036c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 faa2 	bl	8003c00 <USB_CoreReset>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e01a      	b.n	80036f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa96 	bl	8003c00 <USB_CoreReset>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
 80036ea:	e005      	b.n	80036f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10b      	bne.n	8003716 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f043 0206 	orr.w	r2, r3, #6
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003722:	b004      	add	sp, #16
 8003724:	4770      	bx	lr

08003726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d115      	bne.n	8003796 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003776:	2001      	movs	r0, #1
 8003778:	f7fd fce4 	bl	8001144 <HAL_Delay>
      ms++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa2e 	bl	8003be4 <USB_GetMode>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d01e      	beq.n	80037cc <USB_SetCurrentMode+0x84>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b31      	cmp	r3, #49	; 0x31
 8003792:	d9f0      	bls.n	8003776 <USB_SetCurrentMode+0x2e>
 8003794:	e01a      	b.n	80037cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d115      	bne.n	80037c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037a8:	2001      	movs	r0, #1
 80037aa:	f7fd fccb 	bl	8001144 <HAL_Delay>
      ms++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa15 	bl	8003be4 <USB_GetMode>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <USB_SetCurrentMode+0x84>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b31      	cmp	r3, #49	; 0x31
 80037c4:	d9f0      	bls.n	80037a8 <USB_SetCurrentMode+0x60>
 80037c6:	e001      	b.n	80037cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e005      	b.n	80037d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b32      	cmp	r3, #50	; 0x32
 80037d0:	d101      	bne.n	80037d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037e0:	b084      	sub	sp, #16
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e009      	b.n	8003814 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	3340      	adds	r3, #64	; 0x40
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	2200      	movs	r2, #0
 800380c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3301      	adds	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b0e      	cmp	r3, #14
 8003818:	d9f2      	bls.n	8003800 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800381a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11c      	bne.n	800385a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
 8003858:	e00b      	b.n	8003872 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003878:	461a      	mov	r2, r3
 800387a:	2300      	movs	r3, #0
 800387c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003884:	4619      	mov	r1, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388c:	461a      	mov	r2, r3
 800388e:	680b      	ldr	r3, [r1, #0]
 8003890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800389e:	2100      	movs	r1, #0
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f965 	bl	8003b70 <USB_SetDevSpeed>
 80038a6:	e008      	b.n	80038ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038a8:	2101      	movs	r1, #1
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f960 	bl	8003b70 <USB_SetDevSpeed>
 80038b0:	e003      	b.n	80038ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038b2:	2103      	movs	r1, #3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f95b 	bl	8003b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038ba:	2110      	movs	r1, #16
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f8f3 	bl	8003aa8 <USB_FlushTxFifo>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f91f 	bl	8003b10 <USB_FlushRxFifo>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e2:	461a      	mov	r2, r3
 80038e4:	2300      	movs	r3, #0
 80038e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ee:	461a      	mov	r2, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fa:	461a      	mov	r2, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	e043      	b.n	800398e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800391c:	d118      	bne.n	8003950 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003930:	461a      	mov	r2, r3
 8003932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e013      	b.n	8003962 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	461a      	mov	r2, r3
 8003948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e008      	b.n	8003962 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	461a      	mov	r2, r3
 800395e:	2300      	movs	r3, #0
 8003960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	461a      	mov	r2, r3
 8003982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	3301      	adds	r3, #1
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	429a      	cmp	r2, r3
 8003994:	d3b7      	bcc.n	8003906 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	e043      	b.n	8003a24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039b2:	d118      	bne.n	80039e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	461a      	mov	r2, r3
 80039c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e013      	b.n	80039f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	461a      	mov	r2, r3
 80039de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e008      	b.n	80039f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	2300      	movs	r3, #0
 8003a08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a16:	461a      	mov	r2, r3
 8003a18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3301      	adds	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3b7      	bcc.n	800399c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f043 0210 	orr.w	r2, r3, #16
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <USB_DevInit+0x2c4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f043 0208 	orr.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aa0:	b004      	add	sp, #16
 8003aa2:	4770      	bx	lr
 8003aa4:	803c3800 	.word	0x803c3800

08003aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <USB_FlushTxFifo+0x64>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e01b      	b.n	8003b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	daf2      	bge.n	8003ab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	019b      	lsls	r3, r3, #6
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <USB_FlushTxFifo+0x64>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e006      	b.n	8003b00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d0f0      	beq.n	8003ae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	00030d40 	.word	0x00030d40

08003b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <USB_FlushRxFifo+0x5c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e018      	b.n	8003b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	daf2      	bge.n	8003b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3301      	adds	r3, #1
 8003b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <USB_FlushRxFifo+0x5c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e006      	b.n	8003b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d0f0      	beq.n	8003b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	00030d40 	.word	0x00030d40

08003b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	68f9      	ldr	r1, [r7, #12]
 8003b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bbc:	f023 0303 	bic.w	r3, r3, #3
 8003bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <USB_CoreReset+0x64>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e01b      	b.n	8003c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	daf2      	bge.n	8003c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a09      	ldr	r2, [pc, #36]	; (8003c64 <USB_CoreReset+0x64>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e006      	b.n	8003c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d0f0      	beq.n	8003c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	00030d40 	.word	0x00030d40

08003c68 <__errno>:
 8003c68:	4b01      	ldr	r3, [pc, #4]	; (8003c70 <__errno+0x8>)
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000000c 	.word	0x2000000c

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	4d0d      	ldr	r5, [pc, #52]	; (8003cac <__libc_init_array+0x38>)
 8003c78:	4c0d      	ldr	r4, [pc, #52]	; (8003cb0 <__libc_init_array+0x3c>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	2600      	movs	r6, #0
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	4d0b      	ldr	r5, [pc, #44]	; (8003cb4 <__libc_init_array+0x40>)
 8003c86:	4c0c      	ldr	r4, [pc, #48]	; (8003cb8 <__libc_init_array+0x44>)
 8003c88:	f001 f882 	bl	8004d90 <_init>
 8003c8c:	1b64      	subs	r4, r4, r5
 8003c8e:	10a4      	asrs	r4, r4, #2
 8003c90:	2600      	movs	r6, #0
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	0800508c 	.word	0x0800508c
 8003cb0:	0800508c 	.word	0x0800508c
 8003cb4:	0800508c 	.word	0x0800508c
 8003cb8:	08005090 	.word	0x08005090

08003cbc <memset>:
 8003cbc:	4402      	add	r2, r0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <memset+0xa>
 8003cc4:	4770      	bx	lr
 8003cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cca:	e7f9      	b.n	8003cc0 <memset+0x4>

08003ccc <iprintf>:
 8003ccc:	b40f      	push	{r0, r1, r2, r3}
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <iprintf+0x2c>)
 8003cd0:	b513      	push	{r0, r1, r4, lr}
 8003cd2:	681c      	ldr	r4, [r3, #0]
 8003cd4:	b124      	cbz	r4, 8003ce0 <iprintf+0x14>
 8003cd6:	69a3      	ldr	r3, [r4, #24]
 8003cd8:	b913      	cbnz	r3, 8003ce0 <iprintf+0x14>
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f000 fa74 	bl	80041c8 <__sinit>
 8003ce0:	ab05      	add	r3, sp, #20
 8003ce2:	9a04      	ldr	r2, [sp, #16]
 8003ce4:	68a1      	ldr	r1, [r4, #8]
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f000 fc7d 	bl	80045e8 <_vfiprintf_r>
 8003cee:	b002      	add	sp, #8
 8003cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf4:	b004      	add	sp, #16
 8003cf6:	4770      	bx	lr
 8003cf8:	2000000c 	.word	0x2000000c

08003cfc <putchar>:
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <putchar+0x28>)
 8003cfe:	b513      	push	{r0, r1, r4, lr}
 8003d00:	681c      	ldr	r4, [r3, #0]
 8003d02:	4601      	mov	r1, r0
 8003d04:	b134      	cbz	r4, 8003d14 <putchar+0x18>
 8003d06:	69a3      	ldr	r3, [r4, #24]
 8003d08:	b923      	cbnz	r3, 8003d14 <putchar+0x18>
 8003d0a:	9001      	str	r0, [sp, #4]
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 fa5b 	bl	80041c8 <__sinit>
 8003d12:	9901      	ldr	r1, [sp, #4]
 8003d14:	68a2      	ldr	r2, [r4, #8]
 8003d16:	4620      	mov	r0, r4
 8003d18:	b002      	add	sp, #8
 8003d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1e:	f000 bf27 	b.w	8004b70 <_putc_r>
 8003d22:	bf00      	nop
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <_puts_r>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	460e      	mov	r6, r1
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	b118      	cbz	r0, 8003d38 <_puts_r+0x10>
 8003d30:	6983      	ldr	r3, [r0, #24]
 8003d32:	b90b      	cbnz	r3, 8003d38 <_puts_r+0x10>
 8003d34:	f000 fa48 	bl	80041c8 <__sinit>
 8003d38:	69ab      	ldr	r3, [r5, #24]
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	b913      	cbnz	r3, 8003d44 <_puts_r+0x1c>
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 fa42 	bl	80041c8 <__sinit>
 8003d44:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <_puts_r+0xd0>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	d120      	bne.n	8003d8c <_puts_r+0x64>
 8003d4a:	686c      	ldr	r4, [r5, #4]
 8003d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d4e:	07db      	lsls	r3, r3, #31
 8003d50:	d405      	bmi.n	8003d5e <_puts_r+0x36>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	0598      	lsls	r0, r3, #22
 8003d56:	d402      	bmi.n	8003d5e <_puts_r+0x36>
 8003d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d5a:	f000 fad3 	bl	8004304 <__retarget_lock_acquire_recursive>
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	0719      	lsls	r1, r3, #28
 8003d62:	d51d      	bpl.n	8003da0 <_puts_r+0x78>
 8003d64:	6923      	ldr	r3, [r4, #16]
 8003d66:	b1db      	cbz	r3, 8003da0 <_puts_r+0x78>
 8003d68:	3e01      	subs	r6, #1
 8003d6a:	68a3      	ldr	r3, [r4, #8]
 8003d6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d70:	3b01      	subs	r3, #1
 8003d72:	60a3      	str	r3, [r4, #8]
 8003d74:	bb39      	cbnz	r1, 8003dc6 <_puts_r+0x9e>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	da38      	bge.n	8003dec <_puts_r+0xc4>
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	210a      	movs	r1, #10
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 f848 	bl	8003e14 <__swbuf_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d011      	beq.n	8003dac <_puts_r+0x84>
 8003d88:	250a      	movs	r5, #10
 8003d8a:	e011      	b.n	8003db0 <_puts_r+0x88>
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <_puts_r+0xd4>)
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	d101      	bne.n	8003d96 <_puts_r+0x6e>
 8003d92:	68ac      	ldr	r4, [r5, #8]
 8003d94:	e7da      	b.n	8003d4c <_puts_r+0x24>
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <_puts_r+0xd8>)
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	bf08      	it	eq
 8003d9c:	68ec      	ldreq	r4, [r5, #12]
 8003d9e:	e7d5      	b.n	8003d4c <_puts_r+0x24>
 8003da0:	4621      	mov	r1, r4
 8003da2:	4628      	mov	r0, r5
 8003da4:	f000 f888 	bl	8003eb8 <__swsetup_r>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d0dd      	beq.n	8003d68 <_puts_r+0x40>
 8003dac:	f04f 35ff 	mov.w	r5, #4294967295
 8003db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003db2:	07da      	lsls	r2, r3, #31
 8003db4:	d405      	bmi.n	8003dc2 <_puts_r+0x9a>
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	059b      	lsls	r3, r3, #22
 8003dba:	d402      	bmi.n	8003dc2 <_puts_r+0x9a>
 8003dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dbe:	f000 faa2 	bl	8004306 <__retarget_lock_release_recursive>
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da04      	bge.n	8003dd4 <_puts_r+0xac>
 8003dca:	69a2      	ldr	r2, [r4, #24]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	dc06      	bgt.n	8003dde <_puts_r+0xb6>
 8003dd0:	290a      	cmp	r1, #10
 8003dd2:	d004      	beq.n	8003dde <_puts_r+0xb6>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	6022      	str	r2, [r4, #0]
 8003dda:	7019      	strb	r1, [r3, #0]
 8003ddc:	e7c5      	b.n	8003d6a <_puts_r+0x42>
 8003dde:	4622      	mov	r2, r4
 8003de0:	4628      	mov	r0, r5
 8003de2:	f000 f817 	bl	8003e14 <__swbuf_r>
 8003de6:	3001      	adds	r0, #1
 8003de8:	d1bf      	bne.n	8003d6a <_puts_r+0x42>
 8003dea:	e7df      	b.n	8003dac <_puts_r+0x84>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	250a      	movs	r5, #10
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	6022      	str	r2, [r4, #0]
 8003df4:	701d      	strb	r5, [r3, #0]
 8003df6:	e7db      	b.n	8003db0 <_puts_r+0x88>
 8003df8:	08005010 	.word	0x08005010
 8003dfc:	08005030 	.word	0x08005030
 8003e00:	08004ff0 	.word	0x08004ff0

08003e04 <puts>:
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <puts+0xc>)
 8003e06:	4601      	mov	r1, r0
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f7ff bf8d 	b.w	8003d28 <_puts_r>
 8003e0e:	bf00      	nop
 8003e10:	2000000c 	.word	0x2000000c

08003e14 <__swbuf_r>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	460e      	mov	r6, r1
 8003e18:	4614      	mov	r4, r2
 8003e1a:	4605      	mov	r5, r0
 8003e1c:	b118      	cbz	r0, 8003e26 <__swbuf_r+0x12>
 8003e1e:	6983      	ldr	r3, [r0, #24]
 8003e20:	b90b      	cbnz	r3, 8003e26 <__swbuf_r+0x12>
 8003e22:	f000 f9d1 	bl	80041c8 <__sinit>
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <__swbuf_r+0x98>)
 8003e28:	429c      	cmp	r4, r3
 8003e2a:	d12b      	bne.n	8003e84 <__swbuf_r+0x70>
 8003e2c:	686c      	ldr	r4, [r5, #4]
 8003e2e:	69a3      	ldr	r3, [r4, #24]
 8003e30:	60a3      	str	r3, [r4, #8]
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	071a      	lsls	r2, r3, #28
 8003e36:	d52f      	bpl.n	8003e98 <__swbuf_r+0x84>
 8003e38:	6923      	ldr	r3, [r4, #16]
 8003e3a:	b36b      	cbz	r3, 8003e98 <__swbuf_r+0x84>
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	6820      	ldr	r0, [r4, #0]
 8003e40:	1ac0      	subs	r0, r0, r3
 8003e42:	6963      	ldr	r3, [r4, #20]
 8003e44:	b2f6      	uxtb	r6, r6
 8003e46:	4283      	cmp	r3, r0
 8003e48:	4637      	mov	r7, r6
 8003e4a:	dc04      	bgt.n	8003e56 <__swbuf_r+0x42>
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 f926 	bl	80040a0 <_fflush_r>
 8003e54:	bb30      	cbnz	r0, 8003ea4 <__swbuf_r+0x90>
 8003e56:	68a3      	ldr	r3, [r4, #8]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	60a3      	str	r3, [r4, #8]
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	6022      	str	r2, [r4, #0]
 8003e62:	701e      	strb	r6, [r3, #0]
 8003e64:	6963      	ldr	r3, [r4, #20]
 8003e66:	3001      	adds	r0, #1
 8003e68:	4283      	cmp	r3, r0
 8003e6a:	d004      	beq.n	8003e76 <__swbuf_r+0x62>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	07db      	lsls	r3, r3, #31
 8003e70:	d506      	bpl.n	8003e80 <__swbuf_r+0x6c>
 8003e72:	2e0a      	cmp	r6, #10
 8003e74:	d104      	bne.n	8003e80 <__swbuf_r+0x6c>
 8003e76:	4621      	mov	r1, r4
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f000 f911 	bl	80040a0 <_fflush_r>
 8003e7e:	b988      	cbnz	r0, 8003ea4 <__swbuf_r+0x90>
 8003e80:	4638      	mov	r0, r7
 8003e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e84:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <__swbuf_r+0x9c>)
 8003e86:	429c      	cmp	r4, r3
 8003e88:	d101      	bne.n	8003e8e <__swbuf_r+0x7a>
 8003e8a:	68ac      	ldr	r4, [r5, #8]
 8003e8c:	e7cf      	b.n	8003e2e <__swbuf_r+0x1a>
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <__swbuf_r+0xa0>)
 8003e90:	429c      	cmp	r4, r3
 8003e92:	bf08      	it	eq
 8003e94:	68ec      	ldreq	r4, [r5, #12]
 8003e96:	e7ca      	b.n	8003e2e <__swbuf_r+0x1a>
 8003e98:	4621      	mov	r1, r4
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f000 f80c 	bl	8003eb8 <__swsetup_r>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	d0cb      	beq.n	8003e3c <__swbuf_r+0x28>
 8003ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ea8:	e7ea      	b.n	8003e80 <__swbuf_r+0x6c>
 8003eaa:	bf00      	nop
 8003eac:	08005010 	.word	0x08005010
 8003eb0:	08005030 	.word	0x08005030
 8003eb4:	08004ff0 	.word	0x08004ff0

08003eb8 <__swsetup_r>:
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <__swsetup_r+0xcc>)
 8003eba:	b570      	push	{r4, r5, r6, lr}
 8003ebc:	681d      	ldr	r5, [r3, #0]
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	b125      	cbz	r5, 8003ece <__swsetup_r+0x16>
 8003ec4:	69ab      	ldr	r3, [r5, #24]
 8003ec6:	b913      	cbnz	r3, 8003ece <__swsetup_r+0x16>
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f000 f97d 	bl	80041c8 <__sinit>
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <__swsetup_r+0xd0>)
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	d10f      	bne.n	8003ef4 <__swsetup_r+0x3c>
 8003ed4:	686c      	ldr	r4, [r5, #4]
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003edc:	0719      	lsls	r1, r3, #28
 8003ede:	d42c      	bmi.n	8003f3a <__swsetup_r+0x82>
 8003ee0:	06dd      	lsls	r5, r3, #27
 8003ee2:	d411      	bmi.n	8003f08 <__swsetup_r+0x50>
 8003ee4:	2309      	movs	r3, #9
 8003ee6:	6033      	str	r3, [r6, #0]
 8003ee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003eec:	81a3      	strh	r3, [r4, #12]
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef2:	e03e      	b.n	8003f72 <__swsetup_r+0xba>
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <__swsetup_r+0xd4>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d101      	bne.n	8003efe <__swsetup_r+0x46>
 8003efa:	68ac      	ldr	r4, [r5, #8]
 8003efc:	e7eb      	b.n	8003ed6 <__swsetup_r+0x1e>
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <__swsetup_r+0xd8>)
 8003f00:	429c      	cmp	r4, r3
 8003f02:	bf08      	it	eq
 8003f04:	68ec      	ldreq	r4, [r5, #12]
 8003f06:	e7e6      	b.n	8003ed6 <__swsetup_r+0x1e>
 8003f08:	0758      	lsls	r0, r3, #29
 8003f0a:	d512      	bpl.n	8003f32 <__swsetup_r+0x7a>
 8003f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f0e:	b141      	cbz	r1, 8003f22 <__swsetup_r+0x6a>
 8003f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f14:	4299      	cmp	r1, r3
 8003f16:	d002      	beq.n	8003f1e <__swsetup_r+0x66>
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f000 fa5b 	bl	80043d4 <_free_r>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	6363      	str	r3, [r4, #52]	; 0x34
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6063      	str	r3, [r4, #4]
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	f043 0308 	orr.w	r3, r3, #8
 8003f38:	81a3      	strh	r3, [r4, #12]
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	b94b      	cbnz	r3, 8003f52 <__swsetup_r+0x9a>
 8003f3e:	89a3      	ldrh	r3, [r4, #12]
 8003f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f48:	d003      	beq.n	8003f52 <__swsetup_r+0x9a>
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f000 fa01 	bl	8004354 <__smakebuf_r>
 8003f52:	89a0      	ldrh	r0, [r4, #12]
 8003f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f58:	f010 0301 	ands.w	r3, r0, #1
 8003f5c:	d00a      	beq.n	8003f74 <__swsetup_r+0xbc>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60a3      	str	r3, [r4, #8]
 8003f62:	6963      	ldr	r3, [r4, #20]
 8003f64:	425b      	negs	r3, r3
 8003f66:	61a3      	str	r3, [r4, #24]
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	b943      	cbnz	r3, 8003f7e <__swsetup_r+0xc6>
 8003f6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f70:	d1ba      	bne.n	8003ee8 <__swsetup_r+0x30>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	0781      	lsls	r1, r0, #30
 8003f76:	bf58      	it	pl
 8003f78:	6963      	ldrpl	r3, [r4, #20]
 8003f7a:	60a3      	str	r3, [r4, #8]
 8003f7c:	e7f4      	b.n	8003f68 <__swsetup_r+0xb0>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e7f7      	b.n	8003f72 <__swsetup_r+0xba>
 8003f82:	bf00      	nop
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	08005010 	.word	0x08005010
 8003f8c:	08005030 	.word	0x08005030
 8003f90:	08004ff0 	.word	0x08004ff0

08003f94 <__sflush_r>:
 8003f94:	898a      	ldrh	r2, [r1, #12]
 8003f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	0710      	lsls	r0, r2, #28
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	d458      	bmi.n	8004054 <__sflush_r+0xc0>
 8003fa2:	684b      	ldr	r3, [r1, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	dc05      	bgt.n	8003fb4 <__sflush_r+0x20>
 8003fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	dc02      	bgt.n	8003fb4 <__sflush_r+0x20>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fb6:	2e00      	cmp	r6, #0
 8003fb8:	d0f9      	beq.n	8003fae <__sflush_r+0x1a>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fc0:	682f      	ldr	r7, [r5, #0]
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	d032      	beq.n	800402c <__sflush_r+0x98>
 8003fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	075a      	lsls	r2, r3, #29
 8003fcc:	d505      	bpl.n	8003fda <__sflush_r+0x46>
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	1ac0      	subs	r0, r0, r3
 8003fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fd4:	b10b      	cbz	r3, 8003fda <__sflush_r+0x46>
 8003fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fd8:	1ac0      	subs	r0, r0, r3
 8003fda:	2300      	movs	r3, #0
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fe0:	6a21      	ldr	r1, [r4, #32]
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	47b0      	blx	r6
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	d106      	bne.n	8003ffa <__sflush_r+0x66>
 8003fec:	6829      	ldr	r1, [r5, #0]
 8003fee:	291d      	cmp	r1, #29
 8003ff0:	d82c      	bhi.n	800404c <__sflush_r+0xb8>
 8003ff2:	4a2a      	ldr	r2, [pc, #168]	; (800409c <__sflush_r+0x108>)
 8003ff4:	40ca      	lsrs	r2, r1
 8003ff6:	07d6      	lsls	r6, r2, #31
 8003ff8:	d528      	bpl.n	800404c <__sflush_r+0xb8>
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	6062      	str	r2, [r4, #4]
 8003ffe:	04d9      	lsls	r1, r3, #19
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	6022      	str	r2, [r4, #0]
 8004004:	d504      	bpl.n	8004010 <__sflush_r+0x7c>
 8004006:	1c42      	adds	r2, r0, #1
 8004008:	d101      	bne.n	800400e <__sflush_r+0x7a>
 800400a:	682b      	ldr	r3, [r5, #0]
 800400c:	b903      	cbnz	r3, 8004010 <__sflush_r+0x7c>
 800400e:	6560      	str	r0, [r4, #84]	; 0x54
 8004010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004012:	602f      	str	r7, [r5, #0]
 8004014:	2900      	cmp	r1, #0
 8004016:	d0ca      	beq.n	8003fae <__sflush_r+0x1a>
 8004018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800401c:	4299      	cmp	r1, r3
 800401e:	d002      	beq.n	8004026 <__sflush_r+0x92>
 8004020:	4628      	mov	r0, r5
 8004022:	f000 f9d7 	bl	80043d4 <_free_r>
 8004026:	2000      	movs	r0, #0
 8004028:	6360      	str	r0, [r4, #52]	; 0x34
 800402a:	e7c1      	b.n	8003fb0 <__sflush_r+0x1c>
 800402c:	6a21      	ldr	r1, [r4, #32]
 800402e:	2301      	movs	r3, #1
 8004030:	4628      	mov	r0, r5
 8004032:	47b0      	blx	r6
 8004034:	1c41      	adds	r1, r0, #1
 8004036:	d1c7      	bne.n	8003fc8 <__sflush_r+0x34>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0c4      	beq.n	8003fc8 <__sflush_r+0x34>
 800403e:	2b1d      	cmp	r3, #29
 8004040:	d001      	beq.n	8004046 <__sflush_r+0xb2>
 8004042:	2b16      	cmp	r3, #22
 8004044:	d101      	bne.n	800404a <__sflush_r+0xb6>
 8004046:	602f      	str	r7, [r5, #0]
 8004048:	e7b1      	b.n	8003fae <__sflush_r+0x1a>
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	e7ad      	b.n	8003fb0 <__sflush_r+0x1c>
 8004054:	690f      	ldr	r7, [r1, #16]
 8004056:	2f00      	cmp	r7, #0
 8004058:	d0a9      	beq.n	8003fae <__sflush_r+0x1a>
 800405a:	0793      	lsls	r3, r2, #30
 800405c:	680e      	ldr	r6, [r1, #0]
 800405e:	bf08      	it	eq
 8004060:	694b      	ldreq	r3, [r1, #20]
 8004062:	600f      	str	r7, [r1, #0]
 8004064:	bf18      	it	ne
 8004066:	2300      	movne	r3, #0
 8004068:	eba6 0807 	sub.w	r8, r6, r7
 800406c:	608b      	str	r3, [r1, #8]
 800406e:	f1b8 0f00 	cmp.w	r8, #0
 8004072:	dd9c      	ble.n	8003fae <__sflush_r+0x1a>
 8004074:	6a21      	ldr	r1, [r4, #32]
 8004076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004078:	4643      	mov	r3, r8
 800407a:	463a      	mov	r2, r7
 800407c:	4628      	mov	r0, r5
 800407e:	47b0      	blx	r6
 8004080:	2800      	cmp	r0, #0
 8004082:	dc06      	bgt.n	8004092 <__sflush_r+0xfe>
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	f04f 30ff 	mov.w	r0, #4294967295
 8004090:	e78e      	b.n	8003fb0 <__sflush_r+0x1c>
 8004092:	4407      	add	r7, r0
 8004094:	eba8 0800 	sub.w	r8, r8, r0
 8004098:	e7e9      	b.n	800406e <__sflush_r+0xda>
 800409a:	bf00      	nop
 800409c:	20400001 	.word	0x20400001

080040a0 <_fflush_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	690b      	ldr	r3, [r1, #16]
 80040a4:	4605      	mov	r5, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	b913      	cbnz	r3, 80040b0 <_fflush_r+0x10>
 80040aa:	2500      	movs	r5, #0
 80040ac:	4628      	mov	r0, r5
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	b118      	cbz	r0, 80040ba <_fflush_r+0x1a>
 80040b2:	6983      	ldr	r3, [r0, #24]
 80040b4:	b90b      	cbnz	r3, 80040ba <_fflush_r+0x1a>
 80040b6:	f000 f887 	bl	80041c8 <__sinit>
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <_fflush_r+0x6c>)
 80040bc:	429c      	cmp	r4, r3
 80040be:	d11b      	bne.n	80040f8 <_fflush_r+0x58>
 80040c0:	686c      	ldr	r4, [r5, #4]
 80040c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0ef      	beq.n	80040aa <_fflush_r+0xa>
 80040ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040cc:	07d0      	lsls	r0, r2, #31
 80040ce:	d404      	bmi.n	80040da <_fflush_r+0x3a>
 80040d0:	0599      	lsls	r1, r3, #22
 80040d2:	d402      	bmi.n	80040da <_fflush_r+0x3a>
 80040d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040d6:	f000 f915 	bl	8004304 <__retarget_lock_acquire_recursive>
 80040da:	4628      	mov	r0, r5
 80040dc:	4621      	mov	r1, r4
 80040de:	f7ff ff59 	bl	8003f94 <__sflush_r>
 80040e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040e4:	07da      	lsls	r2, r3, #31
 80040e6:	4605      	mov	r5, r0
 80040e8:	d4e0      	bmi.n	80040ac <_fflush_r+0xc>
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	059b      	lsls	r3, r3, #22
 80040ee:	d4dd      	bmi.n	80040ac <_fflush_r+0xc>
 80040f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040f2:	f000 f908 	bl	8004306 <__retarget_lock_release_recursive>
 80040f6:	e7d9      	b.n	80040ac <_fflush_r+0xc>
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <_fflush_r+0x70>)
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d101      	bne.n	8004102 <_fflush_r+0x62>
 80040fe:	68ac      	ldr	r4, [r5, #8]
 8004100:	e7df      	b.n	80040c2 <_fflush_r+0x22>
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <_fflush_r+0x74>)
 8004104:	429c      	cmp	r4, r3
 8004106:	bf08      	it	eq
 8004108:	68ec      	ldreq	r4, [r5, #12]
 800410a:	e7da      	b.n	80040c2 <_fflush_r+0x22>
 800410c:	08005010 	.word	0x08005010
 8004110:	08005030 	.word	0x08005030
 8004114:	08004ff0 	.word	0x08004ff0

08004118 <std>:
 8004118:	2300      	movs	r3, #0
 800411a:	b510      	push	{r4, lr}
 800411c:	4604      	mov	r4, r0
 800411e:	e9c0 3300 	strd	r3, r3, [r0]
 8004122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004126:	6083      	str	r3, [r0, #8]
 8004128:	8181      	strh	r1, [r0, #12]
 800412a:	6643      	str	r3, [r0, #100]	; 0x64
 800412c:	81c2      	strh	r2, [r0, #14]
 800412e:	6183      	str	r3, [r0, #24]
 8004130:	4619      	mov	r1, r3
 8004132:	2208      	movs	r2, #8
 8004134:	305c      	adds	r0, #92	; 0x5c
 8004136:	f7ff fdc1 	bl	8003cbc <memset>
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <std+0x38>)
 800413c:	6263      	str	r3, [r4, #36]	; 0x24
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <std+0x3c>)
 8004140:	62a3      	str	r3, [r4, #40]	; 0x28
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <std+0x40>)
 8004144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <std+0x44>)
 8004148:	6224      	str	r4, [r4, #32]
 800414a:	6323      	str	r3, [r4, #48]	; 0x30
 800414c:	bd10      	pop	{r4, pc}
 800414e:	bf00      	nop
 8004150:	08004c21 	.word	0x08004c21
 8004154:	08004c43 	.word	0x08004c43
 8004158:	08004c7b 	.word	0x08004c7b
 800415c:	08004c9f 	.word	0x08004c9f

08004160 <_cleanup_r>:
 8004160:	4901      	ldr	r1, [pc, #4]	; (8004168 <_cleanup_r+0x8>)
 8004162:	f000 b8af 	b.w	80042c4 <_fwalk_reent>
 8004166:	bf00      	nop
 8004168:	080040a1 	.word	0x080040a1

0800416c <__sfmoreglue>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2268      	movs	r2, #104	; 0x68
 8004170:	1e4d      	subs	r5, r1, #1
 8004172:	4355      	muls	r5, r2
 8004174:	460e      	mov	r6, r1
 8004176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800417a:	f000 f997 	bl	80044ac <_malloc_r>
 800417e:	4604      	mov	r4, r0
 8004180:	b140      	cbz	r0, 8004194 <__sfmoreglue+0x28>
 8004182:	2100      	movs	r1, #0
 8004184:	e9c0 1600 	strd	r1, r6, [r0]
 8004188:	300c      	adds	r0, #12
 800418a:	60a0      	str	r0, [r4, #8]
 800418c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004190:	f7ff fd94 	bl	8003cbc <memset>
 8004194:	4620      	mov	r0, r4
 8004196:	bd70      	pop	{r4, r5, r6, pc}

08004198 <__sfp_lock_acquire>:
 8004198:	4801      	ldr	r0, [pc, #4]	; (80041a0 <__sfp_lock_acquire+0x8>)
 800419a:	f000 b8b3 	b.w	8004304 <__retarget_lock_acquire_recursive>
 800419e:	bf00      	nop
 80041a0:	200006bd 	.word	0x200006bd

080041a4 <__sfp_lock_release>:
 80041a4:	4801      	ldr	r0, [pc, #4]	; (80041ac <__sfp_lock_release+0x8>)
 80041a6:	f000 b8ae 	b.w	8004306 <__retarget_lock_release_recursive>
 80041aa:	bf00      	nop
 80041ac:	200006bd 	.word	0x200006bd

080041b0 <__sinit_lock_acquire>:
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <__sinit_lock_acquire+0x8>)
 80041b2:	f000 b8a7 	b.w	8004304 <__retarget_lock_acquire_recursive>
 80041b6:	bf00      	nop
 80041b8:	200006be 	.word	0x200006be

080041bc <__sinit_lock_release>:
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <__sinit_lock_release+0x8>)
 80041be:	f000 b8a2 	b.w	8004306 <__retarget_lock_release_recursive>
 80041c2:	bf00      	nop
 80041c4:	200006be 	.word	0x200006be

080041c8 <__sinit>:
 80041c8:	b510      	push	{r4, lr}
 80041ca:	4604      	mov	r4, r0
 80041cc:	f7ff fff0 	bl	80041b0 <__sinit_lock_acquire>
 80041d0:	69a3      	ldr	r3, [r4, #24]
 80041d2:	b11b      	cbz	r3, 80041dc <__sinit+0x14>
 80041d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d8:	f7ff bff0 	b.w	80041bc <__sinit_lock_release>
 80041dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041e0:	6523      	str	r3, [r4, #80]	; 0x50
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <__sinit+0x68>)
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <__sinit+0x6c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80041ea:	42a3      	cmp	r3, r4
 80041ec:	bf04      	itt	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	61a3      	streq	r3, [r4, #24]
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 f820 	bl	8004238 <__sfp>
 80041f8:	6060      	str	r0, [r4, #4]
 80041fa:	4620      	mov	r0, r4
 80041fc:	f000 f81c 	bl	8004238 <__sfp>
 8004200:	60a0      	str	r0, [r4, #8]
 8004202:	4620      	mov	r0, r4
 8004204:	f000 f818 	bl	8004238 <__sfp>
 8004208:	2200      	movs	r2, #0
 800420a:	60e0      	str	r0, [r4, #12]
 800420c:	2104      	movs	r1, #4
 800420e:	6860      	ldr	r0, [r4, #4]
 8004210:	f7ff ff82 	bl	8004118 <std>
 8004214:	68a0      	ldr	r0, [r4, #8]
 8004216:	2201      	movs	r2, #1
 8004218:	2109      	movs	r1, #9
 800421a:	f7ff ff7d 	bl	8004118 <std>
 800421e:	68e0      	ldr	r0, [r4, #12]
 8004220:	2202      	movs	r2, #2
 8004222:	2112      	movs	r1, #18
 8004224:	f7ff ff78 	bl	8004118 <std>
 8004228:	2301      	movs	r3, #1
 800422a:	61a3      	str	r3, [r4, #24]
 800422c:	e7d2      	b.n	80041d4 <__sinit+0xc>
 800422e:	bf00      	nop
 8004230:	08004fec 	.word	0x08004fec
 8004234:	08004161 	.word	0x08004161

08004238 <__sfp>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	4607      	mov	r7, r0
 800423c:	f7ff ffac 	bl	8004198 <__sfp_lock_acquire>
 8004240:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <__sfp+0x84>)
 8004242:	681e      	ldr	r6, [r3, #0]
 8004244:	69b3      	ldr	r3, [r6, #24]
 8004246:	b913      	cbnz	r3, 800424e <__sfp+0x16>
 8004248:	4630      	mov	r0, r6
 800424a:	f7ff ffbd 	bl	80041c8 <__sinit>
 800424e:	3648      	adds	r6, #72	; 0x48
 8004250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004254:	3b01      	subs	r3, #1
 8004256:	d503      	bpl.n	8004260 <__sfp+0x28>
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	b30b      	cbz	r3, 80042a0 <__sfp+0x68>
 800425c:	6836      	ldr	r6, [r6, #0]
 800425e:	e7f7      	b.n	8004250 <__sfp+0x18>
 8004260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004264:	b9d5      	cbnz	r5, 800429c <__sfp+0x64>
 8004266:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <__sfp+0x88>)
 8004268:	60e3      	str	r3, [r4, #12]
 800426a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800426e:	6665      	str	r5, [r4, #100]	; 0x64
 8004270:	f000 f847 	bl	8004302 <__retarget_lock_init_recursive>
 8004274:	f7ff ff96 	bl	80041a4 <__sfp_lock_release>
 8004278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800427c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004280:	6025      	str	r5, [r4, #0]
 8004282:	61a5      	str	r5, [r4, #24]
 8004284:	2208      	movs	r2, #8
 8004286:	4629      	mov	r1, r5
 8004288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800428c:	f7ff fd16 	bl	8003cbc <memset>
 8004290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004298:	4620      	mov	r0, r4
 800429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800429c:	3468      	adds	r4, #104	; 0x68
 800429e:	e7d9      	b.n	8004254 <__sfp+0x1c>
 80042a0:	2104      	movs	r1, #4
 80042a2:	4638      	mov	r0, r7
 80042a4:	f7ff ff62 	bl	800416c <__sfmoreglue>
 80042a8:	4604      	mov	r4, r0
 80042aa:	6030      	str	r0, [r6, #0]
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d1d5      	bne.n	800425c <__sfp+0x24>
 80042b0:	f7ff ff78 	bl	80041a4 <__sfp_lock_release>
 80042b4:	230c      	movs	r3, #12
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	e7ee      	b.n	8004298 <__sfp+0x60>
 80042ba:	bf00      	nop
 80042bc:	08004fec 	.word	0x08004fec
 80042c0:	ffff0001 	.word	0xffff0001

080042c4 <_fwalk_reent>:
 80042c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c8:	4606      	mov	r6, r0
 80042ca:	4688      	mov	r8, r1
 80042cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042d0:	2700      	movs	r7, #0
 80042d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042d6:	f1b9 0901 	subs.w	r9, r9, #1
 80042da:	d505      	bpl.n	80042e8 <_fwalk_reent+0x24>
 80042dc:	6824      	ldr	r4, [r4, #0]
 80042de:	2c00      	cmp	r4, #0
 80042e0:	d1f7      	bne.n	80042d2 <_fwalk_reent+0xe>
 80042e2:	4638      	mov	r0, r7
 80042e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e8:	89ab      	ldrh	r3, [r5, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d907      	bls.n	80042fe <_fwalk_reent+0x3a>
 80042ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042f2:	3301      	adds	r3, #1
 80042f4:	d003      	beq.n	80042fe <_fwalk_reent+0x3a>
 80042f6:	4629      	mov	r1, r5
 80042f8:	4630      	mov	r0, r6
 80042fa:	47c0      	blx	r8
 80042fc:	4307      	orrs	r7, r0
 80042fe:	3568      	adds	r5, #104	; 0x68
 8004300:	e7e9      	b.n	80042d6 <_fwalk_reent+0x12>

08004302 <__retarget_lock_init_recursive>:
 8004302:	4770      	bx	lr

08004304 <__retarget_lock_acquire_recursive>:
 8004304:	4770      	bx	lr

08004306 <__retarget_lock_release_recursive>:
 8004306:	4770      	bx	lr

08004308 <__swhatbuf_r>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	460e      	mov	r6, r1
 800430c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004310:	2900      	cmp	r1, #0
 8004312:	b096      	sub	sp, #88	; 0x58
 8004314:	4614      	mov	r4, r2
 8004316:	461d      	mov	r5, r3
 8004318:	da08      	bge.n	800432c <__swhatbuf_r+0x24>
 800431a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	602a      	str	r2, [r5, #0]
 8004322:	061a      	lsls	r2, r3, #24
 8004324:	d410      	bmi.n	8004348 <__swhatbuf_r+0x40>
 8004326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432a:	e00e      	b.n	800434a <__swhatbuf_r+0x42>
 800432c:	466a      	mov	r2, sp
 800432e:	f000 fcdd 	bl	8004cec <_fstat_r>
 8004332:	2800      	cmp	r0, #0
 8004334:	dbf1      	blt.n	800431a <__swhatbuf_r+0x12>
 8004336:	9a01      	ldr	r2, [sp, #4]
 8004338:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800433c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004340:	425a      	negs	r2, r3
 8004342:	415a      	adcs	r2, r3
 8004344:	602a      	str	r2, [r5, #0]
 8004346:	e7ee      	b.n	8004326 <__swhatbuf_r+0x1e>
 8004348:	2340      	movs	r3, #64	; 0x40
 800434a:	2000      	movs	r0, #0
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	b016      	add	sp, #88	; 0x58
 8004350:	bd70      	pop	{r4, r5, r6, pc}
	...

08004354 <__smakebuf_r>:
 8004354:	898b      	ldrh	r3, [r1, #12]
 8004356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004358:	079d      	lsls	r5, r3, #30
 800435a:	4606      	mov	r6, r0
 800435c:	460c      	mov	r4, r1
 800435e:	d507      	bpl.n	8004370 <__smakebuf_r+0x1c>
 8004360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	6123      	str	r3, [r4, #16]
 8004368:	2301      	movs	r3, #1
 800436a:	6163      	str	r3, [r4, #20]
 800436c:	b002      	add	sp, #8
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	ab01      	add	r3, sp, #4
 8004372:	466a      	mov	r2, sp
 8004374:	f7ff ffc8 	bl	8004308 <__swhatbuf_r>
 8004378:	9900      	ldr	r1, [sp, #0]
 800437a:	4605      	mov	r5, r0
 800437c:	4630      	mov	r0, r6
 800437e:	f000 f895 	bl	80044ac <_malloc_r>
 8004382:	b948      	cbnz	r0, 8004398 <__smakebuf_r+0x44>
 8004384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004388:	059a      	lsls	r2, r3, #22
 800438a:	d4ef      	bmi.n	800436c <__smakebuf_r+0x18>
 800438c:	f023 0303 	bic.w	r3, r3, #3
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	e7e3      	b.n	8004360 <__smakebuf_r+0xc>
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <__smakebuf_r+0x7c>)
 800439a:	62b3      	str	r3, [r6, #40]	; 0x28
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	6020      	str	r0, [r4, #0]
 80043a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	6163      	str	r3, [r4, #20]
 80043aa:	9b01      	ldr	r3, [sp, #4]
 80043ac:	6120      	str	r0, [r4, #16]
 80043ae:	b15b      	cbz	r3, 80043c8 <__smakebuf_r+0x74>
 80043b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 fcab 	bl	8004d10 <_isatty_r>
 80043ba:	b128      	cbz	r0, 80043c8 <__smakebuf_r+0x74>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	89a0      	ldrh	r0, [r4, #12]
 80043ca:	4305      	orrs	r5, r0
 80043cc:	81a5      	strh	r5, [r4, #12]
 80043ce:	e7cd      	b.n	800436c <__smakebuf_r+0x18>
 80043d0:	08004161 	.word	0x08004161

080043d4 <_free_r>:
 80043d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043d6:	2900      	cmp	r1, #0
 80043d8:	d044      	beq.n	8004464 <_free_r+0x90>
 80043da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043de:	9001      	str	r0, [sp, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f1a1 0404 	sub.w	r4, r1, #4
 80043e6:	bfb8      	it	lt
 80043e8:	18e4      	addlt	r4, r4, r3
 80043ea:	f000 fcb3 	bl	8004d54 <__malloc_lock>
 80043ee:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <_free_r+0x94>)
 80043f0:	9801      	ldr	r0, [sp, #4]
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	b933      	cbnz	r3, 8004404 <_free_r+0x30>
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	6014      	str	r4, [r2, #0]
 80043fa:	b003      	add	sp, #12
 80043fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004400:	f000 bcae 	b.w	8004d60 <__malloc_unlock>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d908      	bls.n	800441a <_free_r+0x46>
 8004408:	6825      	ldr	r5, [r4, #0]
 800440a:	1961      	adds	r1, r4, r5
 800440c:	428b      	cmp	r3, r1
 800440e:	bf01      	itttt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	1949      	addeq	r1, r1, r5
 8004416:	6021      	streq	r1, [r4, #0]
 8004418:	e7ed      	b.n	80043f6 <_free_r+0x22>
 800441a:	461a      	mov	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b10b      	cbz	r3, 8004424 <_free_r+0x50>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d9fa      	bls.n	800441a <_free_r+0x46>
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1855      	adds	r5, r2, r1
 8004428:	42a5      	cmp	r5, r4
 800442a:	d10b      	bne.n	8004444 <_free_r+0x70>
 800442c:	6824      	ldr	r4, [r4, #0]
 800442e:	4421      	add	r1, r4
 8004430:	1854      	adds	r4, r2, r1
 8004432:	42a3      	cmp	r3, r4
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	d1e0      	bne.n	80043fa <_free_r+0x26>
 8004438:	681c      	ldr	r4, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	4421      	add	r1, r4
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	e7da      	b.n	80043fa <_free_r+0x26>
 8004444:	d902      	bls.n	800444c <_free_r+0x78>
 8004446:	230c      	movs	r3, #12
 8004448:	6003      	str	r3, [r0, #0]
 800444a:	e7d6      	b.n	80043fa <_free_r+0x26>
 800444c:	6825      	ldr	r5, [r4, #0]
 800444e:	1961      	adds	r1, r4, r5
 8004450:	428b      	cmp	r3, r1
 8004452:	bf04      	itt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	bf04      	itt	eq
 800445c:	1949      	addeq	r1, r1, r5
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7ca      	b.n	80043fa <_free_r+0x26>
 8004464:	b003      	add	sp, #12
 8004466:	bd30      	pop	{r4, r5, pc}
 8004468:	200006c0 	.word	0x200006c0

0800446c <sbrk_aligned>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4e0e      	ldr	r6, [pc, #56]	; (80044a8 <sbrk_aligned+0x3c>)
 8004470:	460c      	mov	r4, r1
 8004472:	6831      	ldr	r1, [r6, #0]
 8004474:	4605      	mov	r5, r0
 8004476:	b911      	cbnz	r1, 800447e <sbrk_aligned+0x12>
 8004478:	f000 fbc2 	bl	8004c00 <_sbrk_r>
 800447c:	6030      	str	r0, [r6, #0]
 800447e:	4621      	mov	r1, r4
 8004480:	4628      	mov	r0, r5
 8004482:	f000 fbbd 	bl	8004c00 <_sbrk_r>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	d00a      	beq.n	80044a0 <sbrk_aligned+0x34>
 800448a:	1cc4      	adds	r4, r0, #3
 800448c:	f024 0403 	bic.w	r4, r4, #3
 8004490:	42a0      	cmp	r0, r4
 8004492:	d007      	beq.n	80044a4 <sbrk_aligned+0x38>
 8004494:	1a21      	subs	r1, r4, r0
 8004496:	4628      	mov	r0, r5
 8004498:	f000 fbb2 	bl	8004c00 <_sbrk_r>
 800449c:	3001      	adds	r0, #1
 800449e:	d101      	bne.n	80044a4 <sbrk_aligned+0x38>
 80044a0:	f04f 34ff 	mov.w	r4, #4294967295
 80044a4:	4620      	mov	r0, r4
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	200006c4 	.word	0x200006c4

080044ac <_malloc_r>:
 80044ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b0:	1ccd      	adds	r5, r1, #3
 80044b2:	f025 0503 	bic.w	r5, r5, #3
 80044b6:	3508      	adds	r5, #8
 80044b8:	2d0c      	cmp	r5, #12
 80044ba:	bf38      	it	cc
 80044bc:	250c      	movcc	r5, #12
 80044be:	2d00      	cmp	r5, #0
 80044c0:	4607      	mov	r7, r0
 80044c2:	db01      	blt.n	80044c8 <_malloc_r+0x1c>
 80044c4:	42a9      	cmp	r1, r5
 80044c6:	d905      	bls.n	80044d4 <_malloc_r+0x28>
 80044c8:	230c      	movs	r3, #12
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	2600      	movs	r6, #0
 80044ce:	4630      	mov	r0, r6
 80044d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d4:	4e2e      	ldr	r6, [pc, #184]	; (8004590 <_malloc_r+0xe4>)
 80044d6:	f000 fc3d 	bl	8004d54 <__malloc_lock>
 80044da:	6833      	ldr	r3, [r6, #0]
 80044dc:	461c      	mov	r4, r3
 80044de:	bb34      	cbnz	r4, 800452e <_malloc_r+0x82>
 80044e0:	4629      	mov	r1, r5
 80044e2:	4638      	mov	r0, r7
 80044e4:	f7ff ffc2 	bl	800446c <sbrk_aligned>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	4604      	mov	r4, r0
 80044ec:	d14d      	bne.n	800458a <_malloc_r+0xde>
 80044ee:	6834      	ldr	r4, [r6, #0]
 80044f0:	4626      	mov	r6, r4
 80044f2:	2e00      	cmp	r6, #0
 80044f4:	d140      	bne.n	8004578 <_malloc_r+0xcc>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	4631      	mov	r1, r6
 80044fa:	4638      	mov	r0, r7
 80044fc:	eb04 0803 	add.w	r8, r4, r3
 8004500:	f000 fb7e 	bl	8004c00 <_sbrk_r>
 8004504:	4580      	cmp	r8, r0
 8004506:	d13a      	bne.n	800457e <_malloc_r+0xd2>
 8004508:	6821      	ldr	r1, [r4, #0]
 800450a:	3503      	adds	r5, #3
 800450c:	1a6d      	subs	r5, r5, r1
 800450e:	f025 0503 	bic.w	r5, r5, #3
 8004512:	3508      	adds	r5, #8
 8004514:	2d0c      	cmp	r5, #12
 8004516:	bf38      	it	cc
 8004518:	250c      	movcc	r5, #12
 800451a:	4629      	mov	r1, r5
 800451c:	4638      	mov	r0, r7
 800451e:	f7ff ffa5 	bl	800446c <sbrk_aligned>
 8004522:	3001      	adds	r0, #1
 8004524:	d02b      	beq.n	800457e <_malloc_r+0xd2>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	442b      	add	r3, r5
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	e00e      	b.n	800454c <_malloc_r+0xa0>
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	1b52      	subs	r2, r2, r5
 8004532:	d41e      	bmi.n	8004572 <_malloc_r+0xc6>
 8004534:	2a0b      	cmp	r2, #11
 8004536:	d916      	bls.n	8004566 <_malloc_r+0xba>
 8004538:	1961      	adds	r1, r4, r5
 800453a:	42a3      	cmp	r3, r4
 800453c:	6025      	str	r5, [r4, #0]
 800453e:	bf18      	it	ne
 8004540:	6059      	strne	r1, [r3, #4]
 8004542:	6863      	ldr	r3, [r4, #4]
 8004544:	bf08      	it	eq
 8004546:	6031      	streq	r1, [r6, #0]
 8004548:	5162      	str	r2, [r4, r5]
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	4638      	mov	r0, r7
 800454e:	f104 060b 	add.w	r6, r4, #11
 8004552:	f000 fc05 	bl	8004d60 <__malloc_unlock>
 8004556:	f026 0607 	bic.w	r6, r6, #7
 800455a:	1d23      	adds	r3, r4, #4
 800455c:	1af2      	subs	r2, r6, r3
 800455e:	d0b6      	beq.n	80044ce <_malloc_r+0x22>
 8004560:	1b9b      	subs	r3, r3, r6
 8004562:	50a3      	str	r3, [r4, r2]
 8004564:	e7b3      	b.n	80044ce <_malloc_r+0x22>
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	42a3      	cmp	r3, r4
 800456a:	bf0c      	ite	eq
 800456c:	6032      	streq	r2, [r6, #0]
 800456e:	605a      	strne	r2, [r3, #4]
 8004570:	e7ec      	b.n	800454c <_malloc_r+0xa0>
 8004572:	4623      	mov	r3, r4
 8004574:	6864      	ldr	r4, [r4, #4]
 8004576:	e7b2      	b.n	80044de <_malloc_r+0x32>
 8004578:	4634      	mov	r4, r6
 800457a:	6876      	ldr	r6, [r6, #4]
 800457c:	e7b9      	b.n	80044f2 <_malloc_r+0x46>
 800457e:	230c      	movs	r3, #12
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4638      	mov	r0, r7
 8004584:	f000 fbec 	bl	8004d60 <__malloc_unlock>
 8004588:	e7a1      	b.n	80044ce <_malloc_r+0x22>
 800458a:	6025      	str	r5, [r4, #0]
 800458c:	e7de      	b.n	800454c <_malloc_r+0xa0>
 800458e:	bf00      	nop
 8004590:	200006c0 	.word	0x200006c0

08004594 <__sfputc_r>:
 8004594:	6893      	ldr	r3, [r2, #8]
 8004596:	3b01      	subs	r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	b410      	push	{r4}
 800459c:	6093      	str	r3, [r2, #8]
 800459e:	da08      	bge.n	80045b2 <__sfputc_r+0x1e>
 80045a0:	6994      	ldr	r4, [r2, #24]
 80045a2:	42a3      	cmp	r3, r4
 80045a4:	db01      	blt.n	80045aa <__sfputc_r+0x16>
 80045a6:	290a      	cmp	r1, #10
 80045a8:	d103      	bne.n	80045b2 <__sfputc_r+0x1e>
 80045aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ae:	f7ff bc31 	b.w	8003e14 <__swbuf_r>
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	1c58      	adds	r0, r3, #1
 80045b6:	6010      	str	r0, [r2, #0]
 80045b8:	7019      	strb	r1, [r3, #0]
 80045ba:	4608      	mov	r0, r1
 80045bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <__sfputs_r>:
 80045c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c4:	4606      	mov	r6, r0
 80045c6:	460f      	mov	r7, r1
 80045c8:	4614      	mov	r4, r2
 80045ca:	18d5      	adds	r5, r2, r3
 80045cc:	42ac      	cmp	r4, r5
 80045ce:	d101      	bne.n	80045d4 <__sfputs_r+0x12>
 80045d0:	2000      	movs	r0, #0
 80045d2:	e007      	b.n	80045e4 <__sfputs_r+0x22>
 80045d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d8:	463a      	mov	r2, r7
 80045da:	4630      	mov	r0, r6
 80045dc:	f7ff ffda 	bl	8004594 <__sfputc_r>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d1f3      	bne.n	80045cc <__sfputs_r+0xa>
 80045e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045e8 <_vfiprintf_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	460d      	mov	r5, r1
 80045ee:	b09d      	sub	sp, #116	; 0x74
 80045f0:	4614      	mov	r4, r2
 80045f2:	4698      	mov	r8, r3
 80045f4:	4606      	mov	r6, r0
 80045f6:	b118      	cbz	r0, 8004600 <_vfiprintf_r+0x18>
 80045f8:	6983      	ldr	r3, [r0, #24]
 80045fa:	b90b      	cbnz	r3, 8004600 <_vfiprintf_r+0x18>
 80045fc:	f7ff fde4 	bl	80041c8 <__sinit>
 8004600:	4b89      	ldr	r3, [pc, #548]	; (8004828 <_vfiprintf_r+0x240>)
 8004602:	429d      	cmp	r5, r3
 8004604:	d11b      	bne.n	800463e <_vfiprintf_r+0x56>
 8004606:	6875      	ldr	r5, [r6, #4]
 8004608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800460a:	07d9      	lsls	r1, r3, #31
 800460c:	d405      	bmi.n	800461a <_vfiprintf_r+0x32>
 800460e:	89ab      	ldrh	r3, [r5, #12]
 8004610:	059a      	lsls	r2, r3, #22
 8004612:	d402      	bmi.n	800461a <_vfiprintf_r+0x32>
 8004614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004616:	f7ff fe75 	bl	8004304 <__retarget_lock_acquire_recursive>
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	d501      	bpl.n	8004624 <_vfiprintf_r+0x3c>
 8004620:	692b      	ldr	r3, [r5, #16]
 8004622:	b9eb      	cbnz	r3, 8004660 <_vfiprintf_r+0x78>
 8004624:	4629      	mov	r1, r5
 8004626:	4630      	mov	r0, r6
 8004628:	f7ff fc46 	bl	8003eb8 <__swsetup_r>
 800462c:	b1c0      	cbz	r0, 8004660 <_vfiprintf_r+0x78>
 800462e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004630:	07dc      	lsls	r4, r3, #31
 8004632:	d50e      	bpl.n	8004652 <_vfiprintf_r+0x6a>
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	b01d      	add	sp, #116	; 0x74
 800463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800463e:	4b7b      	ldr	r3, [pc, #492]	; (800482c <_vfiprintf_r+0x244>)
 8004640:	429d      	cmp	r5, r3
 8004642:	d101      	bne.n	8004648 <_vfiprintf_r+0x60>
 8004644:	68b5      	ldr	r5, [r6, #8]
 8004646:	e7df      	b.n	8004608 <_vfiprintf_r+0x20>
 8004648:	4b79      	ldr	r3, [pc, #484]	; (8004830 <_vfiprintf_r+0x248>)
 800464a:	429d      	cmp	r5, r3
 800464c:	bf08      	it	eq
 800464e:	68f5      	ldreq	r5, [r6, #12]
 8004650:	e7da      	b.n	8004608 <_vfiprintf_r+0x20>
 8004652:	89ab      	ldrh	r3, [r5, #12]
 8004654:	0598      	lsls	r0, r3, #22
 8004656:	d4ed      	bmi.n	8004634 <_vfiprintf_r+0x4c>
 8004658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800465a:	f7ff fe54 	bl	8004306 <__retarget_lock_release_recursive>
 800465e:	e7e9      	b.n	8004634 <_vfiprintf_r+0x4c>
 8004660:	2300      	movs	r3, #0
 8004662:	9309      	str	r3, [sp, #36]	; 0x24
 8004664:	2320      	movs	r3, #32
 8004666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800466a:	f8cd 800c 	str.w	r8, [sp, #12]
 800466e:	2330      	movs	r3, #48	; 0x30
 8004670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004834 <_vfiprintf_r+0x24c>
 8004674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004678:	f04f 0901 	mov.w	r9, #1
 800467c:	4623      	mov	r3, r4
 800467e:	469a      	mov	sl, r3
 8004680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004684:	b10a      	cbz	r2, 800468a <_vfiprintf_r+0xa2>
 8004686:	2a25      	cmp	r2, #37	; 0x25
 8004688:	d1f9      	bne.n	800467e <_vfiprintf_r+0x96>
 800468a:	ebba 0b04 	subs.w	fp, sl, r4
 800468e:	d00b      	beq.n	80046a8 <_vfiprintf_r+0xc0>
 8004690:	465b      	mov	r3, fp
 8004692:	4622      	mov	r2, r4
 8004694:	4629      	mov	r1, r5
 8004696:	4630      	mov	r0, r6
 8004698:	f7ff ff93 	bl	80045c2 <__sfputs_r>
 800469c:	3001      	adds	r0, #1
 800469e:	f000 80aa 	beq.w	80047f6 <_vfiprintf_r+0x20e>
 80046a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a4:	445a      	add	r2, fp
 80046a6:	9209      	str	r2, [sp, #36]	; 0x24
 80046a8:	f89a 3000 	ldrb.w	r3, [sl]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80a2 	beq.w	80047f6 <_vfiprintf_r+0x20e>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046bc:	f10a 0a01 	add.w	sl, sl, #1
 80046c0:	9304      	str	r3, [sp, #16]
 80046c2:	9307      	str	r3, [sp, #28]
 80046c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046c8:	931a      	str	r3, [sp, #104]	; 0x68
 80046ca:	4654      	mov	r4, sl
 80046cc:	2205      	movs	r2, #5
 80046ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d2:	4858      	ldr	r0, [pc, #352]	; (8004834 <_vfiprintf_r+0x24c>)
 80046d4:	f7fb fd8c 	bl	80001f0 <memchr>
 80046d8:	9a04      	ldr	r2, [sp, #16]
 80046da:	b9d8      	cbnz	r0, 8004714 <_vfiprintf_r+0x12c>
 80046dc:	06d1      	lsls	r1, r2, #27
 80046de:	bf44      	itt	mi
 80046e0:	2320      	movmi	r3, #32
 80046e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e6:	0713      	lsls	r3, r2, #28
 80046e8:	bf44      	itt	mi
 80046ea:	232b      	movmi	r3, #43	; 0x2b
 80046ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f0:	f89a 3000 	ldrb.w	r3, [sl]
 80046f4:	2b2a      	cmp	r3, #42	; 0x2a
 80046f6:	d015      	beq.n	8004724 <_vfiprintf_r+0x13c>
 80046f8:	9a07      	ldr	r2, [sp, #28]
 80046fa:	4654      	mov	r4, sl
 80046fc:	2000      	movs	r0, #0
 80046fe:	f04f 0c0a 	mov.w	ip, #10
 8004702:	4621      	mov	r1, r4
 8004704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004708:	3b30      	subs	r3, #48	; 0x30
 800470a:	2b09      	cmp	r3, #9
 800470c:	d94e      	bls.n	80047ac <_vfiprintf_r+0x1c4>
 800470e:	b1b0      	cbz	r0, 800473e <_vfiprintf_r+0x156>
 8004710:	9207      	str	r2, [sp, #28]
 8004712:	e014      	b.n	800473e <_vfiprintf_r+0x156>
 8004714:	eba0 0308 	sub.w	r3, r0, r8
 8004718:	fa09 f303 	lsl.w	r3, r9, r3
 800471c:	4313      	orrs	r3, r2
 800471e:	9304      	str	r3, [sp, #16]
 8004720:	46a2      	mov	sl, r4
 8004722:	e7d2      	b.n	80046ca <_vfiprintf_r+0xe2>
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	1d19      	adds	r1, r3, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	9103      	str	r1, [sp, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	bfbb      	ittet	lt
 8004730:	425b      	neglt	r3, r3
 8004732:	f042 0202 	orrlt.w	r2, r2, #2
 8004736:	9307      	strge	r3, [sp, #28]
 8004738:	9307      	strlt	r3, [sp, #28]
 800473a:	bfb8      	it	lt
 800473c:	9204      	strlt	r2, [sp, #16]
 800473e:	7823      	ldrb	r3, [r4, #0]
 8004740:	2b2e      	cmp	r3, #46	; 0x2e
 8004742:	d10c      	bne.n	800475e <_vfiprintf_r+0x176>
 8004744:	7863      	ldrb	r3, [r4, #1]
 8004746:	2b2a      	cmp	r3, #42	; 0x2a
 8004748:	d135      	bne.n	80047b6 <_vfiprintf_r+0x1ce>
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	9203      	str	r2, [sp, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfb8      	it	lt
 8004756:	f04f 33ff 	movlt.w	r3, #4294967295
 800475a:	3402      	adds	r4, #2
 800475c:	9305      	str	r3, [sp, #20]
 800475e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004844 <_vfiprintf_r+0x25c>
 8004762:	7821      	ldrb	r1, [r4, #0]
 8004764:	2203      	movs	r2, #3
 8004766:	4650      	mov	r0, sl
 8004768:	f7fb fd42 	bl	80001f0 <memchr>
 800476c:	b140      	cbz	r0, 8004780 <_vfiprintf_r+0x198>
 800476e:	2340      	movs	r3, #64	; 0x40
 8004770:	eba0 000a 	sub.w	r0, r0, sl
 8004774:	fa03 f000 	lsl.w	r0, r3, r0
 8004778:	9b04      	ldr	r3, [sp, #16]
 800477a:	4303      	orrs	r3, r0
 800477c:	3401      	adds	r4, #1
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004784:	482c      	ldr	r0, [pc, #176]	; (8004838 <_vfiprintf_r+0x250>)
 8004786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800478a:	2206      	movs	r2, #6
 800478c:	f7fb fd30 	bl	80001f0 <memchr>
 8004790:	2800      	cmp	r0, #0
 8004792:	d03f      	beq.n	8004814 <_vfiprintf_r+0x22c>
 8004794:	4b29      	ldr	r3, [pc, #164]	; (800483c <_vfiprintf_r+0x254>)
 8004796:	bb1b      	cbnz	r3, 80047e0 <_vfiprintf_r+0x1f8>
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	3307      	adds	r3, #7
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	3308      	adds	r3, #8
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a6:	443b      	add	r3, r7
 80047a8:	9309      	str	r3, [sp, #36]	; 0x24
 80047aa:	e767      	b.n	800467c <_vfiprintf_r+0x94>
 80047ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b0:	460c      	mov	r4, r1
 80047b2:	2001      	movs	r0, #1
 80047b4:	e7a5      	b.n	8004702 <_vfiprintf_r+0x11a>
 80047b6:	2300      	movs	r3, #0
 80047b8:	3401      	adds	r4, #1
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	4619      	mov	r1, r3
 80047be:	f04f 0c0a 	mov.w	ip, #10
 80047c2:	4620      	mov	r0, r4
 80047c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c8:	3a30      	subs	r2, #48	; 0x30
 80047ca:	2a09      	cmp	r2, #9
 80047cc:	d903      	bls.n	80047d6 <_vfiprintf_r+0x1ee>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0c5      	beq.n	800475e <_vfiprintf_r+0x176>
 80047d2:	9105      	str	r1, [sp, #20]
 80047d4:	e7c3      	b.n	800475e <_vfiprintf_r+0x176>
 80047d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047da:	4604      	mov	r4, r0
 80047dc:	2301      	movs	r3, #1
 80047de:	e7f0      	b.n	80047c2 <_vfiprintf_r+0x1da>
 80047e0:	ab03      	add	r3, sp, #12
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	462a      	mov	r2, r5
 80047e6:	4b16      	ldr	r3, [pc, #88]	; (8004840 <_vfiprintf_r+0x258>)
 80047e8:	a904      	add	r1, sp, #16
 80047ea:	4630      	mov	r0, r6
 80047ec:	f3af 8000 	nop.w
 80047f0:	4607      	mov	r7, r0
 80047f2:	1c78      	adds	r0, r7, #1
 80047f4:	d1d6      	bne.n	80047a4 <_vfiprintf_r+0x1bc>
 80047f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047f8:	07d9      	lsls	r1, r3, #31
 80047fa:	d405      	bmi.n	8004808 <_vfiprintf_r+0x220>
 80047fc:	89ab      	ldrh	r3, [r5, #12]
 80047fe:	059a      	lsls	r2, r3, #22
 8004800:	d402      	bmi.n	8004808 <_vfiprintf_r+0x220>
 8004802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004804:	f7ff fd7f 	bl	8004306 <__retarget_lock_release_recursive>
 8004808:	89ab      	ldrh	r3, [r5, #12]
 800480a:	065b      	lsls	r3, r3, #25
 800480c:	f53f af12 	bmi.w	8004634 <_vfiprintf_r+0x4c>
 8004810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004812:	e711      	b.n	8004638 <_vfiprintf_r+0x50>
 8004814:	ab03      	add	r3, sp, #12
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	462a      	mov	r2, r5
 800481a:	4b09      	ldr	r3, [pc, #36]	; (8004840 <_vfiprintf_r+0x258>)
 800481c:	a904      	add	r1, sp, #16
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f880 	bl	8004924 <_printf_i>
 8004824:	e7e4      	b.n	80047f0 <_vfiprintf_r+0x208>
 8004826:	bf00      	nop
 8004828:	08005010 	.word	0x08005010
 800482c:	08005030 	.word	0x08005030
 8004830:	08004ff0 	.word	0x08004ff0
 8004834:	08005050 	.word	0x08005050
 8004838:	0800505a 	.word	0x0800505a
 800483c:	00000000 	.word	0x00000000
 8004840:	080045c3 	.word	0x080045c3
 8004844:	08005056 	.word	0x08005056

08004848 <_printf_common>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	4616      	mov	r6, r2
 800484e:	4699      	mov	r9, r3
 8004850:	688a      	ldr	r2, [r1, #8]
 8004852:	690b      	ldr	r3, [r1, #16]
 8004854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004858:	4293      	cmp	r3, r2
 800485a:	bfb8      	it	lt
 800485c:	4613      	movlt	r3, r2
 800485e:	6033      	str	r3, [r6, #0]
 8004860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004864:	4607      	mov	r7, r0
 8004866:	460c      	mov	r4, r1
 8004868:	b10a      	cbz	r2, 800486e <_printf_common+0x26>
 800486a:	3301      	adds	r3, #1
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	0699      	lsls	r1, r3, #26
 8004872:	bf42      	ittt	mi
 8004874:	6833      	ldrmi	r3, [r6, #0]
 8004876:	3302      	addmi	r3, #2
 8004878:	6033      	strmi	r3, [r6, #0]
 800487a:	6825      	ldr	r5, [r4, #0]
 800487c:	f015 0506 	ands.w	r5, r5, #6
 8004880:	d106      	bne.n	8004890 <_printf_common+0x48>
 8004882:	f104 0a19 	add.w	sl, r4, #25
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	6832      	ldr	r2, [r6, #0]
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	42ab      	cmp	r3, r5
 800488e:	dc26      	bgt.n	80048de <_printf_common+0x96>
 8004890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004894:	1e13      	subs	r3, r2, #0
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	bf18      	it	ne
 800489a:	2301      	movne	r3, #1
 800489c:	0692      	lsls	r2, r2, #26
 800489e:	d42b      	bmi.n	80048f8 <_printf_common+0xb0>
 80048a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d01e      	beq.n	80048ec <_printf_common+0xa4>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	68e5      	ldr	r5, [r4, #12]
 80048b2:	6832      	ldr	r2, [r6, #0]
 80048b4:	f003 0306 	and.w	r3, r3, #6
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	bf08      	it	eq
 80048bc:	1aad      	subeq	r5, r5, r2
 80048be:	68a3      	ldr	r3, [r4, #8]
 80048c0:	6922      	ldr	r2, [r4, #16]
 80048c2:	bf0c      	ite	eq
 80048c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c8:	2500      	movne	r5, #0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfc4      	itt	gt
 80048ce:	1a9b      	subgt	r3, r3, r2
 80048d0:	18ed      	addgt	r5, r5, r3
 80048d2:	2600      	movs	r6, #0
 80048d4:	341a      	adds	r4, #26
 80048d6:	42b5      	cmp	r5, r6
 80048d8:	d11a      	bne.n	8004910 <_printf_common+0xc8>
 80048da:	2000      	movs	r0, #0
 80048dc:	e008      	b.n	80048f0 <_printf_common+0xa8>
 80048de:	2301      	movs	r3, #1
 80048e0:	4652      	mov	r2, sl
 80048e2:	4649      	mov	r1, r9
 80048e4:	4638      	mov	r0, r7
 80048e6:	47c0      	blx	r8
 80048e8:	3001      	adds	r0, #1
 80048ea:	d103      	bne.n	80048f4 <_printf_common+0xac>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	3501      	adds	r5, #1
 80048f6:	e7c6      	b.n	8004886 <_printf_common+0x3e>
 80048f8:	18e1      	adds	r1, r4, r3
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	2030      	movs	r0, #48	; 0x30
 80048fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004902:	4422      	add	r2, r4
 8004904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800490c:	3302      	adds	r3, #2
 800490e:	e7c7      	b.n	80048a0 <_printf_common+0x58>
 8004910:	2301      	movs	r3, #1
 8004912:	4622      	mov	r2, r4
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	3001      	adds	r0, #1
 800491c:	d0e6      	beq.n	80048ec <_printf_common+0xa4>
 800491e:	3601      	adds	r6, #1
 8004920:	e7d9      	b.n	80048d6 <_printf_common+0x8e>
	...

08004924 <_printf_i>:
 8004924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	7e0f      	ldrb	r7, [r1, #24]
 800492a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800492c:	2f78      	cmp	r7, #120	; 0x78
 800492e:	4691      	mov	r9, r2
 8004930:	4680      	mov	r8, r0
 8004932:	460c      	mov	r4, r1
 8004934:	469a      	mov	sl, r3
 8004936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800493a:	d807      	bhi.n	800494c <_printf_i+0x28>
 800493c:	2f62      	cmp	r7, #98	; 0x62
 800493e:	d80a      	bhi.n	8004956 <_printf_i+0x32>
 8004940:	2f00      	cmp	r7, #0
 8004942:	f000 80d8 	beq.w	8004af6 <_printf_i+0x1d2>
 8004946:	2f58      	cmp	r7, #88	; 0x58
 8004948:	f000 80a3 	beq.w	8004a92 <_printf_i+0x16e>
 800494c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004954:	e03a      	b.n	80049cc <_printf_i+0xa8>
 8004956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800495a:	2b15      	cmp	r3, #21
 800495c:	d8f6      	bhi.n	800494c <_printf_i+0x28>
 800495e:	a101      	add	r1, pc, #4	; (adr r1, 8004964 <_printf_i+0x40>)
 8004960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004964:	080049bd 	.word	0x080049bd
 8004968:	080049d1 	.word	0x080049d1
 800496c:	0800494d 	.word	0x0800494d
 8004970:	0800494d 	.word	0x0800494d
 8004974:	0800494d 	.word	0x0800494d
 8004978:	0800494d 	.word	0x0800494d
 800497c:	080049d1 	.word	0x080049d1
 8004980:	0800494d 	.word	0x0800494d
 8004984:	0800494d 	.word	0x0800494d
 8004988:	0800494d 	.word	0x0800494d
 800498c:	0800494d 	.word	0x0800494d
 8004990:	08004add 	.word	0x08004add
 8004994:	08004a01 	.word	0x08004a01
 8004998:	08004abf 	.word	0x08004abf
 800499c:	0800494d 	.word	0x0800494d
 80049a0:	0800494d 	.word	0x0800494d
 80049a4:	08004aff 	.word	0x08004aff
 80049a8:	0800494d 	.word	0x0800494d
 80049ac:	08004a01 	.word	0x08004a01
 80049b0:	0800494d 	.word	0x0800494d
 80049b4:	0800494d 	.word	0x0800494d
 80049b8:	08004ac7 	.word	0x08004ac7
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	602a      	str	r2, [r5, #0]
 80049c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0a3      	b.n	8004b18 <_printf_i+0x1f4>
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	6829      	ldr	r1, [r5, #0]
 80049d4:	0606      	lsls	r6, r0, #24
 80049d6:	f101 0304 	add.w	r3, r1, #4
 80049da:	d50a      	bpl.n	80049f2 <_printf_i+0xce>
 80049dc:	680e      	ldr	r6, [r1, #0]
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	2e00      	cmp	r6, #0
 80049e2:	da03      	bge.n	80049ec <_printf_i+0xc8>
 80049e4:	232d      	movs	r3, #45	; 0x2d
 80049e6:	4276      	negs	r6, r6
 80049e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ec:	485e      	ldr	r0, [pc, #376]	; (8004b68 <_printf_i+0x244>)
 80049ee:	230a      	movs	r3, #10
 80049f0:	e019      	b.n	8004a26 <_printf_i+0x102>
 80049f2:	680e      	ldr	r6, [r1, #0]
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049fa:	bf18      	it	ne
 80049fc:	b236      	sxthne	r6, r6
 80049fe:	e7ef      	b.n	80049e0 <_printf_i+0xbc>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	1d19      	adds	r1, r3, #4
 8004a06:	6029      	str	r1, [r5, #0]
 8004a08:	0601      	lsls	r1, r0, #24
 8004a0a:	d501      	bpl.n	8004a10 <_printf_i+0xec>
 8004a0c:	681e      	ldr	r6, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <_printf_i+0xf2>
 8004a10:	0646      	lsls	r6, r0, #25
 8004a12:	d5fb      	bpl.n	8004a0c <_printf_i+0xe8>
 8004a14:	881e      	ldrh	r6, [r3, #0]
 8004a16:	4854      	ldr	r0, [pc, #336]	; (8004b68 <_printf_i+0x244>)
 8004a18:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2308      	moveq	r3, #8
 8004a1e:	230a      	movne	r3, #10
 8004a20:	2100      	movs	r1, #0
 8004a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a26:	6865      	ldr	r5, [r4, #4]
 8004a28:	60a5      	str	r5, [r4, #8]
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	bfa2      	ittt	ge
 8004a2e:	6821      	ldrge	r1, [r4, #0]
 8004a30:	f021 0104 	bicge.w	r1, r1, #4
 8004a34:	6021      	strge	r1, [r4, #0]
 8004a36:	b90e      	cbnz	r6, 8004a3c <_printf_i+0x118>
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	d04d      	beq.n	8004ad8 <_printf_i+0x1b4>
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a42:	fb03 6711 	mls	r7, r3, r1, r6
 8004a46:	5dc7      	ldrb	r7, [r0, r7]
 8004a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a4c:	4637      	mov	r7, r6
 8004a4e:	42bb      	cmp	r3, r7
 8004a50:	460e      	mov	r6, r1
 8004a52:	d9f4      	bls.n	8004a3e <_printf_i+0x11a>
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d10b      	bne.n	8004a70 <_printf_i+0x14c>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	07de      	lsls	r6, r3, #31
 8004a5c:	d508      	bpl.n	8004a70 <_printf_i+0x14c>
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	6861      	ldr	r1, [r4, #4]
 8004a62:	4299      	cmp	r1, r3
 8004a64:	bfde      	ittt	le
 8004a66:	2330      	movle	r3, #48	; 0x30
 8004a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a70:	1b52      	subs	r2, r2, r5
 8004a72:	6122      	str	r2, [r4, #16]
 8004a74:	f8cd a000 	str.w	sl, [sp]
 8004a78:	464b      	mov	r3, r9
 8004a7a:	aa03      	add	r2, sp, #12
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4640      	mov	r0, r8
 8004a80:	f7ff fee2 	bl	8004848 <_printf_common>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d14c      	bne.n	8004b22 <_printf_i+0x1fe>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	b004      	add	sp, #16
 8004a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a92:	4835      	ldr	r0, [pc, #212]	; (8004b68 <_printf_i+0x244>)
 8004a94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a98:	6829      	ldr	r1, [r5, #0]
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa0:	6029      	str	r1, [r5, #0]
 8004aa2:	061d      	lsls	r5, r3, #24
 8004aa4:	d514      	bpl.n	8004ad0 <_printf_i+0x1ac>
 8004aa6:	07df      	lsls	r7, r3, #31
 8004aa8:	bf44      	itt	mi
 8004aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8004aae:	6023      	strmi	r3, [r4, #0]
 8004ab0:	b91e      	cbnz	r6, 8004aba <_printf_i+0x196>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	f023 0320 	bic.w	r3, r3, #32
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	2310      	movs	r3, #16
 8004abc:	e7b0      	b.n	8004a20 <_printf_i+0xfc>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f043 0320 	orr.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	2378      	movs	r3, #120	; 0x78
 8004ac8:	4828      	ldr	r0, [pc, #160]	; (8004b6c <_printf_i+0x248>)
 8004aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ace:	e7e3      	b.n	8004a98 <_printf_i+0x174>
 8004ad0:	0659      	lsls	r1, r3, #25
 8004ad2:	bf48      	it	mi
 8004ad4:	b2b6      	uxthmi	r6, r6
 8004ad6:	e7e6      	b.n	8004aa6 <_printf_i+0x182>
 8004ad8:	4615      	mov	r5, r2
 8004ada:	e7bb      	b.n	8004a54 <_printf_i+0x130>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	6826      	ldr	r6, [r4, #0]
 8004ae0:	6961      	ldr	r1, [r4, #20]
 8004ae2:	1d18      	adds	r0, r3, #4
 8004ae4:	6028      	str	r0, [r5, #0]
 8004ae6:	0635      	lsls	r5, r6, #24
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	d501      	bpl.n	8004af0 <_printf_i+0x1cc>
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <_printf_i+0x1d2>
 8004af0:	0670      	lsls	r0, r6, #25
 8004af2:	d5fb      	bpl.n	8004aec <_printf_i+0x1c8>
 8004af4:	8019      	strh	r1, [r3, #0]
 8004af6:	2300      	movs	r3, #0
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	4615      	mov	r5, r2
 8004afc:	e7ba      	b.n	8004a74 <_printf_i+0x150>
 8004afe:	682b      	ldr	r3, [r5, #0]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	602a      	str	r2, [r5, #0]
 8004b04:	681d      	ldr	r5, [r3, #0]
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7fb fb70 	bl	80001f0 <memchr>
 8004b10:	b108      	cbz	r0, 8004b16 <_printf_i+0x1f2>
 8004b12:	1b40      	subs	r0, r0, r5
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b20:	e7a8      	b.n	8004a74 <_printf_i+0x150>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	462a      	mov	r2, r5
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	47d0      	blx	sl
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d0ab      	beq.n	8004a88 <_printf_i+0x164>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079b      	lsls	r3, r3, #30
 8004b34:	d413      	bmi.n	8004b5e <_printf_i+0x23a>
 8004b36:	68e0      	ldr	r0, [r4, #12]
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	4298      	cmp	r0, r3
 8004b3c:	bfb8      	it	lt
 8004b3e:	4618      	movlt	r0, r3
 8004b40:	e7a4      	b.n	8004a8c <_printf_i+0x168>
 8004b42:	2301      	movs	r3, #1
 8004b44:	4632      	mov	r2, r6
 8004b46:	4649      	mov	r1, r9
 8004b48:	4640      	mov	r0, r8
 8004b4a:	47d0      	blx	sl
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	d09b      	beq.n	8004a88 <_printf_i+0x164>
 8004b50:	3501      	adds	r5, #1
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	9903      	ldr	r1, [sp, #12]
 8004b56:	1a5b      	subs	r3, r3, r1
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dcf2      	bgt.n	8004b42 <_printf_i+0x21e>
 8004b5c:	e7eb      	b.n	8004b36 <_printf_i+0x212>
 8004b5e:	2500      	movs	r5, #0
 8004b60:	f104 0619 	add.w	r6, r4, #25
 8004b64:	e7f5      	b.n	8004b52 <_printf_i+0x22e>
 8004b66:	bf00      	nop
 8004b68:	08005061 	.word	0x08005061
 8004b6c:	08005072 	.word	0x08005072

08004b70 <_putc_r>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	460d      	mov	r5, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	4606      	mov	r6, r0
 8004b78:	b118      	cbz	r0, 8004b82 <_putc_r+0x12>
 8004b7a:	6983      	ldr	r3, [r0, #24]
 8004b7c:	b90b      	cbnz	r3, 8004b82 <_putc_r+0x12>
 8004b7e:	f7ff fb23 	bl	80041c8 <__sinit>
 8004b82:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <_putc_r+0x84>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	d124      	bne.n	8004bd2 <_putc_r+0x62>
 8004b88:	6874      	ldr	r4, [r6, #4]
 8004b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b8c:	07d8      	lsls	r0, r3, #31
 8004b8e:	d405      	bmi.n	8004b9c <_putc_r+0x2c>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	0599      	lsls	r1, r3, #22
 8004b94:	d402      	bmi.n	8004b9c <_putc_r+0x2c>
 8004b96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b98:	f7ff fbb4 	bl	8004304 <__retarget_lock_acquire_recursive>
 8004b9c:	68a3      	ldr	r3, [r4, #8]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	60a3      	str	r3, [r4, #8]
 8004ba4:	da05      	bge.n	8004bb2 <_putc_r+0x42>
 8004ba6:	69a2      	ldr	r2, [r4, #24]
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	db1c      	blt.n	8004be6 <_putc_r+0x76>
 8004bac:	b2eb      	uxtb	r3, r5
 8004bae:	2b0a      	cmp	r3, #10
 8004bb0:	d019      	beq.n	8004be6 <_putc_r+0x76>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	6022      	str	r2, [r4, #0]
 8004bb8:	701d      	strb	r5, [r3, #0]
 8004bba:	b2ed      	uxtb	r5, r5
 8004bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bbe:	07da      	lsls	r2, r3, #31
 8004bc0:	d405      	bmi.n	8004bce <_putc_r+0x5e>
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	059b      	lsls	r3, r3, #22
 8004bc6:	d402      	bmi.n	8004bce <_putc_r+0x5e>
 8004bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bca:	f7ff fb9c 	bl	8004306 <__retarget_lock_release_recursive>
 8004bce:	4628      	mov	r0, r5
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <_putc_r+0x88>)
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	d101      	bne.n	8004bdc <_putc_r+0x6c>
 8004bd8:	68b4      	ldr	r4, [r6, #8]
 8004bda:	e7d6      	b.n	8004b8a <_putc_r+0x1a>
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <_putc_r+0x8c>)
 8004bde:	429c      	cmp	r4, r3
 8004be0:	bf08      	it	eq
 8004be2:	68f4      	ldreq	r4, [r6, #12]
 8004be4:	e7d1      	b.n	8004b8a <_putc_r+0x1a>
 8004be6:	4629      	mov	r1, r5
 8004be8:	4622      	mov	r2, r4
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff f912 	bl	8003e14 <__swbuf_r>
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	e7e3      	b.n	8004bbc <_putc_r+0x4c>
 8004bf4:	08005010 	.word	0x08005010
 8004bf8:	08005030 	.word	0x08005030
 8004bfc:	08004ff0 	.word	0x08004ff0

08004c00 <_sbrk_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d06      	ldr	r5, [pc, #24]	; (8004c1c <_sbrk_r+0x1c>)
 8004c04:	2300      	movs	r3, #0
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	602b      	str	r3, [r5, #0]
 8004c0c:	f7fc f9b6 	bl	8000f7c <_sbrk>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_sbrk_r+0x1a>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_sbrk_r+0x1a>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	200006c8 	.word	0x200006c8

08004c20 <__sread>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	f000 f8a0 	bl	8004d6c <_read_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	bfab      	itete	ge
 8004c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c32:	89a3      	ldrhlt	r3, [r4, #12]
 8004c34:	181b      	addge	r3, r3, r0
 8004c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c3a:	bfac      	ite	ge
 8004c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c3e:	81a3      	strhlt	r3, [r4, #12]
 8004c40:	bd10      	pop	{r4, pc}

08004c42 <__swrite>:
 8004c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c46:	461f      	mov	r7, r3
 8004c48:	898b      	ldrh	r3, [r1, #12]
 8004c4a:	05db      	lsls	r3, r3, #23
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	460c      	mov	r4, r1
 8004c50:	4616      	mov	r6, r2
 8004c52:	d505      	bpl.n	8004c60 <__swrite+0x1e>
 8004c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c58:	2302      	movs	r3, #2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f000 f868 	bl	8004d30 <_lseek_r>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	463b      	mov	r3, r7
 8004c70:	4628      	mov	r0, r5
 8004c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	f000 b817 	b.w	8004ca8 <_write_r>

08004c7a <__sseek>:
 8004c7a:	b510      	push	{r4, lr}
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c82:	f000 f855 	bl	8004d30 <_lseek_r>
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	bf15      	itete	ne
 8004c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c96:	81a3      	strheq	r3, [r4, #12]
 8004c98:	bf18      	it	ne
 8004c9a:	81a3      	strhne	r3, [r4, #12]
 8004c9c:	bd10      	pop	{r4, pc}

08004c9e <__sclose>:
 8004c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca2:	f000 b813 	b.w	8004ccc <_close_r>
	...

08004ca8 <_write_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d07      	ldr	r5, [pc, #28]	; (8004cc8 <_write_r+0x20>)
 8004cac:	4604      	mov	r4, r0
 8004cae:	4608      	mov	r0, r1
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fc f90f 	bl	8000eda <_write>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_write_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_write_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	200006c8 	.word	0x200006c8

08004ccc <_close_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d06      	ldr	r5, [pc, #24]	; (8004ce8 <_close_r+0x1c>)
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	602b      	str	r3, [r5, #0]
 8004cd8:	f7fc f91b 	bl	8000f12 <_close>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <_close_r+0x1a>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	b103      	cbz	r3, 8004ce6 <_close_r+0x1a>
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	200006c8 	.word	0x200006c8

08004cec <_fstat_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4d07      	ldr	r5, [pc, #28]	; (8004d0c <_fstat_r+0x20>)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	f7fc f916 	bl	8000f2a <_fstat>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	d102      	bne.n	8004d08 <_fstat_r+0x1c>
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	b103      	cbz	r3, 8004d08 <_fstat_r+0x1c>
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	bd38      	pop	{r3, r4, r5, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200006c8 	.word	0x200006c8

08004d10 <_isatty_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4d06      	ldr	r5, [pc, #24]	; (8004d2c <_isatty_r+0x1c>)
 8004d14:	2300      	movs	r3, #0
 8004d16:	4604      	mov	r4, r0
 8004d18:	4608      	mov	r0, r1
 8004d1a:	602b      	str	r3, [r5, #0]
 8004d1c:	f7fc f915 	bl	8000f4a <_isatty>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_isatty_r+0x1a>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_isatty_r+0x1a>
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	200006c8 	.word	0x200006c8

08004d30 <_lseek_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4d07      	ldr	r5, [pc, #28]	; (8004d50 <_lseek_r+0x20>)
 8004d34:	4604      	mov	r4, r0
 8004d36:	4608      	mov	r0, r1
 8004d38:	4611      	mov	r1, r2
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fc f90e 	bl	8000f60 <_lseek>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_lseek_r+0x1e>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_lseek_r+0x1e>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	200006c8 	.word	0x200006c8

08004d54 <__malloc_lock>:
 8004d54:	4801      	ldr	r0, [pc, #4]	; (8004d5c <__malloc_lock+0x8>)
 8004d56:	f7ff bad5 	b.w	8004304 <__retarget_lock_acquire_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	200006bc 	.word	0x200006bc

08004d60 <__malloc_unlock>:
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <__malloc_unlock+0x8>)
 8004d62:	f7ff bad0 	b.w	8004306 <__retarget_lock_release_recursive>
 8004d66:	bf00      	nop
 8004d68:	200006bc 	.word	0x200006bc

08004d6c <_read_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d07      	ldr	r5, [pc, #28]	; (8004d8c <_read_r+0x20>)
 8004d70:	4604      	mov	r4, r0
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fc f890 	bl	8000ea0 <_read>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_read_r+0x1e>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_read_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	200006c8 	.word	0x200006c8

08004d90 <_init>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr

08004d9c <_fini>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr

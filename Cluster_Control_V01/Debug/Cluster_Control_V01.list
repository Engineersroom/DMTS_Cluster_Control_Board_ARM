
Cluster_Control_V01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053dc  080053dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e4  080053e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000660  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d0  200006d0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec42  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f1  00000000  00000000  0002ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  00031a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024561  00000000  00000000  00032600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e455  00000000  00000000  00056b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d811e  00000000  00000000  00064fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d0d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cb0  00000000  00000000  0013d124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800501c 	.word	0x0800501c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800501c 	.word	0x0800501c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <__io_putchar+0x20>)
 80005a6:	f002 f945 	bl	8002834 <HAL_UART_Transmit>
  return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fe95 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f9f9 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 faef 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 fa95 	bl	8000af8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ce:	f000 fabd 	bl	8000b4c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005d2:	f000 fa5b 	bl	8000a8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // HAL_UART_Receive_IT(&huart3, &UART_RX_data, 1);

  printf("\r\n----------------------------------------------------------------- \r\n");
 80005d6:	489d      	ldr	r0, [pc, #628]	; (800084c <main+0x294>)
 80005d8:	f003 fd5a 	bl	8004090 <puts>
  printf("Version 2022, 10, 06 Cluster Control Board Ver 0.0.3 \r\n");
 80005dc:	489c      	ldr	r0, [pc, #624]	; (8000850 <main+0x298>)
 80005de:	f003 fd57 	bl	8004090 <puts>
  printf("0.0.1 Labview Communication Test Checked Labview RX\r\n");
 80005e2:	489c      	ldr	r0, [pc, #624]	; (8000854 <main+0x29c>)
 80005e4:	f003 fd54 	bl	8004090 <puts>
  printf("0.0.2 Labview Communication Test Checked Labview TX\r\n");
 80005e8:	489b      	ldr	r0, [pc, #620]	; (8000858 <main+0x2a0>)
 80005ea:	f003 fd51 	bl	8004090 <puts>
  printf("0.0.3 Labview Communication Test Checked Data Parsing Test \r\n");
 80005ee:	489b      	ldr	r0, [pc, #620]	; (800085c <main+0x2a4>)
 80005f0:	f003 fd4e 	bl	8004090 <puts>
  printf("0.0.4 Git Test  \r\n");
 80005f4:	489a      	ldr	r0, [pc, #616]	; (8000860 <main+0x2a8>)
 80005f6:	f003 fd4b 	bl	8004090 <puts>
  printf("0.0.5 Labview Communication Test Labview Parsing Test \r\n");
 80005fa:	489a      	ldr	r0, [pc, #616]	; (8000864 <main+0x2ac>)
 80005fc:	f003 fd48 	bl	8004090 <puts>
  printf("0.0.6 Labview Communication Test ARM Parsing Test \r\n");
 8000600:	4899      	ldr	r0, [pc, #612]	; (8000868 <main+0x2b0>)
 8000602:	f003 fd45 	bl	8004090 <puts>
  printf("0.0.7 ARM Protocol Ver 0.1 \r\n");
 8000606:	4899      	ldr	r0, [pc, #612]	; (800086c <main+0x2b4>)
 8000608:	f003 fd42 	bl	8004090 <puts>
  printf("0.0.8 Command Added \r\n");
 800060c:	4898      	ldr	r0, [pc, #608]	; (8000870 <main+0x2b8>)
 800060e:	f003 fd3f 	bl	8004090 <puts>
  printf("0.0.9 Function Added \r\n");
 8000612:	4898      	ldr	r0, [pc, #608]	; (8000874 <main+0x2bc>)
 8000614:	f003 fd3c 	bl	8004090 <puts>
  /*GPIO Reset Fuction 추가*/
  printf("0.1.0 Protocal Ver 0.1");
 8000618:	4897      	ldr	r0, [pc, #604]	; (8000878 <main+0x2c0>)
 800061a:	f003 fc9d 	bl	8003f58 <iprintf>

  printf("----------------------------------------------------------------- \r\n");
 800061e:	4897      	ldr	r0, [pc, #604]	; (800087c <main+0x2c4>)
 8000620:	f003 fd36 	bl	8004090 <puts>
  HAL_GPIO_WritePin(GPIOE, 0x02, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	4895      	ldr	r0, [pc, #596]	; (8000880 <main+0x2c8>)
 800062a:	f001 fa45 	bl	8001ab8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(5);
 800062e:	2005      	movs	r0, #5
 8000630:	f000 fece 	bl	80013d0 <HAL_Delay>
    printf("System Count : %d end\r\n", cnt++);
 8000634:	4b93      	ldr	r3, [pc, #588]	; (8000884 <main+0x2cc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	4992      	ldr	r1, [pc, #584]	; (8000884 <main+0x2cc>)
 800063c:	600a      	str	r2, [r1, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	4891      	ldr	r0, [pc, #580]	; (8000888 <main+0x2d0>)
 8000642:	f003 fc89 	bl	8003f58 <iprintf>
    //주기적으로 신호를 보냄으로서 정상 동작 한다는 것을 알림

    // UART 신호 수신
    rcvStat = HAL_UART_Receive(&huart3, UART_RX_data, data_length, 10);
 8000646:	230a      	movs	r3, #10
 8000648:	2264      	movs	r2, #100	; 0x64
 800064a:	4990      	ldr	r1, [pc, #576]	; (800088c <main+0x2d4>)
 800064c:	4890      	ldr	r0, [pc, #576]	; (8000890 <main+0x2d8>)
 800064e:	f002 f983 	bl	8002958 <HAL_UART_Receive>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b8f      	ldr	r3, [pc, #572]	; (8000894 <main+0x2dc>)
 8000658:	701a      	strb	r2, [r3, #0]

    //받은 데이터 중에 시작 문자와 끝 문자가 있는지 판별
    for (int n = 0; n < data_length; n++)
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	e016      	b.n	800068e <main+0xd6>
    {
      if (UART_RX_data[n] == '+')
 8000660:	4a8a      	ldr	r2, [pc, #552]	; (800088c <main+0x2d4>)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b2b      	cmp	r3, #43	; 0x2b
 800066a:	d10d      	bne.n	8000688 <main+0xd0>
      {
        // printf("Find Start %d \r\n", n);
        if ((UART_RX_data[n + 7]) == '#')
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3307      	adds	r3, #7
 8000670:	4a86      	ldr	r2, [pc, #536]	; (800088c <main+0x2d4>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	2b23      	cmp	r3, #35	; 0x23
 8000676:	d107      	bne.n	8000688 <main+0xd0>
        {
          start_char_flag = 1;
 8000678:	4b87      	ldr	r3, [pc, #540]	; (8000898 <main+0x2e0>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
          // printf("Find end");
          // +1TAR13# 에서 + 다음에 오는 문자가 1인지 2인지 판별해야함
          uart_cnt = n;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b86      	ldr	r3, [pc, #536]	; (800089c <main+0x2e4>)
 8000684:	701a      	strb	r2, [r3, #0]
          break;
 8000686:	e005      	b.n	8000694 <main+0xdc>
    for (int n = 0; n < data_length; n++)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b63      	cmp	r3, #99	; 0x63
 8000692:	dde5      	ble.n	8000660 <main+0xa8>
        }
      }
    }
    //만약 시작 문자와 끝문자 그리고 클러스터 지정 문자가 검출되면 start_char_flag = 1
    if (start_char_flag == 1)
 8000694:	4b80      	ldr	r3, [pc, #512]	; (8000898 <main+0x2e0>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d1c8      	bne.n	800062e <main+0x76>
    {
      start_char_flag = 0;
 800069c:	4b7e      	ldr	r3, [pc, #504]	; (8000898 <main+0x2e0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
      for (int m = 0; m < 8; m++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	e00e      	b.n	80006c6 <main+0x10e>
      {
        // printf("%c", UART_RX_data[uart_cnt + m]);
        //데이터를 UART_RX_temp에 옮겨 담는다.
        UART_RX_temp[m] = UART_RX_data[uart_cnt + m];
 80006a8:	4b7c      	ldr	r3, [pc, #496]	; (800089c <main+0x2e4>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a76      	ldr	r2, [pc, #472]	; (800088c <main+0x2d4>)
 80006b4:	5cd1      	ldrb	r1, [r2, r3]
 80006b6:	4a7a      	ldr	r2, [pc, #488]	; (80008a0 <main+0x2e8>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4413      	add	r3, r2
 80006bc:	460a      	mov	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
      for (int m = 0; m < 8; m++)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2b07      	cmp	r3, #7
 80006ca:	dded      	ble.n	80006a8 <main+0xf0>
      }
      //이전에 받은 데이터와 비교해서 달라졌으면 실행, 달라지지 않았으면 그대로 간다
      //아랫 부분이 명령어를 받고 실행하는 부분이다
      for (int n = 0; n < 8; n++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	e138      	b.n	8000944 <main+0x38c>
      {
        if (UART_RX_data_word[n] != UART_RX_temp[n])
 80006d2:	4a74      	ldr	r2, [pc, #464]	; (80008a4 <main+0x2ec>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	4971      	ldr	r1, [pc, #452]	; (80008a0 <main+0x2e8>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	440b      	add	r3, r1
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	f000 812b 	beq.w	800093e <main+0x386>
        {
          // printf("Test MI \r\n");
          // HAL_GPIO_WritePin(GPIOE, 0x02, GPIO_PIN_SET);
          HAL_GPIO_TogglePin(GPIOE, 0xFF);
 80006e8:	21ff      	movs	r1, #255	; 0xff
 80006ea:	4865      	ldr	r0, [pc, #404]	; (8000880 <main+0x2c8>)
 80006ec:	f001 f9fd 	bl	8001aea <HAL_GPIO_TogglePin>
          // T 다음에 오는 숫자는?
          if (UART_RX_temp[3] > '9')
 80006f0:	4b6b      	ldr	r3, [pc, #428]	; (80008a0 <main+0x2e8>)
 80006f2:	78db      	ldrb	r3, [r3, #3]
 80006f4:	2b39      	cmp	r3, #57	; 0x39
 80006f6:	d906      	bls.n	8000706 <main+0x14e>
          {
            TX_SEL = (UART_RX_temp[3] - 55);
 80006f8:	4b69      	ldr	r3, [pc, #420]	; (80008a0 <main+0x2e8>)
 80006fa:	78db      	ldrb	r3, [r3, #3]
 80006fc:	3b37      	subs	r3, #55	; 0x37
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <main+0x2f0>)
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e005      	b.n	8000712 <main+0x15a>
          }
          else
          {
            TX_SEL = (UART_RX_temp[3] - 48);
 8000706:	4b66      	ldr	r3, [pc, #408]	; (80008a0 <main+0x2e8>)
 8000708:	78db      	ldrb	r3, [r3, #3]
 800070a:	3b30      	subs	r3, #48	; 0x30
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <main+0x2f0>)
 8000710:	701a      	strb	r2, [r3, #0]
          }
          printf("Tx Code : %d \r\n", TX_SEL);
 8000712:	4b65      	ldr	r3, [pc, #404]	; (80008a8 <main+0x2f0>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	4864      	ldr	r0, [pc, #400]	; (80008ac <main+0x2f4>)
 800071a:	f003 fc1d 	bl	8003f58 <iprintf>
          // R 다음에 오는 출력 신호는 ?
          if (UART_RX_temp[5] > '9')
 800071e:	4b60      	ldr	r3, [pc, #384]	; (80008a0 <main+0x2e8>)
 8000720:	795b      	ldrb	r3, [r3, #5]
 8000722:	2b39      	cmp	r3, #57	; 0x39
 8000724:	d906      	bls.n	8000734 <main+0x17c>
          {
            RX_ADDR = (UART_RX_temp[5] - 55);
 8000726:	4b5e      	ldr	r3, [pc, #376]	; (80008a0 <main+0x2e8>)
 8000728:	795b      	ldrb	r3, [r3, #5]
 800072a:	3b37      	subs	r3, #55	; 0x37
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <main+0x2f8>)
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e005      	b.n	8000740 <main+0x188>
          }
          else
          {
            RX_ADDR = (UART_RX_temp[5] - 48);
 8000734:	4b5a      	ldr	r3, [pc, #360]	; (80008a0 <main+0x2e8>)
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	3b30      	subs	r3, #48	; 0x30
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b5c      	ldr	r3, [pc, #368]	; (80008b0 <main+0x2f8>)
 800073e:	701a      	strb	r2, [r3, #0]
          }
          printf("Rx ADDR : %d \r\n", RX_ADDR);
 8000740:	4b5b      	ldr	r3, [pc, #364]	; (80008b0 <main+0x2f8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	485b      	ldr	r0, [pc, #364]	; (80008b4 <main+0x2fc>)
 8000748:	f003 fc06 	bl	8003f58 <iprintf>
          //그 다음에 오는 Rx MUX Sel 신호는 ?
          if (UART_RX_temp[6] > '9')
 800074c:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <main+0x2e8>)
 800074e:	799b      	ldrb	r3, [r3, #6]
 8000750:	2b39      	cmp	r3, #57	; 0x39
 8000752:	d906      	bls.n	8000762 <main+0x1aa>
          {
            RX_SEL = (UART_RX_temp[6] - 55);
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <main+0x2e8>)
 8000756:	799b      	ldrb	r3, [r3, #6]
 8000758:	3b37      	subs	r3, #55	; 0x37
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b56      	ldr	r3, [pc, #344]	; (80008b8 <main+0x300>)
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	e005      	b.n	800076e <main+0x1b6>
          }
          else
          {
            RX_SEL = (UART_RX_temp[6] - 48);
 8000762:	4b4f      	ldr	r3, [pc, #316]	; (80008a0 <main+0x2e8>)
 8000764:	799b      	ldrb	r3, [r3, #6]
 8000766:	3b30      	subs	r3, #48	; 0x30
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <main+0x300>)
 800076c:	701a      	strb	r2, [r3, #0]
          }
          printf("Rx SEL : %d \r\n", RX_SEL);
 800076e:	4b52      	ldr	r3, [pc, #328]	; (80008b8 <main+0x300>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	4851      	ldr	r0, [pc, #324]	; (80008bc <main+0x304>)
 8000776:	f003 fbef 	bl	8003f58 <iprintf>
          ///////////////////////////////
          GPIO_Reset();
 800077a:	f000 fb53 	bl	8000e24 <GPIO_Reset>
          HAL_Delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f000 fe26 	bl	80013d0 <HAL_Delay>
          if (TX_SEL > 32)
 8000784:	4b48      	ldr	r3, [pc, #288]	; (80008a8 <main+0x2f0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b20      	cmp	r3, #32
 800078a:	d903      	bls.n	8000794 <main+0x1dc>
          {
            printf("error : TX_SEL Out Of Range \r\n");
 800078c:	484c      	ldr	r0, [pc, #304]	; (80008c0 <main+0x308>)
 800078e:	f003 fc7f 	bl	8004090 <puts>
 8000792:	e03f      	b.n	8000814 <main+0x25c>
          }
          else if (TX_SEL == 32)
 8000794:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <main+0x2f0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b20      	cmp	r3, #32
 800079a:	d03b      	beq.n	8000814 <main+0x25c>
          {
            //아무것도 하지 않음.
          }
          else if ((TX_SEL >= 16) && (TX_SEL < 32))
 800079c:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <main+0x2f0>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d910      	bls.n	80007c6 <main+0x20e>
 80007a4:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <main+0x2f0>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d80c      	bhi.n	80007c6 <main+0x20e>
          {
            HAL_GPIO_WritePin(GPIOF, 1 << (TX_SEL - 16), GPIO_PIN_SET);
 80007ac:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <main+0x2f0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3b10      	subs	r3, #16
 80007b2:	2201      	movs	r2, #1
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	2201      	movs	r2, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	4841      	ldr	r0, [pc, #260]	; (80008c4 <main+0x30c>)
 80007c0:	f001 f97a 	bl	8001ab8 <HAL_GPIO_WritePin>
 80007c4:	e026      	b.n	8000814 <main+0x25c>
          }
          else if (TX_SEL > 0)
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <main+0x2f0>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00b      	beq.n	80007e6 <main+0x22e>
          {

            HAL_GPIO_WritePin(GPIOE, 1 << TX_SEL, GPIO_PIN_SET);
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <main+0x2f0>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	2301      	movs	r3, #1
 80007d6:	4093      	lsls	r3, r2
 80007d8:	b29b      	uxth	r3, r3
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	4828      	ldr	r0, [pc, #160]	; (8000880 <main+0x2c8>)
 80007e0:	f001 f96a 	bl	8001ab8 <HAL_GPIO_WritePin>
 80007e4:	e016      	b.n	8000814 <main+0x25c>
          }
          else if (TX_SEL == 0)
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <main+0x2f0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10f      	bne.n	800080e <main+0x256>
          {
            printf("%d^%d= %d \r\n", 2, 2, 1 << TX_SEL);
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <main+0x2f0>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	2301      	movs	r3, #1
 80007f6:	4093      	lsls	r3, r2
 80007f8:	2202      	movs	r2, #2
 80007fa:	2102      	movs	r1, #2
 80007fc:	4832      	ldr	r0, [pc, #200]	; (80008c8 <main+0x310>)
 80007fe:	f003 fbab 	bl	8003f58 <iprintf>
            HAL_GPIO_WritePin(GPIOE, 0x01, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2101      	movs	r1, #1
 8000806:	481e      	ldr	r0, [pc, #120]	; (8000880 <main+0x2c8>)
 8000808:	f001 f956 	bl	8001ab8 <HAL_GPIO_WritePin>
 800080c:	e002      	b.n	8000814 <main+0x25c>
          }
          else
          {
            printf("error : TX_SEL Out Of Range \r\n");
 800080e:	482c      	ldr	r0, [pc, #176]	; (80008c0 <main+0x308>)
 8000810:	f003 fc3e 	bl	8004090 <puts>
          }

          // RX_ADDR 세팅

          if (RX_ADDR > 16)
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <main+0x2f8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b10      	cmp	r3, #16
 800081a:	d903      	bls.n	8000824 <main+0x26c>
          {
            printf("error : RX_ADDR Out Of Range \r\n");
 800081c:	482b      	ldr	r0, [pc, #172]	; (80008cc <main+0x314>)
 800081e:	f003 fc37 	bl	8004090 <puts>
 8000822:	e064      	b.n	80008ee <main+0x336>
          }
          else if (RX_ADDR == 16)
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <main+0x2f8>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b10      	cmp	r3, #16
 800082a:	d060      	beq.n	80008ee <main+0x336>
          {
          }
          else if (RX_ADDR > 0)
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <main+0x2f8>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d04f      	beq.n	80008d4 <main+0x31c>
          {
            HAL_GPIO_WritePin(GPIOC, 1 << RX_ADDR, GPIO_PIN_SET);
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <main+0x2f8>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	2301      	movs	r3, #1
 800083c:	4093      	lsls	r3, r2
 800083e:	b29b      	uxth	r3, r3
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	4822      	ldr	r0, [pc, #136]	; (80008d0 <main+0x318>)
 8000846:	f001 f937 	bl	8001ab8 <HAL_GPIO_WritePin>
 800084a:	e050      	b.n	80008ee <main+0x336>
 800084c:	08005034 	.word	0x08005034
 8000850:	0800507c 	.word	0x0800507c
 8000854:	080050b4 	.word	0x080050b4
 8000858:	080050ec 	.word	0x080050ec
 800085c:	08005124 	.word	0x08005124
 8000860:	08005164 	.word	0x08005164
 8000864:	08005178 	.word	0x08005178
 8000868:	080051b0 	.word	0x080051b0
 800086c:	080051e4 	.word	0x080051e4
 8000870:	08005204 	.word	0x08005204
 8000874:	0800521c 	.word	0x0800521c
 8000878:	08005234 	.word	0x08005234
 800087c:	0800524c 	.word	0x0800524c
 8000880:	40021000 	.word	0x40021000
 8000884:	200006ac 	.word	0x200006ac
 8000888:	08005290 	.word	0x08005290
 800088c:	20000634 	.word	0x20000634
 8000890:	200000e4 	.word	0x200000e4
 8000894:	200006b4 	.word	0x200006b4
 8000898:	200006b0 	.word	0x200006b0
 800089c:	200006a9 	.word	0x200006a9
 80008a0:	200006a0 	.word	0x200006a0
 80008a4:	20000698 	.word	0x20000698
 80008a8:	200006b1 	.word	0x200006b1
 80008ac:	080052a8 	.word	0x080052a8
 80008b0:	200006b2 	.word	0x200006b2
 80008b4:	080052b8 	.word	0x080052b8
 80008b8:	200006b3 	.word	0x200006b3
 80008bc:	080052c8 	.word	0x080052c8
 80008c0:	080052d8 	.word	0x080052d8
 80008c4:	40021400 	.word	0x40021400
 80008c8:	080052f8 	.word	0x080052f8
 80008cc:	08005308 	.word	0x08005308
 80008d0:	40020800 	.word	0x40020800
          }
          else if (RX_ADDR == 0)
 80008d4:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <main+0x3dc>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d105      	bne.n	80008e8 <main+0x330>
          {
            HAL_GPIO_WritePin(GPIOC, 0x01, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	482d      	ldr	r0, [pc, #180]	; (8000998 <main+0x3e0>)
 80008e2:	f001 f8e9 	bl	8001ab8 <HAL_GPIO_WritePin>
 80008e6:	e002      	b.n	80008ee <main+0x336>
          }
          else
          {
            printf("error : RX_ADDR Out Of Range \r\n");
 80008e8:	482c      	ldr	r0, [pc, #176]	; (800099c <main+0x3e4>)
 80008ea:	f003 fbd1 	bl	8004090 <puts>
          }
          // RX_MUX 세팅
          if (RX_SEL == 0)
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <main+0x3e8>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d105      	bne.n	8000902 <main+0x34a>
          {
            HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2101      	movs	r1, #1
 80008fa:	482a      	ldr	r0, [pc, #168]	; (80009a4 <main+0x3ec>)
 80008fc:	f001 f8dc 	bl	8001ab8 <HAL_GPIO_WritePin>
 8000900:	e016      	b.n	8000930 <main+0x378>
          }
          else if (RX_SEL == 1)
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <main+0x3e8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d105      	bne.n	8000916 <main+0x35e>
          {
            HAL_GPIO_WritePin(GPIOA, RX_EN_1_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2102      	movs	r1, #2
 800090e:	4825      	ldr	r0, [pc, #148]	; (80009a4 <main+0x3ec>)
 8000910:	f001 f8d2 	bl	8001ab8 <HAL_GPIO_WritePin>
 8000914:	e00c      	b.n	8000930 <main+0x378>
          }
          else if (RX_SEL == 2)
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <main+0x3e8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d105      	bne.n	800092a <main+0x372>
          {
            HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin | RX_EN_1_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2103      	movs	r1, #3
 8000922:	4820      	ldr	r0, [pc, #128]	; (80009a4 <main+0x3ec>)
 8000924:	f001 f8c8 	bl	8001ab8 <HAL_GPIO_WritePin>
 8000928:	e002      	b.n	8000930 <main+0x378>
          }
          else
          {
            printf("error : RX_ADDR Out Of Range \r\n");
 800092a:	481c      	ldr	r0, [pc, #112]	; (800099c <main+0x3e4>)
 800092c:	f003 fbb0 	bl	8004090 <puts>
          }

          ///////////////////////////////
          HAL_Delay(5);
 8000930:	2005      	movs	r0, #5
 8000932:	f000 fd4d 	bl	80013d0 <HAL_Delay>
          data_flag = 1;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <main+0x3f0>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
          break;
 800093c:	e006      	b.n	800094c <main+0x394>
      for (int n = 0; n < 8; n++)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3301      	adds	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b07      	cmp	r3, #7
 8000948:	f77f aec3 	ble.w	80006d2 <main+0x11a>
        }
      }

      //비교 기준이 되는 이전 데이터 자리에 현재 데이터를 넣는다
      for (int k = 0; k < 8; k++)
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	e016      	b.n	8000980 <main+0x3c8>
      {
        UART_RX_data_word[k] = UART_RX_temp[k];
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <main+0x3f4>)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	4413      	add	r3, r2
 8000958:	7819      	ldrb	r1, [r3, #0]
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <main+0x3f8>)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	4413      	add	r3, r2
 8000960:	460a      	mov	r2, r1
 8000962:	701a      	strb	r2, [r3, #0]
        if (data_flag == 1)
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <main+0x3f0>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d106      	bne.n	800097a <main+0x3c2>
        {
          printf("%c", UART_RX_data_word[k]);
 800096c:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <main+0x3f8>)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fb07 	bl	8003f88 <putchar>
      for (int k = 0; k < 8; k++)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b07      	cmp	r3, #7
 8000984:	dde5      	ble.n	8000952 <main+0x39a>
        }
      }
      printf("\r\n");
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <main+0x3fc>)
 8000988:	f003 fb82 	bl	8004090 <puts>
      data_flag = 0;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <main+0x3f0>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000992:	e64c      	b.n	800062e <main+0x76>
 8000994:	200006b2 	.word	0x200006b2
 8000998:	40020800 	.word	0x40020800
 800099c:	08005308 	.word	0x08005308
 80009a0:	200006b3 	.word	0x200006b3
 80009a4:	40020000 	.word	0x40020000
 80009a8:	200006a8 	.word	0x200006a8
 80009ac:	200006a0 	.word	0x200006a0
 80009b0:	20000698 	.word	0x20000698
 80009b4:	08005328 	.word	0x08005328

080009b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 fabe 	bl	8003f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <SystemClock_Config+0xcc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a27      	ldr	r2, [pc, #156]	; (8000a84 <SystemClock_Config+0xcc>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <SystemClock_Config+0xd0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <SystemClock_Config+0xd0>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a2c:	23a8      	movs	r3, #168	; 0xa8
 8000a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a34:	2307      	movs	r3, #7
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 f98b 	bl	8001d58 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a48:	f000 fa1c 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a50:	2302      	movs	r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2105      	movs	r1, #5
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fbec 	bl	8002248 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a76:	f000 fa05 	bl	8000e84 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3750      	adds	r7, #80	; 0x50
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <MX_SPI1_Init+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ad8:	220a      	movs	r2, #10
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ade:	f001 fdd3 	bl	8002688 <HAL_SPI_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae8:	f000 f9cc 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	40013000 	.word	0x40013000

08000af8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART3_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART3_UART_Init+0x4c>)
 8000b30:	f001 fe33 	bl	800279a <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f9a3 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000e4 	.word	0x200000e4
 8000b48:	40004800 	.word	0x40004800

08000b4c <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	f000 ffc5 	bl	8001b1e <HAL_PCD_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b9a:	f000 f973 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000128 	.word	0x20000128

08000ba8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	4b8b      	ldr	r3, [pc, #556]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a8a      	ldr	r2, [pc, #552]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b88      	ldr	r3, [pc, #544]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	623b      	str	r3, [r7, #32]
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	4b84      	ldr	r3, [pc, #528]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a83      	ldr	r2, [pc, #524]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b81      	ldr	r3, [pc, #516]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b7d      	ldr	r3, [pc, #500]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a7c      	ldr	r2, [pc, #496]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b7a      	ldr	r3, [pc, #488]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b76      	ldr	r3, [pc, #472]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a75      	ldr	r2, [pc, #468]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b73      	ldr	r3, [pc, #460]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b6f      	ldr	r3, [pc, #444]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a6e      	ldr	r2, [pc, #440]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b6c      	ldr	r3, [pc, #432]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b68      	ldr	r3, [pc, #416]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a67      	ldr	r2, [pc, #412]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b65      	ldr	r3, [pc, #404]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b61      	ldr	r3, [pc, #388]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a60      	ldr	r2, [pc, #384]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b5e      	ldr	r3, [pc, #376]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b5a      	ldr	r3, [pc, #360]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a59      	ldr	r2, [pc, #356]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b57      	ldr	r3, [pc, #348]	; (8000df0 <MX_GPIO_Init+0x248>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ca4:	4853      	ldr	r0, [pc, #332]	; (8000df4 <MX_GPIO_Init+0x24c>)
 8000ca6:	f000 ff07 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cb0:	4851      	ldr	r0, [pc, #324]	; (8000df8 <MX_GPIO_Init+0x250>)
 8000cb2:	f000 ff01 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	210f      	movs	r1, #15
 8000cba:	4850      	ldr	r0, [pc, #320]	; (8000dfc <MX_GPIO_Init+0x254>)
 8000cbc:	f000 fefc 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin | RX_EN_1_Pin | GPIO_PIN_2, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2107      	movs	r1, #7
 8000cc4:	484e      	ldr	r0, [pc, #312]	; (8000e00 <MX_GPIO_Init+0x258>)
 8000cc6:	f000 fef7 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_10 | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f644 4181 	movw	r1, #19585	; 0x4c81
 8000cd0:	484c      	ldr	r0, [pc, #304]	; (8000e04 <MX_GPIO_Init+0x25c>)
 8000cd2:	f000 fef1 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CSA_Pin | CSB_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2143      	movs	r1, #67	; 0x43
 8000cda:	484b      	ldr	r0, [pc, #300]	; (8000e08 <MX_GPIO_Init+0x260>)
 8000cdc:	f000 feec 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR_0_Pin | WR_1_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	4849      	ldr	r0, [pc, #292]	; (8000e0c <MX_GPIO_Init+0x264>)
 8000ce6:	f000 fee7 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_MUX_SEL_2_Pin TX_MUX_SEL_3_Pin TX_MUX_SEL_4_Pin TX_MUX_SEL_5_Pin
                           TX_MUX_SEL_6_Pin TX_MUX_SEL_7_Pin TX_MUX_SEL_8_Pin TX_MUX_SEL_9_Pin
                           TX_MUX_SEL_10_Pin TX_MUX_SEL_11_Pin TX_MUX_SEL_12_Pin TX_MUX_SEL_13_Pin
                           TX_MUX_SEL_14_Pin TX_MUX_SEL_15_Pin TX_MUX_SEL_0_Pin TX_MUX_SEL_1_Pin */
  GPIO_InitStruct.Pin = TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin;
 8000cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	483c      	ldr	r0, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x24c>)
 8000d04:	f000 fd2c 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4837      	ldr	r0, [pc, #220]	; (8000dfc <MX_GPIO_Init+0x254>)
 8000d20:	f000 fd1e 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_MUX_SEL_16_Pin TX_MUX_SEL_17_Pin TX_MUX_SEL_18_Pin TX_MUX_SEL_19_Pin
                           TX_MUX_SEL_20_Pin TX_MUX_SEL_21_Pin TX_MUX_SEL_22_Pin TX_MUX_SEL_23_Pin
                           TX_MUX_SEL_24_Pin TX_MUX_SEL_25_Pin TX_MUX_SEL_26_Pin TX_MUX_SEL_27_Pin
                           TX_MUX_SEL_28_Pin TX_MUX_SEL_29_Pin TX_MUX_SEL_30_Pin TX_MUX_SEL_31_Pin */
  GPIO_InitStruct.Pin = TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin;
 8000d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482e      	ldr	r0, [pc, #184]	; (8000df8 <MX_GPIO_Init+0x250>)
 8000d3e:	f000 fd0f 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_ADDR_0_Pin RX_ADDR_1_Pin RX_ADDR_2_Pin RX_ADDR_3_Pin */
  GPIO_InitStruct.Pin = RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin;
 8000d42:	230f      	movs	r3, #15
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4828      	ldr	r0, [pc, #160]	; (8000dfc <MX_GPIO_Init+0x254>)
 8000d5a:	f000 fd01 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_EN_0_Pin RX_EN_1_Pin PA2 */
  GPIO_InitStruct.Pin = RX_EN_0_Pin | RX_EN_1_Pin | GPIO_PIN_2;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4822      	ldr	r0, [pc, #136]	; (8000e00 <MX_GPIO_Init+0x258>)
 8000d76:	f000 fcf3 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_10 | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8000d7a:	f644 4381 	movw	r3, #19585	; 0x4c81
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	481c      	ldr	r0, [pc, #112]	; (8000e04 <MX_GPIO_Init+0x25c>)
 8000d94:	f000 fce4 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSA_Pin CSB_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = CSA_Pin | CSB_Pin | USB_PowerSwitchOn_Pin;
 8000d98:	2343      	movs	r3, #67	; 0x43
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4816      	ldr	r0, [pc, #88]	; (8000e08 <MX_GPIO_Init+0x260>)
 8000db0:	f000 fcd6 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <MX_GPIO_Init+0x260>)
 8000dc8:	f000 fcca 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : WR_0_Pin WR_1_Pin */
  GPIO_InitStruct.Pin = WR_0_Pin | WR_1_Pin;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <MX_GPIO_Init+0x264>)
 8000de4:	f000 fcbc 	bl	8001760 <HAL_GPIO_Init>
}
 8000de8:	bf00      	nop
 8000dea:	3738      	adds	r7, #56	; 0x38
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40021400 	.word	0x40021400
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40021800 	.word	0x40021800
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    // ?��?��?�� 1개�?? ?��?��?���? ?��?��?��?���? 발생?��?��?��.
    // HAL_UART_Receive_IT(&huart3, &UART_RX_data, 1);
    // HAL_UART_Transmit(&huart3, &UART_RX_data, 1, 1000);
    // uart_flag = 1;
  }
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <GPIO_Reset>:
void GPIO_Reset()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e2e:	480f      	ldr	r0, [pc, #60]	; (8000e6c <GPIO_Reset+0x48>)
 8000e30:	f000 fe42 	bl	8001ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <GPIO_Reset+0x4c>)
 8000e3c:	f000 fe3c 	bl	8001ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	210f      	movs	r1, #15
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <GPIO_Reset+0x50>)
 8000e46:	f000 fe37 	bl	8001ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin | RX_EN_1_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <GPIO_Reset+0x54>)
 8000e50:	f000 fe32 	bl	8001ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CSA_Pin | CSB_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2103      	movs	r1, #3
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <GPIO_Reset+0x58>)
 8000e5a:	f000 fe2d 	bl	8001ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, WR_0_Pin | WR_1_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2103      	movs	r1, #3
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <GPIO_Reset+0x5c>)
 8000e64:	f000 fe28 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40021400 	.word	0x40021400
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40021800 	.word	0x40021800
 8000e80:	40020c00 	.word	0x40020c00

08000e84 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_SPI_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12b      	bne.n	8000f5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23e0      	movs	r3, #224	; 0xe0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f56:	f000 fc03 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40013000 	.word	0x40013000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_UART_MspInit+0x94>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d134      	bne.n	8000ffc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_UART_MspInit+0x98>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <HAL_UART_MspInit+0x98>)
 8000f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_UART_MspInit+0x98>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_UART_MspInit+0x98>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_UART_MspInit+0x98>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_UART_MspInit+0x98>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <HAL_UART_MspInit+0x9c>)
 8000fe8:	f000 fbba 	bl	8001760 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2027      	movs	r0, #39	; 0x27
 8000ff2:	f000 faec 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ff6:	2027      	movs	r0, #39	; 0x27
 8000ff8:	f000 fb05 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40004800 	.word	0x40004800
 8001008:	40023800 	.word	0x40023800
 800100c:	40020c00 	.word	0x40020c00

08001010 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001030:	d13f      	bne.n	80010b2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_PCD_MspInit+0xac>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a20      	ldr	r2, [pc, #128]	; (80010bc <HAL_PCD_MspInit+0xac>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_PCD_MspInit+0xac>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800104e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001060:	230a      	movs	r3, #10
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <HAL_PCD_MspInit+0xb0>)
 800106c:	f000 fb78 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480e      	ldr	r0, [pc, #56]	; (80010c0 <HAL_PCD_MspInit+0xb0>)
 8001086:	f000 fb6b 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_PCD_MspInit+0xac>)
 800108c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_PCD_MspInit+0xac>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6353      	str	r3, [r2, #52]	; 0x34
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_PCD_MspInit+0xac>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_PCD_MspInit+0xac>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_PCD_MspInit+0xac>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 f93e 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART3_IRQHandler+0x10>)
 800111e:	f001 fcbd 	bl	8002a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000e4 	.word	0x200000e4

0800112c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e00a      	b.n	8001154 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113e:	f3af 8000 	nop.w
 8001142:	4601      	mov	r1, r0
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	60ba      	str	r2, [r7, #8]
 800114a:	b2ca      	uxtb	r2, r1
 800114c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbf0      	blt.n	800113e <_read+0x12>
	}

return len;
 800115c:	687b      	ldr	r3, [r7, #4]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e009      	b.n	800118c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fa07 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	dbf1      	blt.n	8001178 <_write+0x12>
	}
	return len;
 8001194:	687b      	ldr	r3, [r7, #4]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_close>:

int _close(int file)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	return -1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c6:	605a      	str	r2, [r3, #4]
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f002 fe5c 	bl	8003ef4 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20030000 	.word	0x20030000
 8001268:	00000400 	.word	0x00000400
 800126c:	200006b8 	.word	0x200006b8
 8001270:	200006d0 	.word	0x200006d0

08001274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129e:	490e      	ldr	r1, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b4:	4c0b      	ldr	r4, [pc, #44]	; (80012e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c2:	f7ff ffd7 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f002 fe1b 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff f975 	bl	80005b8 <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012dc:	080053ec 	.word	0x080053ec
  ldr r2, =_sbss
 80012e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012e4:	200006d0 	.word	0x200006d0

080012e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_Init+0x40>)
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_Init+0x40>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x40>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f94f 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fdb6 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f967 	bl	8001622 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f92f 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200006bc 	.word	0x200006bc

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200006bc 	.word	0x200006bc

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff3e 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff8e 	bl	800150c <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5d 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff31 	bl	800147c <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff feb6 	bl	80013b8 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d008      	beq.n	800166c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e052      	b.n	8001712 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0216 	bic.w	r2, r2, #22
 800167a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800168a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <HAL_DMA_Abort+0x62>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0208 	bic.w	r2, r2, #8
 80016aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016bc:	e013      	b.n	80016e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016be:	f7ff fe7b 	bl	80013b8 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d90c      	bls.n	80016e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2203      	movs	r2, #3
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e015      	b.n	8001712 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e4      	bne.n	80016be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	223f      	movs	r2, #63	; 0x3f
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d004      	beq.n	8001738 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e00c      	b.n	8001752 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2205      	movs	r2, #5
 800173c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e177      	b.n	8001a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8166 	bne.w	8001a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80c0 	beq.w	8001a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a65      	ldr	r2, [pc, #404]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a61      	ldr	r2, [pc, #388]	; (8001a88 <HAL_GPIO_Init+0x328>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d037      	beq.n	800199e <HAL_GPIO_Init+0x23e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_GPIO_Init+0x330>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d031      	beq.n	800199a <HAL_GPIO_Init+0x23a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <HAL_GPIO_Init+0x334>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02b      	beq.n	8001996 <HAL_GPIO_Init+0x236>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_GPIO_Init+0x338>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x232>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <HAL_GPIO_Init+0x33c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x22e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a53      	ldr	r2, [pc, #332]	; (8001aa0 <HAL_GPIO_Init+0x340>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x22a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_GPIO_Init+0x344>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <HAL_GPIO_Init+0x348>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a50      	ldr	r2, [pc, #320]	; (8001aac <HAL_GPIO_Init+0x34c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x21a>
 8001976:	2309      	movs	r3, #9
 8001978:	e012      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197a:	230a      	movs	r3, #10
 800197c:	e010      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197e:	2308      	movs	r3, #8
 8001980:	e00e      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001982:	2307      	movs	r3, #7
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x328>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a34      	ldr	r2, [pc, #208]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae84 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022400 	.word	0x40022400
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b20:	b08f      	sub	sp, #60	; 0x3c
 8001b22:	af0a      	add	r7, sp, #40	; 0x28
 8001b24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e10f      	b.n	8001d50 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fa60 	bl	8001010 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 ff1f 	bl	80039b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	687e      	ldr	r6, [r7, #4]
 8001b7c:	466d      	mov	r5, sp
 8001b7e:	f106 0410 	add.w	r4, r6, #16
 8001b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b92:	1d33      	adds	r3, r6, #4
 8001b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	f001 feaa 	bl	80038f0 <USB_CoreInit>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0d0      	b.n	8001d50 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 ff0d 	bl	80039d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e04a      	b.n	8001c56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	333d      	adds	r3, #61	; 0x3d
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	333c      	adds	r3, #60	; 0x3c
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	b298      	uxth	r0, r3
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3344      	adds	r3, #68	; 0x44
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3340      	adds	r3, #64	; 0x40
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	3348      	adds	r3, #72	; 0x48
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	334c      	adds	r3, #76	; 0x4c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3354      	adds	r3, #84	; 0x54
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	3301      	adds	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3af      	bcc.n	8001bc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e044      	b.n	8001cf0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3301      	adds	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d3b5      	bcc.n	8001c66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	687e      	ldr	r6, [r7, #4]
 8001d02:	466d      	mov	r5, sp
 8001d04:	f106 0410 	add.w	r4, r6, #16
 8001d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d18:	1d33      	adds	r3, r6, #4
 8001d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f001 fea5 	bl	8003a6c <USB_DevInit>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e00d      	b.n	8001d50 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 f870 	bl	8003e2e <USB_DevDisconnect>

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e267      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x108>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d157      	bne.n	8001e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e242      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x74>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6f      	ldr	r2, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6c      	ldr	r2, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a68      	ldr	r2, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fad2 	bl	80013b8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff face 	bl	80013b8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e207      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fabe 	bl	80013b8 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff faba 	bl	80013b8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1f3      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xe8>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c7      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fa73 	bl	80013b8 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fa6f 	bl	80013b8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a8      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4925      	ldr	r1, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fa52 	bl	80013b8 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fa4e 	bl	80013b8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e187      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa32 	bl	80013b8 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fa2e 	bl	80013b8 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e167      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x200>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fa1b 	bl	80013b8 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff fa17 	bl	80013b8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e150      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ea      	bne.n	8001f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8097 	beq.w	80020ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b7d      	ldr	r3, [pc, #500]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a7c      	ldr	r2, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b77      	ldr	r3, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b74      	ldr	r3, [pc, #464]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a73      	ldr	r2, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff f9d7 	bl	80013b8 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff f9d3 	bl	80013b8 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e10c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ea>
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x30c>
 800204a:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a5e      	ldr	r2, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002064:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a54      	ldr	r2, [pc, #336]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff f998 	bl	80013b8 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff f994 	bl	80013b8 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0cb      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ee      	beq.n	800208c <HAL_RCC_OscConfig+0x334>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff f982 	bl	80013b8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff f97e 	bl	80013b8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0b5      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a1 	beq.w	8002238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d05c      	beq.n	80021bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d141      	bne.n	800218e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff f952 	bl	80013b8 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f94e 	bl	80013b8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e087      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff f927 	bl	80013b8 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff f923 	bl	80013b8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e05c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x416>
 800218c:	e054      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff f910 	bl	80013b8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f90c 	bl	80013b8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e045      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
 80021ba:	e03d      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e038      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4ec>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d028      	beq.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cc      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b68      	ldr	r3, [pc, #416]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d90c      	bls.n	8002284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d044      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	2b03      	cmp	r3, #3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4934      	ldr	r1, [pc, #208]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff f83e 	bl	80013b8 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f83a 	bl	80013b8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe ff9e 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	0800532c 	.word	0x0800532c
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b094      	sub	sp, #80	; 0x50
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	647b      	str	r3, [r7, #68]	; 0x44
 8002420:	2300      	movs	r3, #0
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002424:	2300      	movs	r3, #0
 8002426:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b79      	ldr	r3, [pc, #484]	; (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80e1 	bhi.w	8002600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e0db      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b73      	ldr	r3, [pc, #460]	; (8002618 <HAL_RCC_GetSysClockFreq+0x204>)
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800244c:	e0db      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <HAL_RCC_GetSysClockFreq+0x208>)
 8002450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002452:	e0d8      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b6f      	ldr	r3, [pc, #444]	; (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
 8002474:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
 8002482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002486:	4622      	mov	r2, r4
 8002488:	462b      	mov	r3, r5
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002498:	0150      	lsls	r0, r2, #5
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4621      	mov	r1, r4
 80024a0:	1a51      	subs	r1, r2, r1
 80024a2:	6139      	str	r1, [r7, #16]
 80024a4:	4629      	mov	r1, r5
 80024a6:	eb63 0301 	sbc.w	r3, r3, r1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b8:	4659      	mov	r1, fp
 80024ba:	018b      	lsls	r3, r1, #6
 80024bc:	4651      	mov	r1, sl
 80024be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c2:	4651      	mov	r1, sl
 80024c4:	018a      	lsls	r2, r1, #6
 80024c6:	4651      	mov	r1, sl
 80024c8:	ebb2 0801 	subs.w	r8, r2, r1
 80024cc:	4659      	mov	r1, fp
 80024ce:	eb63 0901 	sbc.w	r9, r3, r1
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e6:	4690      	mov	r8, r2
 80024e8:	4699      	mov	r9, r3
 80024ea:	4623      	mov	r3, r4
 80024ec:	eb18 0303 	adds.w	r3, r8, r3
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	462b      	mov	r3, r5
 80024f4:	eb49 0303 	adc.w	r3, r9, r3
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002506:	4629      	mov	r1, r5
 8002508:	024b      	lsls	r3, r1, #9
 800250a:	4621      	mov	r1, r4
 800250c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002510:	4621      	mov	r1, r4
 8002512:	024a      	lsls	r2, r1, #9
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251a:	2200      	movs	r2, #0
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
 800251e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002524:	f7fd feb4 	bl	8000290 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002530:	e058      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	2200      	movs	r2, #0
 800253a:	4618      	mov	r0, r3
 800253c:	4611      	mov	r1, r2
 800253e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800254c:	4642      	mov	r2, r8
 800254e:	464b      	mov	r3, r9
 8002550:	f04f 0000 	mov.w	r0, #0
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	0159      	lsls	r1, r3, #5
 800255a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255e:	0150      	lsls	r0, r2, #5
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4641      	mov	r1, r8
 8002566:	ebb2 0a01 	subs.w	sl, r2, r1
 800256a:	4649      	mov	r1, r9
 800256c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800257c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002584:	ebb2 040a 	subs.w	r4, r2, sl
 8002588:	eb63 050b 	sbc.w	r5, r3, fp
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	00eb      	lsls	r3, r5, #3
 8002596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800259a:	00e2      	lsls	r2, r4, #3
 800259c:	4614      	mov	r4, r2
 800259e:	461d      	mov	r5, r3
 80025a0:	4643      	mov	r3, r8
 80025a2:	18e3      	adds	r3, r4, r3
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	464b      	mov	r3, r9
 80025a8:	eb45 0303 	adc.w	r3, r5, r3
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ba:	4629      	mov	r1, r5
 80025bc:	028b      	lsls	r3, r1, #10
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c4:	4621      	mov	r1, r4
 80025c6:	028a      	lsls	r2, r1, #10
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	61fa      	str	r2, [r7, #28]
 80025d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d8:	f7fd fe5a 	bl	8000290 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	3301      	adds	r3, #1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025fe:	e002      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_RCC_GetSysClockFreq+0x204>)
 8002602:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002608:	4618      	mov	r0, r3
 800260a:	3750      	adds	r7, #80	; 0x50
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400
 800261c:	007a1200 	.word	0x007a1200

08002620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_GetHCLKFreq+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000000 	.word	0x20000000

08002638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800263c:	f7ff fff0 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	; (800265c <HAL_RCC_GetPCLK1Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	0800533c 	.word	0x0800533c

08002660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002664:	f7ff ffdc 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0b5b      	lsrs	r3, r3, #13
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	0800533c 	.word	0x0800533c

08002688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07b      	b.n	8002792 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026aa:	d009      	beq.n	80026c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
 80026b2:	e005      	b.n	80026c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fc00 	bl	8000ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0104 	and.w	r1, r3, #4
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	f003 0210 	and.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e03f      	b.n	800282c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe fbd5 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2224      	movs	r2, #36	; 0x24
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fe12 	bl	8003408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002802:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b20      	cmp	r3, #32
 8002852:	d17c      	bne.n	800294e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_UART_Transmit+0x2c>
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e075      	b.n	8002950 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_UART_Transmit+0x3e>
 800286e:	2302      	movs	r3, #2
 8002870:	e06e      	b.n	8002950 <HAL_UART_Transmit+0x11c>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2221      	movs	r2, #33	; 0x21
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002888:	f7fe fd96 	bl	80013b8 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a2:	d108      	bne.n	80028b6 <HAL_UART_Transmit+0x82>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	e003      	b.n	80028be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028c6:	e02a      	b.n	800291e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2200      	movs	r2, #0
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fb90 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e036      	b.n	8002950 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	3302      	adds	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e007      	b.n	8002910 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3301      	adds	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1cf      	bne.n	80028c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2200      	movs	r2, #0
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fb60 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e006      	b.n	8002950 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800294e:	2302      	movs	r3, #2
  }
}
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b20      	cmp	r3, #32
 8002976:	f040 808c 	bne.w	8002a92 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_UART_Receive+0x2e>
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e084      	b.n	8002a94 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_UART_Receive+0x40>
 8002994:	2302      	movs	r3, #2
 8002996:	e07d      	b.n	8002a94 <HAL_UART_Receive+0x13c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2222      	movs	r2, #34	; 0x22
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fd00 	bl	80013b8 <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ce:	d108      	bne.n	80029e2 <HAL_UART_Receive+0x8a>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	e003      	b.n	80029ea <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80029f2:	e043      	b.n	8002a7c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2200      	movs	r2, #0
 80029fc:	2120      	movs	r1, #32
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fafa 	bl	8002ff8 <UART_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e042      	b.n	8002a94 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10c      	bne.n	8002a2e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	3302      	adds	r3, #2
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	e01f      	b.n	8002a6e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a36:	d007      	beq.n	8002a48 <HAL_UART_Receive+0xf0>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_UART_Receive+0xfe>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e008      	b.n	8002a68 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1b6      	bne.n	80029f4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b0ba      	sub	sp, #232	; 0xe8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10f      	bne.n	8002b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_UART_IRQHandler+0x66>
 8002aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fbc9 	bl	8003292 <UART_Receive_IT>
      return;
 8002b00:	e256      	b.n	8002fb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80de 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x22c>
 8002b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80d1 	beq.w	8002cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_UART_IRQHandler+0xae>
 8002b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_UART_IRQHandler+0xd2>
 8002b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f043 0202 	orr.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_UART_IRQHandler+0xf6>
 8002b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d011      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x126>
 8002b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0208 	orr.w	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 81ed 	beq.w	8002fa6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_UART_IRQHandler+0x14e>
 8002bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fb54 	bl	8003292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b40      	cmp	r3, #64	; 0x40
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <HAL_UART_IRQHandler+0x17a>
 8002c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04f      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fa5c 	bl	80030d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d141      	bne.n	8002cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3314      	adds	r3, #20
 8002c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3314      	adds	r3, #20
 8002c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1d9      	bne.n	8002c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d013      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	4a7d      	ldr	r2, [pc, #500]	; (8002e78 <HAL_UART_IRQHandler+0x3dc>)
 8002c84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fd45 	bl	800171a <HAL_DMA_Abort_IT>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d016      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca4:	e00e      	b.n	8002cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f990 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cac:	e00a      	b.n	8002cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f98c 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	e006      	b.n	8002cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f988 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cc2:	e170      	b.n	8002fa6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	bf00      	nop
    return;
 8002cc6:	e16e      	b.n	8002fa6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	f040 814a 	bne.w	8002f66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8143 	beq.w	8002f66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 813c 	beq.w	8002f66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	f040 80b4 	bne.w	8002e7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8140 	beq.w	8002faa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d32:	429a      	cmp	r2, r3
 8002d34:	f080 8139 	bcs.w	8002faa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4a:	f000 8088 	beq.w	8002e5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1d9      	bne.n	8002d4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3314      	adds	r3, #20
 8002da0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e1      	bne.n	8002d9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3314      	adds	r3, #20
 8002ddc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3314      	adds	r3, #20
 8002df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e3      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2e:	f023 0310 	bic.w	r3, r3, #16
 8002e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e40:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e48:	e841 2300 	strex	r3, r2, [r1]
 8002e4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e3      	bne.n	8002e1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fbee 	bl	800163a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8b6 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e74:	e099      	b.n	8002faa <HAL_UART_IRQHandler+0x50e>
 8002e76:	bf00      	nop
 8002e78:	0800319b 	.word	0x0800319b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 808b 	beq.w	8002fae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8086 	beq.w	8002fae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e3      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002efe:	633a      	str	r2, [r7, #48]	; 0x30
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e3      	bne.n	8002eda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0310 	bic.w	r3, r3, #16
 8002f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f44:	61fa      	str	r2, [r7, #28]
 8002f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f48:	69b9      	ldr	r1, [r7, #24]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	e841 2300 	strex	r3, r2, [r1]
 8002f50:	617b      	str	r3, [r7, #20]
   return(result);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e3      	bne.n	8002f20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f83e 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f64:	e023      	b.n	8002fae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_UART_IRQHandler+0x4ea>
 8002f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f91f 	bl	80031c2 <UART_Transmit_IT>
    return;
 8002f84:	e014      	b.n	8002fb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00e      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x514>
 8002f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f95f 	bl	8003262 <UART_EndTransmit_IT>
    return;
 8002fa4:	e004      	b.n	8002fb0 <HAL_UART_IRQHandler+0x514>
    return;
 8002fa6:	bf00      	nop
 8002fa8:	e002      	b.n	8002fb0 <HAL_UART_IRQHandler+0x514>
      return;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_IRQHandler+0x514>
      return;
 8002fae:	bf00      	nop
  }
}
 8002fb0:	37e8      	adds	r7, #232	; 0xe8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b090      	sub	sp, #64	; 0x40
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003008:	e050      	b.n	80030ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d04c      	beq.n	80030ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <UART_WaitOnFlagUntilTimeout+0x30>
 8003018:	f7fe f9ce 	bl	80013b8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003024:	429a      	cmp	r2, r3
 8003026:	d241      	bcs.n	80030ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003048:	637a      	str	r2, [r7, #52]	; 0x34
 800304a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800304e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e5      	bne.n	8003028 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3314      	adds	r3, #20
 8003062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	e853 3f00 	ldrex	r3, [r3]
 800306a:	613b      	str	r3, [r7, #16]
   return(result);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3314      	adds	r3, #20
 800307a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800307c:	623a      	str	r2, [r7, #32]
 800307e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	69f9      	ldr	r1, [r7, #28]
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	61bb      	str	r3, [r7, #24]
   return(result);
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e5      	bne.n	800305c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e00f      	b.n	80030cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d09f      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3740      	adds	r7, #64	; 0x40
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b095      	sub	sp, #84	; 0x54
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030fc:	643a      	str	r2, [r7, #64]	; 0x40
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e5      	bne.n	80030dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f023 0301 	bic.w	r3, r3, #1
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3314      	adds	r3, #20
 800312e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e5      	bne.n	8003110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	2b01      	cmp	r3, #1
 800314a:	d119      	bne.n	8003180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	60bb      	str	r3, [r7, #8]
   return(result);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0310 	bic.w	r3, r3, #16
 8003162:	647b      	str	r3, [r7, #68]	; 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800316c:	61ba      	str	r2, [r7, #24]
 800316e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6979      	ldr	r1, [r7, #20]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	613b      	str	r3, [r7, #16]
   return(result);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e5      	bne.n	800314c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800318e:	bf00      	nop
 8003190:	3754      	adds	r7, #84	; 0x54
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff ff09 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b21      	cmp	r3, #33	; 0x21
 80031d4:	d13e      	bne.n	8003254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031de:	d114      	bne.n	800320a <UART_Transmit_IT+0x48>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d110      	bne.n	800320a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	621a      	str	r2, [r3, #32]
 8003208:	e008      	b.n	800321c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	1c59      	adds	r1, r3, #1
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6211      	str	r1, [r2, #32]
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4619      	mov	r1, r3
 800322a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800323e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fe98 	bl	8002fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b08c      	sub	sp, #48	; 0x30
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b22      	cmp	r3, #34	; 0x22
 80032a4:	f040 80ab 	bne.w	80033fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d117      	bne.n	80032e2 <UART_Receive_IT+0x50>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d113      	bne.n	80032e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	1c9a      	adds	r2, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
 80032e0:	e026      	b.n	8003330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d007      	beq.n	8003306 <UART_Receive_IT+0x74>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <UART_Receive_IT+0x82>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e008      	b.n	8003326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003320:	b2da      	uxtb	r2, r3
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29b      	uxth	r3, r3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4619      	mov	r1, r3
 800333e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003340:	2b00      	cmp	r3, #0
 8003342:	d15a      	bne.n	80033fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0220 	bic.w	r2, r2, #32
 8003352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	2b01      	cmp	r3, #1
 8003382:	d135      	bne.n	80033f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f023 0310 	bic.w	r3, r3, #16
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	623a      	str	r2, [r7, #32]
 80033ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69f9      	ldr	r1, [r7, #28]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e5      	bne.n	800338a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d10a      	bne.n	80033e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fdf9 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
 80033ee:	e002      	b.n	80033f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fd0d 	bl	8000e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e002      	b.n	8003400 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3730      	adds	r7, #48	; 0x30
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b0c0      	sub	sp, #256	; 0x100
 800340e:	af00      	add	r7, sp, #0
 8003410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	68d9      	ldr	r1, [r3, #12]
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	ea40 0301 	orr.w	r3, r0, r1
 8003430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003460:	f021 010c 	bic.w	r1, r1, #12
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800346e:	430b      	orrs	r3, r1
 8003470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	6999      	ldr	r1, [r3, #24]
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	ea40 0301 	orr.w	r3, r0, r1
 800348e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <UART_SetConfig+0x2cc>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d005      	beq.n	80034a8 <UART_SetConfig+0xa0>
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b8d      	ldr	r3, [pc, #564]	; (80036d8 <UART_SetConfig+0x2d0>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d104      	bne.n	80034b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7ff f8da 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 80034ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034b0:	e003      	b.n	80034ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b2:	f7ff f8c1 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 80034b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c4:	f040 810c 	bne.w	80036e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	1891      	adds	r1, r2, r2
 80034e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034e2:	415b      	adcs	r3, r3
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034ea:	4621      	mov	r1, r4
 80034ec:	eb12 0801 	adds.w	r8, r2, r1
 80034f0:	4629      	mov	r1, r5
 80034f2:	eb43 0901 	adc.w	r9, r3, r1
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350a:	4690      	mov	r8, r2
 800350c:	4699      	mov	r9, r3
 800350e:	4623      	mov	r3, r4
 8003510:	eb18 0303 	adds.w	r3, r8, r3
 8003514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003518:	462b      	mov	r3, r5
 800351a:	eb49 0303 	adc.w	r3, r9, r3
 800351e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800352e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003536:	460b      	mov	r3, r1
 8003538:	18db      	adds	r3, r3, r3
 800353a:	653b      	str	r3, [r7, #80]	; 0x50
 800353c:	4613      	mov	r3, r2
 800353e:	eb42 0303 	adc.w	r3, r2, r3
 8003542:	657b      	str	r3, [r7, #84]	; 0x54
 8003544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800354c:	f7fc fea0 	bl	8000290 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4b61      	ldr	r3, [pc, #388]	; (80036dc <UART_SetConfig+0x2d4>)
 8003556:	fba3 2302 	umull	r2, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	011c      	lsls	r4, r3, #4
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800356c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	64b9      	str	r1, [r7, #72]	; 0x48
 8003578:	415b      	adcs	r3, r3
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003580:	4641      	mov	r1, r8
 8003582:	eb12 0a01 	adds.w	sl, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb43 0b01 	adc.w	fp, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800359c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a0:	4692      	mov	sl, r2
 80035a2:	469b      	mov	fp, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	eb1a 0303 	adds.w	r3, sl, r3
 80035aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ae:	464b      	mov	r3, r9
 80035b0:	eb4b 0303 	adc.w	r3, fp, r3
 80035b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035cc:	460b      	mov	r3, r1
 80035ce:	18db      	adds	r3, r3, r3
 80035d0:	643b      	str	r3, [r7, #64]	; 0x40
 80035d2:	4613      	mov	r3, r2
 80035d4:	eb42 0303 	adc.w	r3, r2, r3
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
 80035da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035e2:	f7fc fe55 	bl	8000290 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <UART_SetConfig+0x2d4>)
 80035ee:	fba3 2301 	umull	r2, r3, r3, r1
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2264      	movs	r2, #100	; 0x64
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	1acb      	subs	r3, r1, r3
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <UART_SetConfig+0x2d4>)
 8003604:	fba3 2302 	umull	r2, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003610:	441c      	add	r4, r3
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800361c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	63b9      	str	r1, [r7, #56]	; 0x38
 800362c:	415b      	adcs	r3, r3
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003634:	4641      	mov	r1, r8
 8003636:	1851      	adds	r1, r2, r1
 8003638:	6339      	str	r1, [r7, #48]	; 0x30
 800363a:	4649      	mov	r1, r9
 800363c:	414b      	adcs	r3, r1
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800364c:	4659      	mov	r1, fp
 800364e:	00cb      	lsls	r3, r1, #3
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003656:	4651      	mov	r1, sl
 8003658:	00ca      	lsls	r2, r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	4603      	mov	r3, r0
 8003660:	4642      	mov	r2, r8
 8003662:	189b      	adds	r3, r3, r2
 8003664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003668:	464b      	mov	r3, r9
 800366a:	460a      	mov	r2, r1
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003688:	460b      	mov	r3, r1
 800368a:	18db      	adds	r3, r3, r3
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
 800368e:	4613      	mov	r3, r2
 8003690:	eb42 0303 	adc.w	r3, r2, r3
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800369e:	f7fc fdf7 	bl	8000290 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <UART_SetConfig+0x2d4>)
 80036a8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2164      	movs	r1, #100	; 0x64
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <UART_SetConfig+0x2d4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 0207 	and.w	r2, r3, #7
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4422      	add	r2, r4
 80036ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d0:	e105      	b.n	80038de <UART_SetConfig+0x4d6>
 80036d2:	bf00      	nop
 80036d4:	40011000 	.word	0x40011000
 80036d8:	40011400 	.word	0x40011400
 80036dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	6239      	str	r1, [r7, #32]
 80036fa:	415b      	adcs	r3, r3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003702:	4641      	mov	r1, r8
 8003704:	1854      	adds	r4, r2, r1
 8003706:	4649      	mov	r1, r9
 8003708:	eb43 0501 	adc.w	r5, r3, r1
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	00eb      	lsls	r3, r5, #3
 8003716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371a:	00e2      	lsls	r2, r4, #3
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	4643      	mov	r3, r8
 8003722:	18e3      	adds	r3, r4, r3
 8003724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003728:	464b      	mov	r3, r9
 800372a:	eb45 0303 	adc.w	r3, r5, r3
 800372e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800373e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800374e:	4629      	mov	r1, r5
 8003750:	008b      	lsls	r3, r1, #2
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003758:	4621      	mov	r1, r4
 800375a:	008a      	lsls	r2, r1, #2
 800375c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003760:	f7fc fd96 	bl	8000290 <__aeabi_uldivmod>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4b60      	ldr	r3, [pc, #384]	; (80038ec <UART_SetConfig+0x4e4>)
 800376a:	fba3 2302 	umull	r2, r3, r3, r2
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	011c      	lsls	r4, r3, #4
 8003772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800377c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	61b9      	str	r1, [r7, #24]
 800378c:	415b      	adcs	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003794:	4641      	mov	r1, r8
 8003796:	1851      	adds	r1, r2, r1
 8003798:	6139      	str	r1, [r7, #16]
 800379a:	4649      	mov	r1, r9
 800379c:	414b      	adcs	r3, r1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037ac:	4659      	mov	r1, fp
 80037ae:	00cb      	lsls	r3, r1, #3
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b6:	4651      	mov	r1, sl
 80037b8:	00ca      	lsls	r2, r1, #3
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	4642      	mov	r2, r8
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ec:	4649      	mov	r1, r9
 80037ee:	008b      	lsls	r3, r1, #2
 80037f0:	4641      	mov	r1, r8
 80037f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f6:	4641      	mov	r1, r8
 80037f8:	008a      	lsls	r2, r1, #2
 80037fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037fe:	f7fc fd47 	bl	8000290 <__aeabi_uldivmod>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4b39      	ldr	r3, [pc, #228]	; (80038ec <UART_SetConfig+0x4e4>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2164      	movs	r1, #100	; 0x64
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <UART_SetConfig+0x4e4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003826:	441c      	add	r4, r3
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	673b      	str	r3, [r7, #112]	; 0x70
 8003830:	677a      	str	r2, [r7, #116]	; 0x74
 8003832:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	1891      	adds	r1, r2, r2
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	415b      	adcs	r3, r3
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003846:	4641      	mov	r1, r8
 8003848:	1851      	adds	r1, r2, r1
 800384a:	6039      	str	r1, [r7, #0]
 800384c:	4649      	mov	r1, r9
 800384e:	414b      	adcs	r3, r1
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800385e:	4659      	mov	r1, fp
 8003860:	00cb      	lsls	r3, r1, #3
 8003862:	4651      	mov	r1, sl
 8003864:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003868:	4651      	mov	r1, sl
 800386a:	00ca      	lsls	r2, r1, #3
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	4603      	mov	r3, r0
 8003872:	4642      	mov	r2, r8
 8003874:	189b      	adds	r3, r3, r2
 8003876:	66bb      	str	r3, [r7, #104]	; 0x68
 8003878:	464b      	mov	r3, r9
 800387a:	460a      	mov	r2, r1
 800387c:	eb42 0303 	adc.w	r3, r2, r3
 8003880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	663b      	str	r3, [r7, #96]	; 0x60
 800388c:	667a      	str	r2, [r7, #100]	; 0x64
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800389a:	4649      	mov	r1, r9
 800389c:	008b      	lsls	r3, r1, #2
 800389e:	4641      	mov	r1, r8
 80038a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a4:	4641      	mov	r1, r8
 80038a6:	008a      	lsls	r2, r1, #2
 80038a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038ac:	f7fc fcf0 	bl	8000290 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <UART_SetConfig+0x4e4>)
 80038b6:	fba3 1302 	umull	r1, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2164      	movs	r1, #100	; 0x64
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <UART_SetConfig+0x4e4>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4422      	add	r2, r4
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	bf00      	nop
 80038e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	51eb851f 	.word	0x51eb851f

080038f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038f0:	b084      	sub	sp, #16
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	f107 001c 	add.w	r0, r7, #28
 80038fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	2b01      	cmp	r3, #1
 8003906:	d122      	bne.n	800394e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800391c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 faa2 	bl	8003e8c <USB_CoreReset>
 8003948:	4603      	mov	r3, r0
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e01a      	b.n	8003984 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa96 	bl	8003e8c <USB_CoreReset>
 8003960:	4603      	mov	r3, r0
 8003962:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	639a      	str	r2, [r3, #56]	; 0x38
 8003976:	e005      	b.n	8003984 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10b      	bne.n	80039a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f043 0206 	orr.w	r2, r3, #6
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ae:	b004      	add	sp, #16
 80039b0:	4770      	bx	lr

080039b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d115      	bne.n	8003a22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f7fd fce4 	bl	80013d0 <HAL_Delay>
      ms++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa2e 	bl	8003e70 <USB_GetMode>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d01e      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b31      	cmp	r3, #49	; 0x31
 8003a1e:	d9f0      	bls.n	8003a02 <USB_SetCurrentMode+0x2e>
 8003a20:	e01a      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d115      	bne.n	8003a54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7fd fccb 	bl	80013d0 <HAL_Delay>
      ms++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fa15 	bl	8003e70 <USB_GetMode>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b31      	cmp	r3, #49	; 0x31
 8003a50:	d9f0      	bls.n	8003a34 <USB_SetCurrentMode+0x60>
 8003a52:	e001      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e005      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b32      	cmp	r3, #50	; 0x32
 8003a5c:	d101      	bne.n	8003a62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e009      	b.n	8003aa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3340      	adds	r3, #64	; 0x40
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b0e      	cmp	r3, #14
 8003aa4:	d9f2      	bls.n	8003a8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11c      	bne.n	8003ae6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aba:	f043 0302 	orr.w	r3, r3, #2
 8003abe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae4:	e00b      	b.n	8003afe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b04:	461a      	mov	r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b10:	4619      	mov	r1, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b18:	461a      	mov	r2, r3
 8003b1a:	680b      	ldr	r3, [r1, #0]
 8003b1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10c      	bne.n	8003b3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f965 	bl	8003dfc <USB_SetDevSpeed>
 8003b32:	e008      	b.n	8003b46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b34:	2101      	movs	r1, #1
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f960 	bl	8003dfc <USB_SetDevSpeed>
 8003b3c:	e003      	b.n	8003b46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b3e:	2103      	movs	r1, #3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f95b 	bl	8003dfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b46:	2110      	movs	r1, #16
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f8f3 	bl	8003d34 <USB_FlushTxFifo>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f91f 	bl	8003d9c <USB_FlushRxFifo>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e043      	b.n	8003c1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba8:	d118      	bne.n	8003bdc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e013      	b.n	8003bee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e008      	b.n	8003bee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	461a      	mov	r2, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	3301      	adds	r3, #1
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3b7      	bcc.n	8003b92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	e043      	b.n	8003cb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c3e:	d118      	bne.n	8003c72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	461a      	mov	r2, r3
 8003c54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e013      	b.n	8003c84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e008      	b.n	8003c84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	461a      	mov	r2, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ca8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3301      	adds	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3b7      	bcc.n	8003c28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f043 0210 	orr.w	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <USB_DevInit+0x2c4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr
 8003d30:	803c3800 	.word	0x803c3800

08003d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3301      	adds	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <USB_FlushTxFifo+0x64>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e01b      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	daf2      	bge.n	8003d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <USB_FlushTxFifo+0x64>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e006      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d0f0      	beq.n	8003d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	00030d40 	.word	0x00030d40

08003d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <USB_FlushRxFifo+0x5c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e018      	b.n	8003dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	daf2      	bge.n	8003da8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <USB_FlushRxFifo+0x5c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e006      	b.n	8003dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d0f0      	beq.n	8003dcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	00030d40 	.word	0x00030d40

08003dfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	68f9      	ldr	r1, [r7, #12]
 8003e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e48:	f023 0303 	bic.w	r3, r3, #3
 8003e4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <USB_CoreReset+0x64>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e01b      	b.n	8003ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	daf2      	bge.n	8003e98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <USB_CoreReset+0x64>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e006      	b.n	8003ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d0f0      	beq.n	8003ec2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	00030d40 	.word	0x00030d40

08003ef4 <__errno>:
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <__errno+0x8>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	2000000c 	.word	0x2000000c

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4d0d      	ldr	r5, [pc, #52]	; (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1b64      	subs	r4, r4, r5
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2600      	movs	r6, #0
 8003f0c:	42a6      	cmp	r6, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4d0b      	ldr	r5, [pc, #44]	; (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	; (8003f44 <__libc_init_array+0x44>)
 8003f14:	f001 f882 	bl	800501c <_init>
 8003f18:	1b64      	subs	r4, r4, r5
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	42a6      	cmp	r6, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f28:	4798      	blx	r3
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f32:	4798      	blx	r3
 8003f34:	3601      	adds	r6, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	080053e4 	.word	0x080053e4
 8003f3c:	080053e4 	.word	0x080053e4
 8003f40:	080053e4 	.word	0x080053e4
 8003f44:	080053e8 	.word	0x080053e8

08003f48 <memset>:
 8003f48:	4402      	add	r2, r0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <memset+0xa>
 8003f50:	4770      	bx	lr
 8003f52:	f803 1b01 	strb.w	r1, [r3], #1
 8003f56:	e7f9      	b.n	8003f4c <memset+0x4>

08003f58 <iprintf>:
 8003f58:	b40f      	push	{r0, r1, r2, r3}
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <iprintf+0x2c>)
 8003f5c:	b513      	push	{r0, r1, r4, lr}
 8003f5e:	681c      	ldr	r4, [r3, #0]
 8003f60:	b124      	cbz	r4, 8003f6c <iprintf+0x14>
 8003f62:	69a3      	ldr	r3, [r4, #24]
 8003f64:	b913      	cbnz	r3, 8003f6c <iprintf+0x14>
 8003f66:	4620      	mov	r0, r4
 8003f68:	f000 fa74 	bl	8004454 <__sinit>
 8003f6c:	ab05      	add	r3, sp, #20
 8003f6e:	9a04      	ldr	r2, [sp, #16]
 8003f70:	68a1      	ldr	r1, [r4, #8]
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 fc7d 	bl	8004874 <_vfiprintf_r>
 8003f7a:	b002      	add	sp, #8
 8003f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f80:	b004      	add	sp, #16
 8003f82:	4770      	bx	lr
 8003f84:	2000000c 	.word	0x2000000c

08003f88 <putchar>:
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <putchar+0x28>)
 8003f8a:	b513      	push	{r0, r1, r4, lr}
 8003f8c:	681c      	ldr	r4, [r3, #0]
 8003f8e:	4601      	mov	r1, r0
 8003f90:	b134      	cbz	r4, 8003fa0 <putchar+0x18>
 8003f92:	69a3      	ldr	r3, [r4, #24]
 8003f94:	b923      	cbnz	r3, 8003fa0 <putchar+0x18>
 8003f96:	9001      	str	r0, [sp, #4]
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 fa5b 	bl	8004454 <__sinit>
 8003f9e:	9901      	ldr	r1, [sp, #4]
 8003fa0:	68a2      	ldr	r2, [r4, #8]
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	b002      	add	sp, #8
 8003fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003faa:	f000 bf27 	b.w	8004dfc <_putc_r>
 8003fae:	bf00      	nop
 8003fb0:	2000000c 	.word	0x2000000c

08003fb4 <_puts_r>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	460e      	mov	r6, r1
 8003fb8:	4605      	mov	r5, r0
 8003fba:	b118      	cbz	r0, 8003fc4 <_puts_r+0x10>
 8003fbc:	6983      	ldr	r3, [r0, #24]
 8003fbe:	b90b      	cbnz	r3, 8003fc4 <_puts_r+0x10>
 8003fc0:	f000 fa48 	bl	8004454 <__sinit>
 8003fc4:	69ab      	ldr	r3, [r5, #24]
 8003fc6:	68ac      	ldr	r4, [r5, #8]
 8003fc8:	b913      	cbnz	r3, 8003fd0 <_puts_r+0x1c>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fa42 	bl	8004454 <__sinit>
 8003fd0:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <_puts_r+0xd0>)
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d120      	bne.n	8004018 <_puts_r+0x64>
 8003fd6:	686c      	ldr	r4, [r5, #4]
 8003fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fda:	07db      	lsls	r3, r3, #31
 8003fdc:	d405      	bmi.n	8003fea <_puts_r+0x36>
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	0598      	lsls	r0, r3, #22
 8003fe2:	d402      	bmi.n	8003fea <_puts_r+0x36>
 8003fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe6:	f000 fad3 	bl	8004590 <__retarget_lock_acquire_recursive>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	0719      	lsls	r1, r3, #28
 8003fee:	d51d      	bpl.n	800402c <_puts_r+0x78>
 8003ff0:	6923      	ldr	r3, [r4, #16]
 8003ff2:	b1db      	cbz	r3, 800402c <_puts_r+0x78>
 8003ff4:	3e01      	subs	r6, #1
 8003ff6:	68a3      	ldr	r3, [r4, #8]
 8003ff8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	bb39      	cbnz	r1, 8004052 <_puts_r+0x9e>
 8004002:	2b00      	cmp	r3, #0
 8004004:	da38      	bge.n	8004078 <_puts_r+0xc4>
 8004006:	4622      	mov	r2, r4
 8004008:	210a      	movs	r1, #10
 800400a:	4628      	mov	r0, r5
 800400c:	f000 f848 	bl	80040a0 <__swbuf_r>
 8004010:	3001      	adds	r0, #1
 8004012:	d011      	beq.n	8004038 <_puts_r+0x84>
 8004014:	250a      	movs	r5, #10
 8004016:	e011      	b.n	800403c <_puts_r+0x88>
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <_puts_r+0xd4>)
 800401a:	429c      	cmp	r4, r3
 800401c:	d101      	bne.n	8004022 <_puts_r+0x6e>
 800401e:	68ac      	ldr	r4, [r5, #8]
 8004020:	e7da      	b.n	8003fd8 <_puts_r+0x24>
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <_puts_r+0xd8>)
 8004024:	429c      	cmp	r4, r3
 8004026:	bf08      	it	eq
 8004028:	68ec      	ldreq	r4, [r5, #12]
 800402a:	e7d5      	b.n	8003fd8 <_puts_r+0x24>
 800402c:	4621      	mov	r1, r4
 800402e:	4628      	mov	r0, r5
 8004030:	f000 f888 	bl	8004144 <__swsetup_r>
 8004034:	2800      	cmp	r0, #0
 8004036:	d0dd      	beq.n	8003ff4 <_puts_r+0x40>
 8004038:	f04f 35ff 	mov.w	r5, #4294967295
 800403c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800403e:	07da      	lsls	r2, r3, #31
 8004040:	d405      	bmi.n	800404e <_puts_r+0x9a>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	059b      	lsls	r3, r3, #22
 8004046:	d402      	bmi.n	800404e <_puts_r+0x9a>
 8004048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800404a:	f000 faa2 	bl	8004592 <__retarget_lock_release_recursive>
 800404e:	4628      	mov	r0, r5
 8004050:	bd70      	pop	{r4, r5, r6, pc}
 8004052:	2b00      	cmp	r3, #0
 8004054:	da04      	bge.n	8004060 <_puts_r+0xac>
 8004056:	69a2      	ldr	r2, [r4, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	dc06      	bgt.n	800406a <_puts_r+0xb6>
 800405c:	290a      	cmp	r1, #10
 800405e:	d004      	beq.n	800406a <_puts_r+0xb6>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	6022      	str	r2, [r4, #0]
 8004066:	7019      	strb	r1, [r3, #0]
 8004068:	e7c5      	b.n	8003ff6 <_puts_r+0x42>
 800406a:	4622      	mov	r2, r4
 800406c:	4628      	mov	r0, r5
 800406e:	f000 f817 	bl	80040a0 <__swbuf_r>
 8004072:	3001      	adds	r0, #1
 8004074:	d1bf      	bne.n	8003ff6 <_puts_r+0x42>
 8004076:	e7df      	b.n	8004038 <_puts_r+0x84>
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	250a      	movs	r5, #10
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	701d      	strb	r5, [r3, #0]
 8004082:	e7db      	b.n	800403c <_puts_r+0x88>
 8004084:	08005368 	.word	0x08005368
 8004088:	08005388 	.word	0x08005388
 800408c:	08005348 	.word	0x08005348

08004090 <puts>:
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <puts+0xc>)
 8004092:	4601      	mov	r1, r0
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f7ff bf8d 	b.w	8003fb4 <_puts_r>
 800409a:	bf00      	nop
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__swbuf_r>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	460e      	mov	r6, r1
 80040a4:	4614      	mov	r4, r2
 80040a6:	4605      	mov	r5, r0
 80040a8:	b118      	cbz	r0, 80040b2 <__swbuf_r+0x12>
 80040aa:	6983      	ldr	r3, [r0, #24]
 80040ac:	b90b      	cbnz	r3, 80040b2 <__swbuf_r+0x12>
 80040ae:	f000 f9d1 	bl	8004454 <__sinit>
 80040b2:	4b21      	ldr	r3, [pc, #132]	; (8004138 <__swbuf_r+0x98>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	d12b      	bne.n	8004110 <__swbuf_r+0x70>
 80040b8:	686c      	ldr	r4, [r5, #4]
 80040ba:	69a3      	ldr	r3, [r4, #24]
 80040bc:	60a3      	str	r3, [r4, #8]
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	071a      	lsls	r2, r3, #28
 80040c2:	d52f      	bpl.n	8004124 <__swbuf_r+0x84>
 80040c4:	6923      	ldr	r3, [r4, #16]
 80040c6:	b36b      	cbz	r3, 8004124 <__swbuf_r+0x84>
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	1ac0      	subs	r0, r0, r3
 80040ce:	6963      	ldr	r3, [r4, #20]
 80040d0:	b2f6      	uxtb	r6, r6
 80040d2:	4283      	cmp	r3, r0
 80040d4:	4637      	mov	r7, r6
 80040d6:	dc04      	bgt.n	80040e2 <__swbuf_r+0x42>
 80040d8:	4621      	mov	r1, r4
 80040da:	4628      	mov	r0, r5
 80040dc:	f000 f926 	bl	800432c <_fflush_r>
 80040e0:	bb30      	cbnz	r0, 8004130 <__swbuf_r+0x90>
 80040e2:	68a3      	ldr	r3, [r4, #8]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	60a3      	str	r3, [r4, #8]
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	6022      	str	r2, [r4, #0]
 80040ee:	701e      	strb	r6, [r3, #0]
 80040f0:	6963      	ldr	r3, [r4, #20]
 80040f2:	3001      	adds	r0, #1
 80040f4:	4283      	cmp	r3, r0
 80040f6:	d004      	beq.n	8004102 <__swbuf_r+0x62>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	07db      	lsls	r3, r3, #31
 80040fc:	d506      	bpl.n	800410c <__swbuf_r+0x6c>
 80040fe:	2e0a      	cmp	r6, #10
 8004100:	d104      	bne.n	800410c <__swbuf_r+0x6c>
 8004102:	4621      	mov	r1, r4
 8004104:	4628      	mov	r0, r5
 8004106:	f000 f911 	bl	800432c <_fflush_r>
 800410a:	b988      	cbnz	r0, 8004130 <__swbuf_r+0x90>
 800410c:	4638      	mov	r0, r7
 800410e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <__swbuf_r+0x9c>)
 8004112:	429c      	cmp	r4, r3
 8004114:	d101      	bne.n	800411a <__swbuf_r+0x7a>
 8004116:	68ac      	ldr	r4, [r5, #8]
 8004118:	e7cf      	b.n	80040ba <__swbuf_r+0x1a>
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <__swbuf_r+0xa0>)
 800411c:	429c      	cmp	r4, r3
 800411e:	bf08      	it	eq
 8004120:	68ec      	ldreq	r4, [r5, #12]
 8004122:	e7ca      	b.n	80040ba <__swbuf_r+0x1a>
 8004124:	4621      	mov	r1, r4
 8004126:	4628      	mov	r0, r5
 8004128:	f000 f80c 	bl	8004144 <__swsetup_r>
 800412c:	2800      	cmp	r0, #0
 800412e:	d0cb      	beq.n	80040c8 <__swbuf_r+0x28>
 8004130:	f04f 37ff 	mov.w	r7, #4294967295
 8004134:	e7ea      	b.n	800410c <__swbuf_r+0x6c>
 8004136:	bf00      	nop
 8004138:	08005368 	.word	0x08005368
 800413c:	08005388 	.word	0x08005388
 8004140:	08005348 	.word	0x08005348

08004144 <__swsetup_r>:
 8004144:	4b32      	ldr	r3, [pc, #200]	; (8004210 <__swsetup_r+0xcc>)
 8004146:	b570      	push	{r4, r5, r6, lr}
 8004148:	681d      	ldr	r5, [r3, #0]
 800414a:	4606      	mov	r6, r0
 800414c:	460c      	mov	r4, r1
 800414e:	b125      	cbz	r5, 800415a <__swsetup_r+0x16>
 8004150:	69ab      	ldr	r3, [r5, #24]
 8004152:	b913      	cbnz	r3, 800415a <__swsetup_r+0x16>
 8004154:	4628      	mov	r0, r5
 8004156:	f000 f97d 	bl	8004454 <__sinit>
 800415a:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <__swsetup_r+0xd0>)
 800415c:	429c      	cmp	r4, r3
 800415e:	d10f      	bne.n	8004180 <__swsetup_r+0x3c>
 8004160:	686c      	ldr	r4, [r5, #4]
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004168:	0719      	lsls	r1, r3, #28
 800416a:	d42c      	bmi.n	80041c6 <__swsetup_r+0x82>
 800416c:	06dd      	lsls	r5, r3, #27
 800416e:	d411      	bmi.n	8004194 <__swsetup_r+0x50>
 8004170:	2309      	movs	r3, #9
 8004172:	6033      	str	r3, [r6, #0]
 8004174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	f04f 30ff 	mov.w	r0, #4294967295
 800417e:	e03e      	b.n	80041fe <__swsetup_r+0xba>
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <__swsetup_r+0xd4>)
 8004182:	429c      	cmp	r4, r3
 8004184:	d101      	bne.n	800418a <__swsetup_r+0x46>
 8004186:	68ac      	ldr	r4, [r5, #8]
 8004188:	e7eb      	b.n	8004162 <__swsetup_r+0x1e>
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <__swsetup_r+0xd8>)
 800418c:	429c      	cmp	r4, r3
 800418e:	bf08      	it	eq
 8004190:	68ec      	ldreq	r4, [r5, #12]
 8004192:	e7e6      	b.n	8004162 <__swsetup_r+0x1e>
 8004194:	0758      	lsls	r0, r3, #29
 8004196:	d512      	bpl.n	80041be <__swsetup_r+0x7a>
 8004198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800419a:	b141      	cbz	r1, 80041ae <__swsetup_r+0x6a>
 800419c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041a0:	4299      	cmp	r1, r3
 80041a2:	d002      	beq.n	80041aa <__swsetup_r+0x66>
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 fa5b 	bl	8004660 <_free_r>
 80041aa:	2300      	movs	r3, #0
 80041ac:	6363      	str	r3, [r4, #52]	; 0x34
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041b4:	81a3      	strh	r3, [r4, #12]
 80041b6:	2300      	movs	r3, #0
 80041b8:	6063      	str	r3, [r4, #4]
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f043 0308 	orr.w	r3, r3, #8
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	b94b      	cbnz	r3, 80041de <__swsetup_r+0x9a>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d003      	beq.n	80041de <__swsetup_r+0x9a>
 80041d6:	4621      	mov	r1, r4
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 fa01 	bl	80045e0 <__smakebuf_r>
 80041de:	89a0      	ldrh	r0, [r4, #12]
 80041e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041e4:	f010 0301 	ands.w	r3, r0, #1
 80041e8:	d00a      	beq.n	8004200 <__swsetup_r+0xbc>
 80041ea:	2300      	movs	r3, #0
 80041ec:	60a3      	str	r3, [r4, #8]
 80041ee:	6963      	ldr	r3, [r4, #20]
 80041f0:	425b      	negs	r3, r3
 80041f2:	61a3      	str	r3, [r4, #24]
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	b943      	cbnz	r3, 800420a <__swsetup_r+0xc6>
 80041f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041fc:	d1ba      	bne.n	8004174 <__swsetup_r+0x30>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	0781      	lsls	r1, r0, #30
 8004202:	bf58      	it	pl
 8004204:	6963      	ldrpl	r3, [r4, #20]
 8004206:	60a3      	str	r3, [r4, #8]
 8004208:	e7f4      	b.n	80041f4 <__swsetup_r+0xb0>
 800420a:	2000      	movs	r0, #0
 800420c:	e7f7      	b.n	80041fe <__swsetup_r+0xba>
 800420e:	bf00      	nop
 8004210:	2000000c 	.word	0x2000000c
 8004214:	08005368 	.word	0x08005368
 8004218:	08005388 	.word	0x08005388
 800421c:	08005348 	.word	0x08005348

08004220 <__sflush_r>:
 8004220:	898a      	ldrh	r2, [r1, #12]
 8004222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004226:	4605      	mov	r5, r0
 8004228:	0710      	lsls	r0, r2, #28
 800422a:	460c      	mov	r4, r1
 800422c:	d458      	bmi.n	80042e0 <__sflush_r+0xc0>
 800422e:	684b      	ldr	r3, [r1, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	dc05      	bgt.n	8004240 <__sflush_r+0x20>
 8004234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	dc02      	bgt.n	8004240 <__sflush_r+0x20>
 800423a:	2000      	movs	r0, #0
 800423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004242:	2e00      	cmp	r6, #0
 8004244:	d0f9      	beq.n	800423a <__sflush_r+0x1a>
 8004246:	2300      	movs	r3, #0
 8004248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800424c:	682f      	ldr	r7, [r5, #0]
 800424e:	602b      	str	r3, [r5, #0]
 8004250:	d032      	beq.n	80042b8 <__sflush_r+0x98>
 8004252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	075a      	lsls	r2, r3, #29
 8004258:	d505      	bpl.n	8004266 <__sflush_r+0x46>
 800425a:	6863      	ldr	r3, [r4, #4]
 800425c:	1ac0      	subs	r0, r0, r3
 800425e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004260:	b10b      	cbz	r3, 8004266 <__sflush_r+0x46>
 8004262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004264:	1ac0      	subs	r0, r0, r3
 8004266:	2300      	movs	r3, #0
 8004268:	4602      	mov	r2, r0
 800426a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800426c:	6a21      	ldr	r1, [r4, #32]
 800426e:	4628      	mov	r0, r5
 8004270:	47b0      	blx	r6
 8004272:	1c43      	adds	r3, r0, #1
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	d106      	bne.n	8004286 <__sflush_r+0x66>
 8004278:	6829      	ldr	r1, [r5, #0]
 800427a:	291d      	cmp	r1, #29
 800427c:	d82c      	bhi.n	80042d8 <__sflush_r+0xb8>
 800427e:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <__sflush_r+0x108>)
 8004280:	40ca      	lsrs	r2, r1
 8004282:	07d6      	lsls	r6, r2, #31
 8004284:	d528      	bpl.n	80042d8 <__sflush_r+0xb8>
 8004286:	2200      	movs	r2, #0
 8004288:	6062      	str	r2, [r4, #4]
 800428a:	04d9      	lsls	r1, r3, #19
 800428c:	6922      	ldr	r2, [r4, #16]
 800428e:	6022      	str	r2, [r4, #0]
 8004290:	d504      	bpl.n	800429c <__sflush_r+0x7c>
 8004292:	1c42      	adds	r2, r0, #1
 8004294:	d101      	bne.n	800429a <__sflush_r+0x7a>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	b903      	cbnz	r3, 800429c <__sflush_r+0x7c>
 800429a:	6560      	str	r0, [r4, #84]	; 0x54
 800429c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800429e:	602f      	str	r7, [r5, #0]
 80042a0:	2900      	cmp	r1, #0
 80042a2:	d0ca      	beq.n	800423a <__sflush_r+0x1a>
 80042a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042a8:	4299      	cmp	r1, r3
 80042aa:	d002      	beq.n	80042b2 <__sflush_r+0x92>
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 f9d7 	bl	8004660 <_free_r>
 80042b2:	2000      	movs	r0, #0
 80042b4:	6360      	str	r0, [r4, #52]	; 0x34
 80042b6:	e7c1      	b.n	800423c <__sflush_r+0x1c>
 80042b8:	6a21      	ldr	r1, [r4, #32]
 80042ba:	2301      	movs	r3, #1
 80042bc:	4628      	mov	r0, r5
 80042be:	47b0      	blx	r6
 80042c0:	1c41      	adds	r1, r0, #1
 80042c2:	d1c7      	bne.n	8004254 <__sflush_r+0x34>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0c4      	beq.n	8004254 <__sflush_r+0x34>
 80042ca:	2b1d      	cmp	r3, #29
 80042cc:	d001      	beq.n	80042d2 <__sflush_r+0xb2>
 80042ce:	2b16      	cmp	r3, #22
 80042d0:	d101      	bne.n	80042d6 <__sflush_r+0xb6>
 80042d2:	602f      	str	r7, [r5, #0]
 80042d4:	e7b1      	b.n	800423a <__sflush_r+0x1a>
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	e7ad      	b.n	800423c <__sflush_r+0x1c>
 80042e0:	690f      	ldr	r7, [r1, #16]
 80042e2:	2f00      	cmp	r7, #0
 80042e4:	d0a9      	beq.n	800423a <__sflush_r+0x1a>
 80042e6:	0793      	lsls	r3, r2, #30
 80042e8:	680e      	ldr	r6, [r1, #0]
 80042ea:	bf08      	it	eq
 80042ec:	694b      	ldreq	r3, [r1, #20]
 80042ee:	600f      	str	r7, [r1, #0]
 80042f0:	bf18      	it	ne
 80042f2:	2300      	movne	r3, #0
 80042f4:	eba6 0807 	sub.w	r8, r6, r7
 80042f8:	608b      	str	r3, [r1, #8]
 80042fa:	f1b8 0f00 	cmp.w	r8, #0
 80042fe:	dd9c      	ble.n	800423a <__sflush_r+0x1a>
 8004300:	6a21      	ldr	r1, [r4, #32]
 8004302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004304:	4643      	mov	r3, r8
 8004306:	463a      	mov	r2, r7
 8004308:	4628      	mov	r0, r5
 800430a:	47b0      	blx	r6
 800430c:	2800      	cmp	r0, #0
 800430e:	dc06      	bgt.n	800431e <__sflush_r+0xfe>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	e78e      	b.n	800423c <__sflush_r+0x1c>
 800431e:	4407      	add	r7, r0
 8004320:	eba8 0800 	sub.w	r8, r8, r0
 8004324:	e7e9      	b.n	80042fa <__sflush_r+0xda>
 8004326:	bf00      	nop
 8004328:	20400001 	.word	0x20400001

0800432c <_fflush_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	690b      	ldr	r3, [r1, #16]
 8004330:	4605      	mov	r5, r0
 8004332:	460c      	mov	r4, r1
 8004334:	b913      	cbnz	r3, 800433c <_fflush_r+0x10>
 8004336:	2500      	movs	r5, #0
 8004338:	4628      	mov	r0, r5
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	b118      	cbz	r0, 8004346 <_fflush_r+0x1a>
 800433e:	6983      	ldr	r3, [r0, #24]
 8004340:	b90b      	cbnz	r3, 8004346 <_fflush_r+0x1a>
 8004342:	f000 f887 	bl	8004454 <__sinit>
 8004346:	4b14      	ldr	r3, [pc, #80]	; (8004398 <_fflush_r+0x6c>)
 8004348:	429c      	cmp	r4, r3
 800434a:	d11b      	bne.n	8004384 <_fflush_r+0x58>
 800434c:	686c      	ldr	r4, [r5, #4]
 800434e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ef      	beq.n	8004336 <_fflush_r+0xa>
 8004356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004358:	07d0      	lsls	r0, r2, #31
 800435a:	d404      	bmi.n	8004366 <_fflush_r+0x3a>
 800435c:	0599      	lsls	r1, r3, #22
 800435e:	d402      	bmi.n	8004366 <_fflush_r+0x3a>
 8004360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004362:	f000 f915 	bl	8004590 <__retarget_lock_acquire_recursive>
 8004366:	4628      	mov	r0, r5
 8004368:	4621      	mov	r1, r4
 800436a:	f7ff ff59 	bl	8004220 <__sflush_r>
 800436e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004370:	07da      	lsls	r2, r3, #31
 8004372:	4605      	mov	r5, r0
 8004374:	d4e0      	bmi.n	8004338 <_fflush_r+0xc>
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	059b      	lsls	r3, r3, #22
 800437a:	d4dd      	bmi.n	8004338 <_fflush_r+0xc>
 800437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800437e:	f000 f908 	bl	8004592 <__retarget_lock_release_recursive>
 8004382:	e7d9      	b.n	8004338 <_fflush_r+0xc>
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <_fflush_r+0x70>)
 8004386:	429c      	cmp	r4, r3
 8004388:	d101      	bne.n	800438e <_fflush_r+0x62>
 800438a:	68ac      	ldr	r4, [r5, #8]
 800438c:	e7df      	b.n	800434e <_fflush_r+0x22>
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <_fflush_r+0x74>)
 8004390:	429c      	cmp	r4, r3
 8004392:	bf08      	it	eq
 8004394:	68ec      	ldreq	r4, [r5, #12]
 8004396:	e7da      	b.n	800434e <_fflush_r+0x22>
 8004398:	08005368 	.word	0x08005368
 800439c:	08005388 	.word	0x08005388
 80043a0:	08005348 	.word	0x08005348

080043a4 <std>:
 80043a4:	2300      	movs	r3, #0
 80043a6:	b510      	push	{r4, lr}
 80043a8:	4604      	mov	r4, r0
 80043aa:	e9c0 3300 	strd	r3, r3, [r0]
 80043ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043b2:	6083      	str	r3, [r0, #8]
 80043b4:	8181      	strh	r1, [r0, #12]
 80043b6:	6643      	str	r3, [r0, #100]	; 0x64
 80043b8:	81c2      	strh	r2, [r0, #14]
 80043ba:	6183      	str	r3, [r0, #24]
 80043bc:	4619      	mov	r1, r3
 80043be:	2208      	movs	r2, #8
 80043c0:	305c      	adds	r0, #92	; 0x5c
 80043c2:	f7ff fdc1 	bl	8003f48 <memset>
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <std+0x38>)
 80043c8:	6263      	str	r3, [r4, #36]	; 0x24
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <std+0x3c>)
 80043cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <std+0x40>)
 80043d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <std+0x44>)
 80043d4:	6224      	str	r4, [r4, #32]
 80043d6:	6323      	str	r3, [r4, #48]	; 0x30
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	bf00      	nop
 80043dc:	08004ead 	.word	0x08004ead
 80043e0:	08004ecf 	.word	0x08004ecf
 80043e4:	08004f07 	.word	0x08004f07
 80043e8:	08004f2b 	.word	0x08004f2b

080043ec <_cleanup_r>:
 80043ec:	4901      	ldr	r1, [pc, #4]	; (80043f4 <_cleanup_r+0x8>)
 80043ee:	f000 b8af 	b.w	8004550 <_fwalk_reent>
 80043f2:	bf00      	nop
 80043f4:	0800432d 	.word	0x0800432d

080043f8 <__sfmoreglue>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	2268      	movs	r2, #104	; 0x68
 80043fc:	1e4d      	subs	r5, r1, #1
 80043fe:	4355      	muls	r5, r2
 8004400:	460e      	mov	r6, r1
 8004402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004406:	f000 f997 	bl	8004738 <_malloc_r>
 800440a:	4604      	mov	r4, r0
 800440c:	b140      	cbz	r0, 8004420 <__sfmoreglue+0x28>
 800440e:	2100      	movs	r1, #0
 8004410:	e9c0 1600 	strd	r1, r6, [r0]
 8004414:	300c      	adds	r0, #12
 8004416:	60a0      	str	r0, [r4, #8]
 8004418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800441c:	f7ff fd94 	bl	8003f48 <memset>
 8004420:	4620      	mov	r0, r4
 8004422:	bd70      	pop	{r4, r5, r6, pc}

08004424 <__sfp_lock_acquire>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__sfp_lock_acquire+0x8>)
 8004426:	f000 b8b3 	b.w	8004590 <__retarget_lock_acquire_recursive>
 800442a:	bf00      	nop
 800442c:	200006c1 	.word	0x200006c1

08004430 <__sfp_lock_release>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__sfp_lock_release+0x8>)
 8004432:	f000 b8ae 	b.w	8004592 <__retarget_lock_release_recursive>
 8004436:	bf00      	nop
 8004438:	200006c1 	.word	0x200006c1

0800443c <__sinit_lock_acquire>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__sinit_lock_acquire+0x8>)
 800443e:	f000 b8a7 	b.w	8004590 <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	200006c2 	.word	0x200006c2

08004448 <__sinit_lock_release>:
 8004448:	4801      	ldr	r0, [pc, #4]	; (8004450 <__sinit_lock_release+0x8>)
 800444a:	f000 b8a2 	b.w	8004592 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	200006c2 	.word	0x200006c2

08004454 <__sinit>:
 8004454:	b510      	push	{r4, lr}
 8004456:	4604      	mov	r4, r0
 8004458:	f7ff fff0 	bl	800443c <__sinit_lock_acquire>
 800445c:	69a3      	ldr	r3, [r4, #24]
 800445e:	b11b      	cbz	r3, 8004468 <__sinit+0x14>
 8004460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004464:	f7ff bff0 	b.w	8004448 <__sinit_lock_release>
 8004468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800446c:	6523      	str	r3, [r4, #80]	; 0x50
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <__sinit+0x68>)
 8004470:	4a13      	ldr	r2, [pc, #76]	; (80044c0 <__sinit+0x6c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	62a2      	str	r2, [r4, #40]	; 0x28
 8004476:	42a3      	cmp	r3, r4
 8004478:	bf04      	itt	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	61a3      	streq	r3, [r4, #24]
 800447e:	4620      	mov	r0, r4
 8004480:	f000 f820 	bl	80044c4 <__sfp>
 8004484:	6060      	str	r0, [r4, #4]
 8004486:	4620      	mov	r0, r4
 8004488:	f000 f81c 	bl	80044c4 <__sfp>
 800448c:	60a0      	str	r0, [r4, #8]
 800448e:	4620      	mov	r0, r4
 8004490:	f000 f818 	bl	80044c4 <__sfp>
 8004494:	2200      	movs	r2, #0
 8004496:	60e0      	str	r0, [r4, #12]
 8004498:	2104      	movs	r1, #4
 800449a:	6860      	ldr	r0, [r4, #4]
 800449c:	f7ff ff82 	bl	80043a4 <std>
 80044a0:	68a0      	ldr	r0, [r4, #8]
 80044a2:	2201      	movs	r2, #1
 80044a4:	2109      	movs	r1, #9
 80044a6:	f7ff ff7d 	bl	80043a4 <std>
 80044aa:	68e0      	ldr	r0, [r4, #12]
 80044ac:	2202      	movs	r2, #2
 80044ae:	2112      	movs	r1, #18
 80044b0:	f7ff ff78 	bl	80043a4 <std>
 80044b4:	2301      	movs	r3, #1
 80044b6:	61a3      	str	r3, [r4, #24]
 80044b8:	e7d2      	b.n	8004460 <__sinit+0xc>
 80044ba:	bf00      	nop
 80044bc:	08005344 	.word	0x08005344
 80044c0:	080043ed 	.word	0x080043ed

080044c4 <__sfp>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	4607      	mov	r7, r0
 80044c8:	f7ff ffac 	bl	8004424 <__sfp_lock_acquire>
 80044cc:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <__sfp+0x84>)
 80044ce:	681e      	ldr	r6, [r3, #0]
 80044d0:	69b3      	ldr	r3, [r6, #24]
 80044d2:	b913      	cbnz	r3, 80044da <__sfp+0x16>
 80044d4:	4630      	mov	r0, r6
 80044d6:	f7ff ffbd 	bl	8004454 <__sinit>
 80044da:	3648      	adds	r6, #72	; 0x48
 80044dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	d503      	bpl.n	80044ec <__sfp+0x28>
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	b30b      	cbz	r3, 800452c <__sfp+0x68>
 80044e8:	6836      	ldr	r6, [r6, #0]
 80044ea:	e7f7      	b.n	80044dc <__sfp+0x18>
 80044ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044f0:	b9d5      	cbnz	r5, 8004528 <__sfp+0x64>
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <__sfp+0x88>)
 80044f4:	60e3      	str	r3, [r4, #12]
 80044f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044fa:	6665      	str	r5, [r4, #100]	; 0x64
 80044fc:	f000 f847 	bl	800458e <__retarget_lock_init_recursive>
 8004500:	f7ff ff96 	bl	8004430 <__sfp_lock_release>
 8004504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800450c:	6025      	str	r5, [r4, #0]
 800450e:	61a5      	str	r5, [r4, #24]
 8004510:	2208      	movs	r2, #8
 8004512:	4629      	mov	r1, r5
 8004514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004518:	f7ff fd16 	bl	8003f48 <memset>
 800451c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004524:	4620      	mov	r0, r4
 8004526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004528:	3468      	adds	r4, #104	; 0x68
 800452a:	e7d9      	b.n	80044e0 <__sfp+0x1c>
 800452c:	2104      	movs	r1, #4
 800452e:	4638      	mov	r0, r7
 8004530:	f7ff ff62 	bl	80043f8 <__sfmoreglue>
 8004534:	4604      	mov	r4, r0
 8004536:	6030      	str	r0, [r6, #0]
 8004538:	2800      	cmp	r0, #0
 800453a:	d1d5      	bne.n	80044e8 <__sfp+0x24>
 800453c:	f7ff ff78 	bl	8004430 <__sfp_lock_release>
 8004540:	230c      	movs	r3, #12
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	e7ee      	b.n	8004524 <__sfp+0x60>
 8004546:	bf00      	nop
 8004548:	08005344 	.word	0x08005344
 800454c:	ffff0001 	.word	0xffff0001

08004550 <_fwalk_reent>:
 8004550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004554:	4606      	mov	r6, r0
 8004556:	4688      	mov	r8, r1
 8004558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800455c:	2700      	movs	r7, #0
 800455e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004562:	f1b9 0901 	subs.w	r9, r9, #1
 8004566:	d505      	bpl.n	8004574 <_fwalk_reent+0x24>
 8004568:	6824      	ldr	r4, [r4, #0]
 800456a:	2c00      	cmp	r4, #0
 800456c:	d1f7      	bne.n	800455e <_fwalk_reent+0xe>
 800456e:	4638      	mov	r0, r7
 8004570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004574:	89ab      	ldrh	r3, [r5, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d907      	bls.n	800458a <_fwalk_reent+0x3a>
 800457a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800457e:	3301      	adds	r3, #1
 8004580:	d003      	beq.n	800458a <_fwalk_reent+0x3a>
 8004582:	4629      	mov	r1, r5
 8004584:	4630      	mov	r0, r6
 8004586:	47c0      	blx	r8
 8004588:	4307      	orrs	r7, r0
 800458a:	3568      	adds	r5, #104	; 0x68
 800458c:	e7e9      	b.n	8004562 <_fwalk_reent+0x12>

0800458e <__retarget_lock_init_recursive>:
 800458e:	4770      	bx	lr

08004590 <__retarget_lock_acquire_recursive>:
 8004590:	4770      	bx	lr

08004592 <__retarget_lock_release_recursive>:
 8004592:	4770      	bx	lr

08004594 <__swhatbuf_r>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	460e      	mov	r6, r1
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	2900      	cmp	r1, #0
 800459e:	b096      	sub	sp, #88	; 0x58
 80045a0:	4614      	mov	r4, r2
 80045a2:	461d      	mov	r5, r3
 80045a4:	da08      	bge.n	80045b8 <__swhatbuf_r+0x24>
 80045a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	061a      	lsls	r2, r3, #24
 80045b0:	d410      	bmi.n	80045d4 <__swhatbuf_r+0x40>
 80045b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b6:	e00e      	b.n	80045d6 <__swhatbuf_r+0x42>
 80045b8:	466a      	mov	r2, sp
 80045ba:	f000 fcdd 	bl	8004f78 <_fstat_r>
 80045be:	2800      	cmp	r0, #0
 80045c0:	dbf1      	blt.n	80045a6 <__swhatbuf_r+0x12>
 80045c2:	9a01      	ldr	r2, [sp, #4]
 80045c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045cc:	425a      	negs	r2, r3
 80045ce:	415a      	adcs	r2, r3
 80045d0:	602a      	str	r2, [r5, #0]
 80045d2:	e7ee      	b.n	80045b2 <__swhatbuf_r+0x1e>
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	2000      	movs	r0, #0
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	b016      	add	sp, #88	; 0x58
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080045e0 <__smakebuf_r>:
 80045e0:	898b      	ldrh	r3, [r1, #12]
 80045e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045e4:	079d      	lsls	r5, r3, #30
 80045e6:	4606      	mov	r6, r0
 80045e8:	460c      	mov	r4, r1
 80045ea:	d507      	bpl.n	80045fc <__smakebuf_r+0x1c>
 80045ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	6123      	str	r3, [r4, #16]
 80045f4:	2301      	movs	r3, #1
 80045f6:	6163      	str	r3, [r4, #20]
 80045f8:	b002      	add	sp, #8
 80045fa:	bd70      	pop	{r4, r5, r6, pc}
 80045fc:	ab01      	add	r3, sp, #4
 80045fe:	466a      	mov	r2, sp
 8004600:	f7ff ffc8 	bl	8004594 <__swhatbuf_r>
 8004604:	9900      	ldr	r1, [sp, #0]
 8004606:	4605      	mov	r5, r0
 8004608:	4630      	mov	r0, r6
 800460a:	f000 f895 	bl	8004738 <_malloc_r>
 800460e:	b948      	cbnz	r0, 8004624 <__smakebuf_r+0x44>
 8004610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004614:	059a      	lsls	r2, r3, #22
 8004616:	d4ef      	bmi.n	80045f8 <__smakebuf_r+0x18>
 8004618:	f023 0303 	bic.w	r3, r3, #3
 800461c:	f043 0302 	orr.w	r3, r3, #2
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	e7e3      	b.n	80045ec <__smakebuf_r+0xc>
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <__smakebuf_r+0x7c>)
 8004626:	62b3      	str	r3, [r6, #40]	; 0x28
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	6020      	str	r0, [r4, #0]
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	9b00      	ldr	r3, [sp, #0]
 8004634:	6163      	str	r3, [r4, #20]
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	6120      	str	r0, [r4, #16]
 800463a:	b15b      	cbz	r3, 8004654 <__smakebuf_r+0x74>
 800463c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004640:	4630      	mov	r0, r6
 8004642:	f000 fcab 	bl	8004f9c <_isatty_r>
 8004646:	b128      	cbz	r0, 8004654 <__smakebuf_r+0x74>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	89a0      	ldrh	r0, [r4, #12]
 8004656:	4305      	orrs	r5, r0
 8004658:	81a5      	strh	r5, [r4, #12]
 800465a:	e7cd      	b.n	80045f8 <__smakebuf_r+0x18>
 800465c:	080043ed 	.word	0x080043ed

08004660 <_free_r>:
 8004660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004662:	2900      	cmp	r1, #0
 8004664:	d044      	beq.n	80046f0 <_free_r+0x90>
 8004666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466a:	9001      	str	r0, [sp, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f1a1 0404 	sub.w	r4, r1, #4
 8004672:	bfb8      	it	lt
 8004674:	18e4      	addlt	r4, r4, r3
 8004676:	f000 fcb3 	bl	8004fe0 <__malloc_lock>
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <_free_r+0x94>)
 800467c:	9801      	ldr	r0, [sp, #4]
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	b933      	cbnz	r3, 8004690 <_free_r+0x30>
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	6014      	str	r4, [r2, #0]
 8004686:	b003      	add	sp, #12
 8004688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800468c:	f000 bcae 	b.w	8004fec <__malloc_unlock>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d908      	bls.n	80046a6 <_free_r+0x46>
 8004694:	6825      	ldr	r5, [r4, #0]
 8004696:	1961      	adds	r1, r4, r5
 8004698:	428b      	cmp	r3, r1
 800469a:	bf01      	itttt	eq
 800469c:	6819      	ldreq	r1, [r3, #0]
 800469e:	685b      	ldreq	r3, [r3, #4]
 80046a0:	1949      	addeq	r1, r1, r5
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	e7ed      	b.n	8004682 <_free_r+0x22>
 80046a6:	461a      	mov	r2, r3
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b10b      	cbz	r3, 80046b0 <_free_r+0x50>
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	d9fa      	bls.n	80046a6 <_free_r+0x46>
 80046b0:	6811      	ldr	r1, [r2, #0]
 80046b2:	1855      	adds	r5, r2, r1
 80046b4:	42a5      	cmp	r5, r4
 80046b6:	d10b      	bne.n	80046d0 <_free_r+0x70>
 80046b8:	6824      	ldr	r4, [r4, #0]
 80046ba:	4421      	add	r1, r4
 80046bc:	1854      	adds	r4, r2, r1
 80046be:	42a3      	cmp	r3, r4
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	d1e0      	bne.n	8004686 <_free_r+0x26>
 80046c4:	681c      	ldr	r4, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	4421      	add	r1, r4
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	e7da      	b.n	8004686 <_free_r+0x26>
 80046d0:	d902      	bls.n	80046d8 <_free_r+0x78>
 80046d2:	230c      	movs	r3, #12
 80046d4:	6003      	str	r3, [r0, #0]
 80046d6:	e7d6      	b.n	8004686 <_free_r+0x26>
 80046d8:	6825      	ldr	r5, [r4, #0]
 80046da:	1961      	adds	r1, r4, r5
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf04      	itt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	bf04      	itt	eq
 80046e8:	1949      	addeq	r1, r1, r5
 80046ea:	6021      	streq	r1, [r4, #0]
 80046ec:	6054      	str	r4, [r2, #4]
 80046ee:	e7ca      	b.n	8004686 <_free_r+0x26>
 80046f0:	b003      	add	sp, #12
 80046f2:	bd30      	pop	{r4, r5, pc}
 80046f4:	200006c4 	.word	0x200006c4

080046f8 <sbrk_aligned>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4e0e      	ldr	r6, [pc, #56]	; (8004734 <sbrk_aligned+0x3c>)
 80046fc:	460c      	mov	r4, r1
 80046fe:	6831      	ldr	r1, [r6, #0]
 8004700:	4605      	mov	r5, r0
 8004702:	b911      	cbnz	r1, 800470a <sbrk_aligned+0x12>
 8004704:	f000 fbc2 	bl	8004e8c <_sbrk_r>
 8004708:	6030      	str	r0, [r6, #0]
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 fbbd 	bl	8004e8c <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d00a      	beq.n	800472c <sbrk_aligned+0x34>
 8004716:	1cc4      	adds	r4, r0, #3
 8004718:	f024 0403 	bic.w	r4, r4, #3
 800471c:	42a0      	cmp	r0, r4
 800471e:	d007      	beq.n	8004730 <sbrk_aligned+0x38>
 8004720:	1a21      	subs	r1, r4, r0
 8004722:	4628      	mov	r0, r5
 8004724:	f000 fbb2 	bl	8004e8c <_sbrk_r>
 8004728:	3001      	adds	r0, #1
 800472a:	d101      	bne.n	8004730 <sbrk_aligned+0x38>
 800472c:	f04f 34ff 	mov.w	r4, #4294967295
 8004730:	4620      	mov	r0, r4
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	200006c8 	.word	0x200006c8

08004738 <_malloc_r>:
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	1ccd      	adds	r5, r1, #3
 800473e:	f025 0503 	bic.w	r5, r5, #3
 8004742:	3508      	adds	r5, #8
 8004744:	2d0c      	cmp	r5, #12
 8004746:	bf38      	it	cc
 8004748:	250c      	movcc	r5, #12
 800474a:	2d00      	cmp	r5, #0
 800474c:	4607      	mov	r7, r0
 800474e:	db01      	blt.n	8004754 <_malloc_r+0x1c>
 8004750:	42a9      	cmp	r1, r5
 8004752:	d905      	bls.n	8004760 <_malloc_r+0x28>
 8004754:	230c      	movs	r3, #12
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	2600      	movs	r6, #0
 800475a:	4630      	mov	r0, r6
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004760:	4e2e      	ldr	r6, [pc, #184]	; (800481c <_malloc_r+0xe4>)
 8004762:	f000 fc3d 	bl	8004fe0 <__malloc_lock>
 8004766:	6833      	ldr	r3, [r6, #0]
 8004768:	461c      	mov	r4, r3
 800476a:	bb34      	cbnz	r4, 80047ba <_malloc_r+0x82>
 800476c:	4629      	mov	r1, r5
 800476e:	4638      	mov	r0, r7
 8004770:	f7ff ffc2 	bl	80046f8 <sbrk_aligned>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	4604      	mov	r4, r0
 8004778:	d14d      	bne.n	8004816 <_malloc_r+0xde>
 800477a:	6834      	ldr	r4, [r6, #0]
 800477c:	4626      	mov	r6, r4
 800477e:	2e00      	cmp	r6, #0
 8004780:	d140      	bne.n	8004804 <_malloc_r+0xcc>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4631      	mov	r1, r6
 8004786:	4638      	mov	r0, r7
 8004788:	eb04 0803 	add.w	r8, r4, r3
 800478c:	f000 fb7e 	bl	8004e8c <_sbrk_r>
 8004790:	4580      	cmp	r8, r0
 8004792:	d13a      	bne.n	800480a <_malloc_r+0xd2>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	3503      	adds	r5, #3
 8004798:	1a6d      	subs	r5, r5, r1
 800479a:	f025 0503 	bic.w	r5, r5, #3
 800479e:	3508      	adds	r5, #8
 80047a0:	2d0c      	cmp	r5, #12
 80047a2:	bf38      	it	cc
 80047a4:	250c      	movcc	r5, #12
 80047a6:	4629      	mov	r1, r5
 80047a8:	4638      	mov	r0, r7
 80047aa:	f7ff ffa5 	bl	80046f8 <sbrk_aligned>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d02b      	beq.n	800480a <_malloc_r+0xd2>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	442b      	add	r3, r5
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	e00e      	b.n	80047d8 <_malloc_r+0xa0>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	1b52      	subs	r2, r2, r5
 80047be:	d41e      	bmi.n	80047fe <_malloc_r+0xc6>
 80047c0:	2a0b      	cmp	r2, #11
 80047c2:	d916      	bls.n	80047f2 <_malloc_r+0xba>
 80047c4:	1961      	adds	r1, r4, r5
 80047c6:	42a3      	cmp	r3, r4
 80047c8:	6025      	str	r5, [r4, #0]
 80047ca:	bf18      	it	ne
 80047cc:	6059      	strne	r1, [r3, #4]
 80047ce:	6863      	ldr	r3, [r4, #4]
 80047d0:	bf08      	it	eq
 80047d2:	6031      	streq	r1, [r6, #0]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4638      	mov	r0, r7
 80047da:	f104 060b 	add.w	r6, r4, #11
 80047de:	f000 fc05 	bl	8004fec <__malloc_unlock>
 80047e2:	f026 0607 	bic.w	r6, r6, #7
 80047e6:	1d23      	adds	r3, r4, #4
 80047e8:	1af2      	subs	r2, r6, r3
 80047ea:	d0b6      	beq.n	800475a <_malloc_r+0x22>
 80047ec:	1b9b      	subs	r3, r3, r6
 80047ee:	50a3      	str	r3, [r4, r2]
 80047f0:	e7b3      	b.n	800475a <_malloc_r+0x22>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	bf0c      	ite	eq
 80047f8:	6032      	streq	r2, [r6, #0]
 80047fa:	605a      	strne	r2, [r3, #4]
 80047fc:	e7ec      	b.n	80047d8 <_malloc_r+0xa0>
 80047fe:	4623      	mov	r3, r4
 8004800:	6864      	ldr	r4, [r4, #4]
 8004802:	e7b2      	b.n	800476a <_malloc_r+0x32>
 8004804:	4634      	mov	r4, r6
 8004806:	6876      	ldr	r6, [r6, #4]
 8004808:	e7b9      	b.n	800477e <_malloc_r+0x46>
 800480a:	230c      	movs	r3, #12
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4638      	mov	r0, r7
 8004810:	f000 fbec 	bl	8004fec <__malloc_unlock>
 8004814:	e7a1      	b.n	800475a <_malloc_r+0x22>
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	e7de      	b.n	80047d8 <_malloc_r+0xa0>
 800481a:	bf00      	nop
 800481c:	200006c4 	.word	0x200006c4

08004820 <__sfputc_r>:
 8004820:	6893      	ldr	r3, [r2, #8]
 8004822:	3b01      	subs	r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	b410      	push	{r4}
 8004828:	6093      	str	r3, [r2, #8]
 800482a:	da08      	bge.n	800483e <__sfputc_r+0x1e>
 800482c:	6994      	ldr	r4, [r2, #24]
 800482e:	42a3      	cmp	r3, r4
 8004830:	db01      	blt.n	8004836 <__sfputc_r+0x16>
 8004832:	290a      	cmp	r1, #10
 8004834:	d103      	bne.n	800483e <__sfputc_r+0x1e>
 8004836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800483a:	f7ff bc31 	b.w	80040a0 <__swbuf_r>
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	1c58      	adds	r0, r3, #1
 8004842:	6010      	str	r0, [r2, #0]
 8004844:	7019      	strb	r1, [r3, #0]
 8004846:	4608      	mov	r0, r1
 8004848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800484c:	4770      	bx	lr

0800484e <__sfputs_r>:
 800484e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004850:	4606      	mov	r6, r0
 8004852:	460f      	mov	r7, r1
 8004854:	4614      	mov	r4, r2
 8004856:	18d5      	adds	r5, r2, r3
 8004858:	42ac      	cmp	r4, r5
 800485a:	d101      	bne.n	8004860 <__sfputs_r+0x12>
 800485c:	2000      	movs	r0, #0
 800485e:	e007      	b.n	8004870 <__sfputs_r+0x22>
 8004860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004864:	463a      	mov	r2, r7
 8004866:	4630      	mov	r0, r6
 8004868:	f7ff ffda 	bl	8004820 <__sfputc_r>
 800486c:	1c43      	adds	r3, r0, #1
 800486e:	d1f3      	bne.n	8004858 <__sfputs_r+0xa>
 8004870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004874 <_vfiprintf_r>:
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004878:	460d      	mov	r5, r1
 800487a:	b09d      	sub	sp, #116	; 0x74
 800487c:	4614      	mov	r4, r2
 800487e:	4698      	mov	r8, r3
 8004880:	4606      	mov	r6, r0
 8004882:	b118      	cbz	r0, 800488c <_vfiprintf_r+0x18>
 8004884:	6983      	ldr	r3, [r0, #24]
 8004886:	b90b      	cbnz	r3, 800488c <_vfiprintf_r+0x18>
 8004888:	f7ff fde4 	bl	8004454 <__sinit>
 800488c:	4b89      	ldr	r3, [pc, #548]	; (8004ab4 <_vfiprintf_r+0x240>)
 800488e:	429d      	cmp	r5, r3
 8004890:	d11b      	bne.n	80048ca <_vfiprintf_r+0x56>
 8004892:	6875      	ldr	r5, [r6, #4]
 8004894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004896:	07d9      	lsls	r1, r3, #31
 8004898:	d405      	bmi.n	80048a6 <_vfiprintf_r+0x32>
 800489a:	89ab      	ldrh	r3, [r5, #12]
 800489c:	059a      	lsls	r2, r3, #22
 800489e:	d402      	bmi.n	80048a6 <_vfiprintf_r+0x32>
 80048a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048a2:	f7ff fe75 	bl	8004590 <__retarget_lock_acquire_recursive>
 80048a6:	89ab      	ldrh	r3, [r5, #12]
 80048a8:	071b      	lsls	r3, r3, #28
 80048aa:	d501      	bpl.n	80048b0 <_vfiprintf_r+0x3c>
 80048ac:	692b      	ldr	r3, [r5, #16]
 80048ae:	b9eb      	cbnz	r3, 80048ec <_vfiprintf_r+0x78>
 80048b0:	4629      	mov	r1, r5
 80048b2:	4630      	mov	r0, r6
 80048b4:	f7ff fc46 	bl	8004144 <__swsetup_r>
 80048b8:	b1c0      	cbz	r0, 80048ec <_vfiprintf_r+0x78>
 80048ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048bc:	07dc      	lsls	r4, r3, #31
 80048be:	d50e      	bpl.n	80048de <_vfiprintf_r+0x6a>
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	b01d      	add	sp, #116	; 0x74
 80048c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ca:	4b7b      	ldr	r3, [pc, #492]	; (8004ab8 <_vfiprintf_r+0x244>)
 80048cc:	429d      	cmp	r5, r3
 80048ce:	d101      	bne.n	80048d4 <_vfiprintf_r+0x60>
 80048d0:	68b5      	ldr	r5, [r6, #8]
 80048d2:	e7df      	b.n	8004894 <_vfiprintf_r+0x20>
 80048d4:	4b79      	ldr	r3, [pc, #484]	; (8004abc <_vfiprintf_r+0x248>)
 80048d6:	429d      	cmp	r5, r3
 80048d8:	bf08      	it	eq
 80048da:	68f5      	ldreq	r5, [r6, #12]
 80048dc:	e7da      	b.n	8004894 <_vfiprintf_r+0x20>
 80048de:	89ab      	ldrh	r3, [r5, #12]
 80048e0:	0598      	lsls	r0, r3, #22
 80048e2:	d4ed      	bmi.n	80048c0 <_vfiprintf_r+0x4c>
 80048e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048e6:	f7ff fe54 	bl	8004592 <__retarget_lock_release_recursive>
 80048ea:	e7e9      	b.n	80048c0 <_vfiprintf_r+0x4c>
 80048ec:	2300      	movs	r3, #0
 80048ee:	9309      	str	r3, [sp, #36]	; 0x24
 80048f0:	2320      	movs	r3, #32
 80048f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048fa:	2330      	movs	r3, #48	; 0x30
 80048fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ac0 <_vfiprintf_r+0x24c>
 8004900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004904:	f04f 0901 	mov.w	r9, #1
 8004908:	4623      	mov	r3, r4
 800490a:	469a      	mov	sl, r3
 800490c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004910:	b10a      	cbz	r2, 8004916 <_vfiprintf_r+0xa2>
 8004912:	2a25      	cmp	r2, #37	; 0x25
 8004914:	d1f9      	bne.n	800490a <_vfiprintf_r+0x96>
 8004916:	ebba 0b04 	subs.w	fp, sl, r4
 800491a:	d00b      	beq.n	8004934 <_vfiprintf_r+0xc0>
 800491c:	465b      	mov	r3, fp
 800491e:	4622      	mov	r2, r4
 8004920:	4629      	mov	r1, r5
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff ff93 	bl	800484e <__sfputs_r>
 8004928:	3001      	adds	r0, #1
 800492a:	f000 80aa 	beq.w	8004a82 <_vfiprintf_r+0x20e>
 800492e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004930:	445a      	add	r2, fp
 8004932:	9209      	str	r2, [sp, #36]	; 0x24
 8004934:	f89a 3000 	ldrb.w	r3, [sl]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80a2 	beq.w	8004a82 <_vfiprintf_r+0x20e>
 800493e:	2300      	movs	r3, #0
 8004940:	f04f 32ff 	mov.w	r2, #4294967295
 8004944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004948:	f10a 0a01 	add.w	sl, sl, #1
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	9307      	str	r3, [sp, #28]
 8004950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004954:	931a      	str	r3, [sp, #104]	; 0x68
 8004956:	4654      	mov	r4, sl
 8004958:	2205      	movs	r2, #5
 800495a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495e:	4858      	ldr	r0, [pc, #352]	; (8004ac0 <_vfiprintf_r+0x24c>)
 8004960:	f7fb fc46 	bl	80001f0 <memchr>
 8004964:	9a04      	ldr	r2, [sp, #16]
 8004966:	b9d8      	cbnz	r0, 80049a0 <_vfiprintf_r+0x12c>
 8004968:	06d1      	lsls	r1, r2, #27
 800496a:	bf44      	itt	mi
 800496c:	2320      	movmi	r3, #32
 800496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004972:	0713      	lsls	r3, r2, #28
 8004974:	bf44      	itt	mi
 8004976:	232b      	movmi	r3, #43	; 0x2b
 8004978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497c:	f89a 3000 	ldrb.w	r3, [sl]
 8004980:	2b2a      	cmp	r3, #42	; 0x2a
 8004982:	d015      	beq.n	80049b0 <_vfiprintf_r+0x13c>
 8004984:	9a07      	ldr	r2, [sp, #28]
 8004986:	4654      	mov	r4, sl
 8004988:	2000      	movs	r0, #0
 800498a:	f04f 0c0a 	mov.w	ip, #10
 800498e:	4621      	mov	r1, r4
 8004990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004994:	3b30      	subs	r3, #48	; 0x30
 8004996:	2b09      	cmp	r3, #9
 8004998:	d94e      	bls.n	8004a38 <_vfiprintf_r+0x1c4>
 800499a:	b1b0      	cbz	r0, 80049ca <_vfiprintf_r+0x156>
 800499c:	9207      	str	r2, [sp, #28]
 800499e:	e014      	b.n	80049ca <_vfiprintf_r+0x156>
 80049a0:	eba0 0308 	sub.w	r3, r0, r8
 80049a4:	fa09 f303 	lsl.w	r3, r9, r3
 80049a8:	4313      	orrs	r3, r2
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	46a2      	mov	sl, r4
 80049ae:	e7d2      	b.n	8004956 <_vfiprintf_r+0xe2>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	1d19      	adds	r1, r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9103      	str	r1, [sp, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bfbb      	ittet	lt
 80049bc:	425b      	neglt	r3, r3
 80049be:	f042 0202 	orrlt.w	r2, r2, #2
 80049c2:	9307      	strge	r3, [sp, #28]
 80049c4:	9307      	strlt	r3, [sp, #28]
 80049c6:	bfb8      	it	lt
 80049c8:	9204      	strlt	r2, [sp, #16]
 80049ca:	7823      	ldrb	r3, [r4, #0]
 80049cc:	2b2e      	cmp	r3, #46	; 0x2e
 80049ce:	d10c      	bne.n	80049ea <_vfiprintf_r+0x176>
 80049d0:	7863      	ldrb	r3, [r4, #1]
 80049d2:	2b2a      	cmp	r3, #42	; 0x2a
 80049d4:	d135      	bne.n	8004a42 <_vfiprintf_r+0x1ce>
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	9203      	str	r2, [sp, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bfb8      	it	lt
 80049e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e6:	3402      	adds	r4, #2
 80049e8:	9305      	str	r3, [sp, #20]
 80049ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004ad0 <_vfiprintf_r+0x25c>
 80049ee:	7821      	ldrb	r1, [r4, #0]
 80049f0:	2203      	movs	r2, #3
 80049f2:	4650      	mov	r0, sl
 80049f4:	f7fb fbfc 	bl	80001f0 <memchr>
 80049f8:	b140      	cbz	r0, 8004a0c <_vfiprintf_r+0x198>
 80049fa:	2340      	movs	r3, #64	; 0x40
 80049fc:	eba0 000a 	sub.w	r0, r0, sl
 8004a00:	fa03 f000 	lsl.w	r0, r3, r0
 8004a04:	9b04      	ldr	r3, [sp, #16]
 8004a06:	4303      	orrs	r3, r0
 8004a08:	3401      	adds	r4, #1
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a10:	482c      	ldr	r0, [pc, #176]	; (8004ac4 <_vfiprintf_r+0x250>)
 8004a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a16:	2206      	movs	r2, #6
 8004a18:	f7fb fbea 	bl	80001f0 <memchr>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d03f      	beq.n	8004aa0 <_vfiprintf_r+0x22c>
 8004a20:	4b29      	ldr	r3, [pc, #164]	; (8004ac8 <_vfiprintf_r+0x254>)
 8004a22:	bb1b      	cbnz	r3, 8004a6c <_vfiprintf_r+0x1f8>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	3307      	adds	r3, #7
 8004a28:	f023 0307 	bic.w	r3, r3, #7
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a32:	443b      	add	r3, r7
 8004a34:	9309      	str	r3, [sp, #36]	; 0x24
 8004a36:	e767      	b.n	8004908 <_vfiprintf_r+0x94>
 8004a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	2001      	movs	r0, #1
 8004a40:	e7a5      	b.n	800498e <_vfiprintf_r+0x11a>
 8004a42:	2300      	movs	r3, #0
 8004a44:	3401      	adds	r4, #1
 8004a46:	9305      	str	r3, [sp, #20]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f04f 0c0a 	mov.w	ip, #10
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a54:	3a30      	subs	r2, #48	; 0x30
 8004a56:	2a09      	cmp	r2, #9
 8004a58:	d903      	bls.n	8004a62 <_vfiprintf_r+0x1ee>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0c5      	beq.n	80049ea <_vfiprintf_r+0x176>
 8004a5e:	9105      	str	r1, [sp, #20]
 8004a60:	e7c3      	b.n	80049ea <_vfiprintf_r+0x176>
 8004a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a66:	4604      	mov	r4, r0
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e7f0      	b.n	8004a4e <_vfiprintf_r+0x1da>
 8004a6c:	ab03      	add	r3, sp, #12
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	462a      	mov	r2, r5
 8004a72:	4b16      	ldr	r3, [pc, #88]	; (8004acc <_vfiprintf_r+0x258>)
 8004a74:	a904      	add	r1, sp, #16
 8004a76:	4630      	mov	r0, r6
 8004a78:	f3af 8000 	nop.w
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	1c78      	adds	r0, r7, #1
 8004a80:	d1d6      	bne.n	8004a30 <_vfiprintf_r+0x1bc>
 8004a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a84:	07d9      	lsls	r1, r3, #31
 8004a86:	d405      	bmi.n	8004a94 <_vfiprintf_r+0x220>
 8004a88:	89ab      	ldrh	r3, [r5, #12]
 8004a8a:	059a      	lsls	r2, r3, #22
 8004a8c:	d402      	bmi.n	8004a94 <_vfiprintf_r+0x220>
 8004a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a90:	f7ff fd7f 	bl	8004592 <__retarget_lock_release_recursive>
 8004a94:	89ab      	ldrh	r3, [r5, #12]
 8004a96:	065b      	lsls	r3, r3, #25
 8004a98:	f53f af12 	bmi.w	80048c0 <_vfiprintf_r+0x4c>
 8004a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a9e:	e711      	b.n	80048c4 <_vfiprintf_r+0x50>
 8004aa0:	ab03      	add	r3, sp, #12
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <_vfiprintf_r+0x258>)
 8004aa8:	a904      	add	r1, sp, #16
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f000 f880 	bl	8004bb0 <_printf_i>
 8004ab0:	e7e4      	b.n	8004a7c <_vfiprintf_r+0x208>
 8004ab2:	bf00      	nop
 8004ab4:	08005368 	.word	0x08005368
 8004ab8:	08005388 	.word	0x08005388
 8004abc:	08005348 	.word	0x08005348
 8004ac0:	080053a8 	.word	0x080053a8
 8004ac4:	080053b2 	.word	0x080053b2
 8004ac8:	00000000 	.word	0x00000000
 8004acc:	0800484f 	.word	0x0800484f
 8004ad0:	080053ae 	.word	0x080053ae

08004ad4 <_printf_common>:
 8004ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	4616      	mov	r6, r2
 8004ada:	4699      	mov	r9, r3
 8004adc:	688a      	ldr	r2, [r1, #8]
 8004ade:	690b      	ldr	r3, [r1, #16]
 8004ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bfb8      	it	lt
 8004ae8:	4613      	movlt	r3, r2
 8004aea:	6033      	str	r3, [r6, #0]
 8004aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af0:	4607      	mov	r7, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	b10a      	cbz	r2, 8004afa <_printf_common+0x26>
 8004af6:	3301      	adds	r3, #1
 8004af8:	6033      	str	r3, [r6, #0]
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	0699      	lsls	r1, r3, #26
 8004afe:	bf42      	ittt	mi
 8004b00:	6833      	ldrmi	r3, [r6, #0]
 8004b02:	3302      	addmi	r3, #2
 8004b04:	6033      	strmi	r3, [r6, #0]
 8004b06:	6825      	ldr	r5, [r4, #0]
 8004b08:	f015 0506 	ands.w	r5, r5, #6
 8004b0c:	d106      	bne.n	8004b1c <_printf_common+0x48>
 8004b0e:	f104 0a19 	add.w	sl, r4, #25
 8004b12:	68e3      	ldr	r3, [r4, #12]
 8004b14:	6832      	ldr	r2, [r6, #0]
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	42ab      	cmp	r3, r5
 8004b1a:	dc26      	bgt.n	8004b6a <_printf_common+0x96>
 8004b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b20:	1e13      	subs	r3, r2, #0
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	bf18      	it	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	0692      	lsls	r2, r2, #26
 8004b2a:	d42b      	bmi.n	8004b84 <_printf_common+0xb0>
 8004b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d01e      	beq.n	8004b78 <_printf_common+0xa4>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	68e5      	ldr	r5, [r4, #12]
 8004b3e:	6832      	ldr	r2, [r6, #0]
 8004b40:	f003 0306 	and.w	r3, r3, #6
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	bf08      	it	eq
 8004b48:	1aad      	subeq	r5, r5, r2
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	6922      	ldr	r2, [r4, #16]
 8004b4e:	bf0c      	ite	eq
 8004b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b54:	2500      	movne	r5, #0
 8004b56:	4293      	cmp	r3, r2
 8004b58:	bfc4      	itt	gt
 8004b5a:	1a9b      	subgt	r3, r3, r2
 8004b5c:	18ed      	addgt	r5, r5, r3
 8004b5e:	2600      	movs	r6, #0
 8004b60:	341a      	adds	r4, #26
 8004b62:	42b5      	cmp	r5, r6
 8004b64:	d11a      	bne.n	8004b9c <_printf_common+0xc8>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e008      	b.n	8004b7c <_printf_common+0xa8>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4652      	mov	r2, sl
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4638      	mov	r0, r7
 8004b72:	47c0      	blx	r8
 8004b74:	3001      	adds	r0, #1
 8004b76:	d103      	bne.n	8004b80 <_printf_common+0xac>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7c6      	b.n	8004b12 <_printf_common+0x3e>
 8004b84:	18e1      	adds	r1, r4, r3
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	2030      	movs	r0, #48	; 0x30
 8004b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b8e:	4422      	add	r2, r4
 8004b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b98:	3302      	adds	r3, #2
 8004b9a:	e7c7      	b.n	8004b2c <_printf_common+0x58>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	47c0      	blx	r8
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d0e6      	beq.n	8004b78 <_printf_common+0xa4>
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7d9      	b.n	8004b62 <_printf_common+0x8e>
	...

08004bb0 <_printf_i>:
 8004bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	7e0f      	ldrb	r7, [r1, #24]
 8004bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb8:	2f78      	cmp	r7, #120	; 0x78
 8004bba:	4691      	mov	r9, r2
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	469a      	mov	sl, r3
 8004bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bc6:	d807      	bhi.n	8004bd8 <_printf_i+0x28>
 8004bc8:	2f62      	cmp	r7, #98	; 0x62
 8004bca:	d80a      	bhi.n	8004be2 <_printf_i+0x32>
 8004bcc:	2f00      	cmp	r7, #0
 8004bce:	f000 80d8 	beq.w	8004d82 <_printf_i+0x1d2>
 8004bd2:	2f58      	cmp	r7, #88	; 0x58
 8004bd4:	f000 80a3 	beq.w	8004d1e <_printf_i+0x16e>
 8004bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004be0:	e03a      	b.n	8004c58 <_printf_i+0xa8>
 8004be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004be6:	2b15      	cmp	r3, #21
 8004be8:	d8f6      	bhi.n	8004bd8 <_printf_i+0x28>
 8004bea:	a101      	add	r1, pc, #4	; (adr r1, 8004bf0 <_printf_i+0x40>)
 8004bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bf0:	08004c49 	.word	0x08004c49
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004bd9 	.word	0x08004bd9
 8004bfc:	08004bd9 	.word	0x08004bd9
 8004c00:	08004bd9 	.word	0x08004bd9
 8004c04:	08004bd9 	.word	0x08004bd9
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004bd9 	.word	0x08004bd9
 8004c10:	08004bd9 	.word	0x08004bd9
 8004c14:	08004bd9 	.word	0x08004bd9
 8004c18:	08004bd9 	.word	0x08004bd9
 8004c1c:	08004d69 	.word	0x08004d69
 8004c20:	08004c8d 	.word	0x08004c8d
 8004c24:	08004d4b 	.word	0x08004d4b
 8004c28:	08004bd9 	.word	0x08004bd9
 8004c2c:	08004bd9 	.word	0x08004bd9
 8004c30:	08004d8b 	.word	0x08004d8b
 8004c34:	08004bd9 	.word	0x08004bd9
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004bd9 	.word	0x08004bd9
 8004c40:	08004bd9 	.word	0x08004bd9
 8004c44:	08004d53 	.word	0x08004d53
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	602a      	str	r2, [r5, #0]
 8004c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0a3      	b.n	8004da4 <_printf_i+0x1f4>
 8004c5c:	6820      	ldr	r0, [r4, #0]
 8004c5e:	6829      	ldr	r1, [r5, #0]
 8004c60:	0606      	lsls	r6, r0, #24
 8004c62:	f101 0304 	add.w	r3, r1, #4
 8004c66:	d50a      	bpl.n	8004c7e <_printf_i+0xce>
 8004c68:	680e      	ldr	r6, [r1, #0]
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	2e00      	cmp	r6, #0
 8004c6e:	da03      	bge.n	8004c78 <_printf_i+0xc8>
 8004c70:	232d      	movs	r3, #45	; 0x2d
 8004c72:	4276      	negs	r6, r6
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c78:	485e      	ldr	r0, [pc, #376]	; (8004df4 <_printf_i+0x244>)
 8004c7a:	230a      	movs	r3, #10
 8004c7c:	e019      	b.n	8004cb2 <_printf_i+0x102>
 8004c7e:	680e      	ldr	r6, [r1, #0]
 8004c80:	602b      	str	r3, [r5, #0]
 8004c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c86:	bf18      	it	ne
 8004c88:	b236      	sxthne	r6, r6
 8004c8a:	e7ef      	b.n	8004c6c <_printf_i+0xbc>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	6820      	ldr	r0, [r4, #0]
 8004c90:	1d19      	adds	r1, r3, #4
 8004c92:	6029      	str	r1, [r5, #0]
 8004c94:	0601      	lsls	r1, r0, #24
 8004c96:	d501      	bpl.n	8004c9c <_printf_i+0xec>
 8004c98:	681e      	ldr	r6, [r3, #0]
 8004c9a:	e002      	b.n	8004ca2 <_printf_i+0xf2>
 8004c9c:	0646      	lsls	r6, r0, #25
 8004c9e:	d5fb      	bpl.n	8004c98 <_printf_i+0xe8>
 8004ca0:	881e      	ldrh	r6, [r3, #0]
 8004ca2:	4854      	ldr	r0, [pc, #336]	; (8004df4 <_printf_i+0x244>)
 8004ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ca6:	bf0c      	ite	eq
 8004ca8:	2308      	moveq	r3, #8
 8004caa:	230a      	movne	r3, #10
 8004cac:	2100      	movs	r1, #0
 8004cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cb2:	6865      	ldr	r5, [r4, #4]
 8004cb4:	60a5      	str	r5, [r4, #8]
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	bfa2      	ittt	ge
 8004cba:	6821      	ldrge	r1, [r4, #0]
 8004cbc:	f021 0104 	bicge.w	r1, r1, #4
 8004cc0:	6021      	strge	r1, [r4, #0]
 8004cc2:	b90e      	cbnz	r6, 8004cc8 <_printf_i+0x118>
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	d04d      	beq.n	8004d64 <_printf_i+0x1b4>
 8004cc8:	4615      	mov	r5, r2
 8004cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cce:	fb03 6711 	mls	r7, r3, r1, r6
 8004cd2:	5dc7      	ldrb	r7, [r0, r7]
 8004cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cd8:	4637      	mov	r7, r6
 8004cda:	42bb      	cmp	r3, r7
 8004cdc:	460e      	mov	r6, r1
 8004cde:	d9f4      	bls.n	8004cca <_printf_i+0x11a>
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d10b      	bne.n	8004cfc <_printf_i+0x14c>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	07de      	lsls	r6, r3, #31
 8004ce8:	d508      	bpl.n	8004cfc <_printf_i+0x14c>
 8004cea:	6923      	ldr	r3, [r4, #16]
 8004cec:	6861      	ldr	r1, [r4, #4]
 8004cee:	4299      	cmp	r1, r3
 8004cf0:	bfde      	ittt	le
 8004cf2:	2330      	movle	r3, #48	; 0x30
 8004cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cfc:	1b52      	subs	r2, r2, r5
 8004cfe:	6122      	str	r2, [r4, #16]
 8004d00:	f8cd a000 	str.w	sl, [sp]
 8004d04:	464b      	mov	r3, r9
 8004d06:	aa03      	add	r2, sp, #12
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	f7ff fee2 	bl	8004ad4 <_printf_common>
 8004d10:	3001      	adds	r0, #1
 8004d12:	d14c      	bne.n	8004dae <_printf_i+0x1fe>
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	b004      	add	sp, #16
 8004d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1e:	4835      	ldr	r0, [pc, #212]	; (8004df4 <_printf_i+0x244>)
 8004d20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d24:	6829      	ldr	r1, [r5, #0]
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d2c:	6029      	str	r1, [r5, #0]
 8004d2e:	061d      	lsls	r5, r3, #24
 8004d30:	d514      	bpl.n	8004d5c <_printf_i+0x1ac>
 8004d32:	07df      	lsls	r7, r3, #31
 8004d34:	bf44      	itt	mi
 8004d36:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3a:	6023      	strmi	r3, [r4, #0]
 8004d3c:	b91e      	cbnz	r6, 8004d46 <_printf_i+0x196>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f023 0320 	bic.w	r3, r3, #32
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	2310      	movs	r3, #16
 8004d48:	e7b0      	b.n	8004cac <_printf_i+0xfc>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	f043 0320 	orr.w	r3, r3, #32
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	2378      	movs	r3, #120	; 0x78
 8004d54:	4828      	ldr	r0, [pc, #160]	; (8004df8 <_printf_i+0x248>)
 8004d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d5a:	e7e3      	b.n	8004d24 <_printf_i+0x174>
 8004d5c:	0659      	lsls	r1, r3, #25
 8004d5e:	bf48      	it	mi
 8004d60:	b2b6      	uxthmi	r6, r6
 8004d62:	e7e6      	b.n	8004d32 <_printf_i+0x182>
 8004d64:	4615      	mov	r5, r2
 8004d66:	e7bb      	b.n	8004ce0 <_printf_i+0x130>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	6826      	ldr	r6, [r4, #0]
 8004d6c:	6961      	ldr	r1, [r4, #20]
 8004d6e:	1d18      	adds	r0, r3, #4
 8004d70:	6028      	str	r0, [r5, #0]
 8004d72:	0635      	lsls	r5, r6, #24
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	d501      	bpl.n	8004d7c <_printf_i+0x1cc>
 8004d78:	6019      	str	r1, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <_printf_i+0x1d2>
 8004d7c:	0670      	lsls	r0, r6, #25
 8004d7e:	d5fb      	bpl.n	8004d78 <_printf_i+0x1c8>
 8004d80:	8019      	strh	r1, [r3, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	6123      	str	r3, [r4, #16]
 8004d86:	4615      	mov	r5, r2
 8004d88:	e7ba      	b.n	8004d00 <_printf_i+0x150>
 8004d8a:	682b      	ldr	r3, [r5, #0]
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	602a      	str	r2, [r5, #0]
 8004d90:	681d      	ldr	r5, [r3, #0]
 8004d92:	6862      	ldr	r2, [r4, #4]
 8004d94:	2100      	movs	r1, #0
 8004d96:	4628      	mov	r0, r5
 8004d98:	f7fb fa2a 	bl	80001f0 <memchr>
 8004d9c:	b108      	cbz	r0, 8004da2 <_printf_i+0x1f2>
 8004d9e:	1b40      	subs	r0, r0, r5
 8004da0:	6060      	str	r0, [r4, #4]
 8004da2:	6863      	ldr	r3, [r4, #4]
 8004da4:	6123      	str	r3, [r4, #16]
 8004da6:	2300      	movs	r3, #0
 8004da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dac:	e7a8      	b.n	8004d00 <_printf_i+0x150>
 8004dae:	6923      	ldr	r3, [r4, #16]
 8004db0:	462a      	mov	r2, r5
 8004db2:	4649      	mov	r1, r9
 8004db4:	4640      	mov	r0, r8
 8004db6:	47d0      	blx	sl
 8004db8:	3001      	adds	r0, #1
 8004dba:	d0ab      	beq.n	8004d14 <_printf_i+0x164>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	079b      	lsls	r3, r3, #30
 8004dc0:	d413      	bmi.n	8004dea <_printf_i+0x23a>
 8004dc2:	68e0      	ldr	r0, [r4, #12]
 8004dc4:	9b03      	ldr	r3, [sp, #12]
 8004dc6:	4298      	cmp	r0, r3
 8004dc8:	bfb8      	it	lt
 8004dca:	4618      	movlt	r0, r3
 8004dcc:	e7a4      	b.n	8004d18 <_printf_i+0x168>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	47d0      	blx	sl
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d09b      	beq.n	8004d14 <_printf_i+0x164>
 8004ddc:	3501      	adds	r5, #1
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	9903      	ldr	r1, [sp, #12]
 8004de2:	1a5b      	subs	r3, r3, r1
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dcf2      	bgt.n	8004dce <_printf_i+0x21e>
 8004de8:	e7eb      	b.n	8004dc2 <_printf_i+0x212>
 8004dea:	2500      	movs	r5, #0
 8004dec:	f104 0619 	add.w	r6, r4, #25
 8004df0:	e7f5      	b.n	8004dde <_printf_i+0x22e>
 8004df2:	bf00      	nop
 8004df4:	080053b9 	.word	0x080053b9
 8004df8:	080053ca 	.word	0x080053ca

08004dfc <_putc_r>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	460d      	mov	r5, r1
 8004e00:	4614      	mov	r4, r2
 8004e02:	4606      	mov	r6, r0
 8004e04:	b118      	cbz	r0, 8004e0e <_putc_r+0x12>
 8004e06:	6983      	ldr	r3, [r0, #24]
 8004e08:	b90b      	cbnz	r3, 8004e0e <_putc_r+0x12>
 8004e0a:	f7ff fb23 	bl	8004454 <__sinit>
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <_putc_r+0x84>)
 8004e10:	429c      	cmp	r4, r3
 8004e12:	d124      	bne.n	8004e5e <_putc_r+0x62>
 8004e14:	6874      	ldr	r4, [r6, #4]
 8004e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e18:	07d8      	lsls	r0, r3, #31
 8004e1a:	d405      	bmi.n	8004e28 <_putc_r+0x2c>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	0599      	lsls	r1, r3, #22
 8004e20:	d402      	bmi.n	8004e28 <_putc_r+0x2c>
 8004e22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e24:	f7ff fbb4 	bl	8004590 <__retarget_lock_acquire_recursive>
 8004e28:	68a3      	ldr	r3, [r4, #8]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	60a3      	str	r3, [r4, #8]
 8004e30:	da05      	bge.n	8004e3e <_putc_r+0x42>
 8004e32:	69a2      	ldr	r2, [r4, #24]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	db1c      	blt.n	8004e72 <_putc_r+0x76>
 8004e38:	b2eb      	uxtb	r3, r5
 8004e3a:	2b0a      	cmp	r3, #10
 8004e3c:	d019      	beq.n	8004e72 <_putc_r+0x76>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	6022      	str	r2, [r4, #0]
 8004e44:	701d      	strb	r5, [r3, #0]
 8004e46:	b2ed      	uxtb	r5, r5
 8004e48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e4a:	07da      	lsls	r2, r3, #31
 8004e4c:	d405      	bmi.n	8004e5a <_putc_r+0x5e>
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	059b      	lsls	r3, r3, #22
 8004e52:	d402      	bmi.n	8004e5a <_putc_r+0x5e>
 8004e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e56:	f7ff fb9c 	bl	8004592 <__retarget_lock_release_recursive>
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <_putc_r+0x88>)
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d101      	bne.n	8004e68 <_putc_r+0x6c>
 8004e64:	68b4      	ldr	r4, [r6, #8]
 8004e66:	e7d6      	b.n	8004e16 <_putc_r+0x1a>
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <_putc_r+0x8c>)
 8004e6a:	429c      	cmp	r4, r3
 8004e6c:	bf08      	it	eq
 8004e6e:	68f4      	ldreq	r4, [r6, #12]
 8004e70:	e7d1      	b.n	8004e16 <_putc_r+0x1a>
 8004e72:	4629      	mov	r1, r5
 8004e74:	4622      	mov	r2, r4
 8004e76:	4630      	mov	r0, r6
 8004e78:	f7ff f912 	bl	80040a0 <__swbuf_r>
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	e7e3      	b.n	8004e48 <_putc_r+0x4c>
 8004e80:	08005368 	.word	0x08005368
 8004e84:	08005388 	.word	0x08005388
 8004e88:	08005348 	.word	0x08005348

08004e8c <_sbrk_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4d06      	ldr	r5, [pc, #24]	; (8004ea8 <_sbrk_r+0x1c>)
 8004e90:	2300      	movs	r3, #0
 8004e92:	4604      	mov	r4, r0
 8004e94:	4608      	mov	r0, r1
 8004e96:	602b      	str	r3, [r5, #0]
 8004e98:	f7fc f9b6 	bl	8001208 <_sbrk>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_sbrk_r+0x1a>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_sbrk_r+0x1a>
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	200006cc 	.word	0x200006cc

08004eac <__sread>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	460c      	mov	r4, r1
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	f000 f8a0 	bl	8004ff8 <_read_r>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	bfab      	itete	ge
 8004ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8004ec0:	181b      	addge	r3, r3, r0
 8004ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ec6:	bfac      	ite	ge
 8004ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004eca:	81a3      	strhlt	r3, [r4, #12]
 8004ecc:	bd10      	pop	{r4, pc}

08004ece <__swrite>:
 8004ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	461f      	mov	r7, r3
 8004ed4:	898b      	ldrh	r3, [r1, #12]
 8004ed6:	05db      	lsls	r3, r3, #23
 8004ed8:	4605      	mov	r5, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	4616      	mov	r6, r2
 8004ede:	d505      	bpl.n	8004eec <__swrite+0x1e>
 8004ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f000 f868 	bl	8004fbc <_lseek_r>
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	4632      	mov	r2, r6
 8004efa:	463b      	mov	r3, r7
 8004efc:	4628      	mov	r0, r5
 8004efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	f000 b817 	b.w	8004f34 <_write_r>

08004f06 <__sseek>:
 8004f06:	b510      	push	{r4, lr}
 8004f08:	460c      	mov	r4, r1
 8004f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0e:	f000 f855 	bl	8004fbc <_lseek_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	bf15      	itete	ne
 8004f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f22:	81a3      	strheq	r3, [r4, #12]
 8004f24:	bf18      	it	ne
 8004f26:	81a3      	strhne	r3, [r4, #12]
 8004f28:	bd10      	pop	{r4, pc}

08004f2a <__sclose>:
 8004f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2e:	f000 b813 	b.w	8004f58 <_close_r>
	...

08004f34 <_write_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4d07      	ldr	r5, [pc, #28]	; (8004f54 <_write_r+0x20>)
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4608      	mov	r0, r1
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	2200      	movs	r2, #0
 8004f40:	602a      	str	r2, [r5, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f7fc f90f 	bl	8001166 <_write>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	d102      	bne.n	8004f52 <_write_r+0x1e>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	b103      	cbz	r3, 8004f52 <_write_r+0x1e>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd38      	pop	{r3, r4, r5, pc}
 8004f54:	200006cc 	.word	0x200006cc

08004f58 <_close_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4d06      	ldr	r5, [pc, #24]	; (8004f74 <_close_r+0x1c>)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	f7fc f91b 	bl	800119e <_close>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_close_r+0x1a>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_close_r+0x1a>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	200006cc 	.word	0x200006cc

08004f78 <_fstat_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d07      	ldr	r5, [pc, #28]	; (8004f98 <_fstat_r+0x20>)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4608      	mov	r0, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	602b      	str	r3, [r5, #0]
 8004f86:	f7fc f916 	bl	80011b6 <_fstat>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	d102      	bne.n	8004f94 <_fstat_r+0x1c>
 8004f8e:	682b      	ldr	r3, [r5, #0]
 8004f90:	b103      	cbz	r3, 8004f94 <_fstat_r+0x1c>
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	bd38      	pop	{r3, r4, r5, pc}
 8004f96:	bf00      	nop
 8004f98:	200006cc 	.word	0x200006cc

08004f9c <_isatty_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d06      	ldr	r5, [pc, #24]	; (8004fb8 <_isatty_r+0x1c>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fc f915 	bl	80011d6 <_isatty>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_isatty_r+0x1a>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_isatty_r+0x1a>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	200006cc 	.word	0x200006cc

08004fbc <_lseek_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d07      	ldr	r5, [pc, #28]	; (8004fdc <_lseek_r+0x20>)
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	4608      	mov	r0, r1
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	602a      	str	r2, [r5, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f7fc f90e 	bl	80011ec <_lseek>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_lseek_r+0x1e>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_lseek_r+0x1e>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	200006cc 	.word	0x200006cc

08004fe0 <__malloc_lock>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	; (8004fe8 <__malloc_lock+0x8>)
 8004fe2:	f7ff bad5 	b.w	8004590 <__retarget_lock_acquire_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	200006c0 	.word	0x200006c0

08004fec <__malloc_unlock>:
 8004fec:	4801      	ldr	r0, [pc, #4]	; (8004ff4 <__malloc_unlock+0x8>)
 8004fee:	f7ff bad0 	b.w	8004592 <__retarget_lock_release_recursive>
 8004ff2:	bf00      	nop
 8004ff4:	200006c0 	.word	0x200006c0

08004ff8 <_read_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d07      	ldr	r5, [pc, #28]	; (8005018 <_read_r+0x20>)
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	4608      	mov	r0, r1
 8005000:	4611      	mov	r1, r2
 8005002:	2200      	movs	r2, #0
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	f7fc f890 	bl	800112c <_read>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_read_r+0x1e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_read_r+0x1e>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200006cc 	.word	0x200006cc

0800501c <_init>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr

08005028 <_fini>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

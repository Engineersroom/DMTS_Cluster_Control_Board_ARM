
Cluster_Control_V01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df8  08004df8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e00  08004e00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000005f4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000664  20000664  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaeb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fa  00000000  00000000  0002eb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00030c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  000318f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240a1  00000000  00000000  000324a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e1ba  00000000  00000000  00056541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6f78  00000000  00000000  000646fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b673  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c04  00000000  00000000  0013b6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b88 	.word	0x08004b88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004b88 	.word	0x08004b88

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <__io_putchar+0x20>)
 80005a6:	f001 ff8d 	bl	80024c4 <HAL_UART_Transmit>
return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fcf7 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f875 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f96b 	bl	80008a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 f911 	bl	80007f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ce:	f000 f939 	bl	8000844 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005d2:	f000 f8d7 	bl	8000784 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &UART_RX_data,data_length);
 80005d6:	2214      	movs	r2, #20
 80005d8:	4929      	ldr	r1, [pc, #164]	; (8000680 <main+0xc8>)
 80005da:	482a      	ldr	r0, [pc, #168]	; (8000684 <main+0xcc>)
 80005dc:	f002 f804 	bl	80025e8 <HAL_UART_Receive_IT>

  printf("\r\n----------------------------------------------------------------- \r\n");
 80005e0:	4829      	ldr	r0, [pc, #164]	; (8000688 <main+0xd0>)
 80005e2:	f003 fb53 	bl	8003c8c <puts>
  printf("Version 2022, 10, 06 Cluster Control Board Ver 0.0.3 \r\n");
 80005e6:	4829      	ldr	r0, [pc, #164]	; (800068c <main+0xd4>)
 80005e8:	f003 fb50 	bl	8003c8c <puts>
  printf("0.0.1 Labview Communication Test Checked Labview RX\r\n");
 80005ec:	4828      	ldr	r0, [pc, #160]	; (8000690 <main+0xd8>)
 80005ee:	f003 fb4d 	bl	8003c8c <puts>
  printf("0.0.2 Labview Communication Test Checked Labview TX\r\n");
 80005f2:	4828      	ldr	r0, [pc, #160]	; (8000694 <main+0xdc>)
 80005f4:	f003 fb4a 	bl	8003c8c <puts>
  printf("0.0.3 Labview Communication Test Checking Data Parsing Test \r\n");
 80005f8:	4827      	ldr	r0, [pc, #156]	; (8000698 <main+0xe0>)
 80005fa:	f003 fb47 	bl	8003c8c <puts>
  printf("----------------------------------------------------------------- \r\n");
 80005fe:	4827      	ldr	r0, [pc, #156]	; (800069c <main+0xe4>)
 8000600:	f003 fb44 	bl	8003c8c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    HAL_Delay(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 fd44 	bl	8001094 <HAL_Delay>
    printf("code %d end\r\n",cnt++);
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <main+0xe8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	4923      	ldr	r1, [pc, #140]	; (80006a0 <main+0xe8>)
 8000614:	600a      	str	r2, [r1, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	4822      	ldr	r0, [pc, #136]	; (80006a4 <main+0xec>)
 800061a:	f003 fab1 	bl	8003b80 <iprintf>
    //printf("Last Input %s \r\n",UART_RX_data);
    HAL_Delay(5);
 800061e:	2005      	movs	r0, #5
 8000620:	f000 fd38 	bl	8001094 <HAL_Delay>
    for (int n = 0 ; n < 20 ; n++)
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	e00b      	b.n	8000642 <main+0x8a>
    {
      printf("UART_RX_data[%d] : %c \r\n",n,UART_RX_data[n]);
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <main+0xc8>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <main+0xf0>)
 8000638:	f003 faa2 	bl	8003b80 <iprintf>
    for (int n = 0 ; n < 20 ; n++)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3301      	adds	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2b13      	cmp	r3, #19
 8000646:	ddf0      	ble.n	800062a <main+0x72>
    }

    for (int n = 0 ; n < 20 ; n++)
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	e014      	b.n	8000678 <main+0xc0>
    {
      if (UART_RX_data[n] == '+')
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <main+0xc8>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b2b      	cmp	r3, #43	; 0x2b
 8000658:	d10b      	bne.n	8000672 <main+0xba>
      {
        if ( (n+7) < 20)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b0c      	cmp	r3, #12
 800065e:	dc08      	bgt.n	8000672 <main+0xba>
        {
          if(UART_RX_data[n+7] =='#')
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	3307      	adds	r3, #7
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <main+0xc8>)
 8000666:	5cd3      	ldrb	r3, [r2, r3]
 8000668:	2b23      	cmp	r3, #35	; 0x23
 800066a:	d102      	bne.n	8000672 <main+0xba>
          printf("OK \r\n");
 800066c:	480f      	ldr	r0, [pc, #60]	; (80006ac <main+0xf4>)
 800066e:	f003 fb0d 	bl	8003c8c <puts>
    for (int n = 0 ; n < 20 ; n++)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	2b13      	cmp	r3, #19
 800067c:	dde7      	ble.n	800064e <main+0x96>
    HAL_Delay(1000);
 800067e:	e7c1      	b.n	8000604 <main+0x4c>
 8000680:	20000634 	.word	0x20000634
 8000684:	200000e4 	.word	0x200000e4
 8000688:	08004ba0 	.word	0x08004ba0
 800068c:	08004be8 	.word	0x08004be8
 8000690:	08004c20 	.word	0x08004c20
 8000694:	08004c58 	.word	0x08004c58
 8000698:	08004c90 	.word	0x08004c90
 800069c:	08004cd0 	.word	0x08004cd0
 80006a0:	20000648 	.word	0x20000648
 80006a4:	08004d14 	.word	0x08004d14
 80006a8:	08004d24 	.word	0x08004d24
 80006ac:	08004d40 	.word	0x08004d40

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fa56 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a27      	ldr	r2, [pc, #156]	; (800077c <SystemClock_Config+0xcc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xd0>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000710:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000724:	23a8      	movs	r3, #168	; 0xa8
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072c:	2307      	movs	r3, #7
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f957 	bl	80019e8 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 fa02 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000750:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2105      	movs	r1, #5
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fbb8 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076e:	f000 f9eb 	bl	8000b48 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_SPI1_Init+0x64>)
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <MX_SPI1_Init+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_SPI1_Init+0x64>)
 8000790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007d0:	220a      	movs	r2, #10
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_SPI1_Init+0x64>)
 80007d6:	f001 fd9f 	bl	8002318 <HAL_SPI_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e0:	f000 f9b2 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART3_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART3_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART3_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART3_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART3_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART3_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART3_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART3_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART3_UART_Init+0x4c>)
 8000828:	f001 fdff 	bl	800242a <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f989 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000e4 	.word	0x200000e4
 8000840:	40004800 	.word	0x40004800

08000844 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800084e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2204      	movs	r2, #4
 8000854:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2202      	movs	r2, #2
 800085a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2202      	movs	r2, #2
 8000866:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2201      	movs	r2, #1
 800086c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2201      	movs	r2, #1
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	f000 ff91 	bl	80017ae <HAL_PCD_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f959 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000128 	.word	0x20000128

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
 80008ba:	4b8b      	ldr	r3, [pc, #556]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a8a      	ldr	r2, [pc, #552]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b88      	ldr	r3, [pc, #544]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	623b      	str	r3, [r7, #32]
 80008d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
 80008d6:	4b84      	ldr	r3, [pc, #528]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a83      	ldr	r2, [pc, #524]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b81      	ldr	r3, [pc, #516]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	61fb      	str	r3, [r7, #28]
 80008ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	4b7d      	ldr	r3, [pc, #500]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a7c      	ldr	r2, [pc, #496]	; (8000ae8 <MX_GPIO_Init+0x248>)
 80008f8:	f043 0320 	orr.w	r3, r3, #32
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b7a      	ldr	r3, [pc, #488]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	4b76      	ldr	r3, [pc, #472]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a75      	ldr	r2, [pc, #468]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b73      	ldr	r3, [pc, #460]	; (8000ae8 <MX_GPIO_Init+0x248>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b6f      	ldr	r3, [pc, #444]	; (8000ae8 <MX_GPIO_Init+0x248>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a6e      	ldr	r2, [pc, #440]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b6c      	ldr	r3, [pc, #432]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b68      	ldr	r3, [pc, #416]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a67      	ldr	r2, [pc, #412]	; (8000ae8 <MX_GPIO_Init+0x248>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b65      	ldr	r3, [pc, #404]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b61      	ldr	r3, [pc, #388]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b5e      	ldr	r3, [pc, #376]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b5a      	ldr	r3, [pc, #360]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a59      	ldr	r2, [pc, #356]	; (8000ae8 <MX_GPIO_Init+0x248>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b57      	ldr	r3, [pc, #348]	; (8000ae8 <MX_GPIO_Init+0x248>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000996:	2200      	movs	r2, #0
 8000998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800099c:	4853      	ldr	r0, [pc, #332]	; (8000aec <MX_GPIO_Init+0x24c>)
 800099e:	f000 feed 	bl	800177c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a2:	2200      	movs	r2, #0
 80009a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009a8:	4851      	ldr	r0, [pc, #324]	; (8000af0 <MX_GPIO_Init+0x250>)
 80009aa:	f000 fee7 	bl	800177c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	4850      	ldr	r0, [pc, #320]	; (8000af4 <MX_GPIO_Init+0x254>)
 80009b4:	f000 fee2 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2106      	movs	r1, #6
 80009bc:	484e      	ldr	r0, [pc, #312]	; (8000af8 <MX_GPIO_Init+0x258>)
 80009be:	f000 fedd 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f644 4181 	movw	r1, #19585	; 0x4c81
 80009c8:	484c      	ldr	r0, [pc, #304]	; (8000afc <MX_GPIO_Init+0x25c>)
 80009ca:	f000 fed7 	bl	800177c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2143      	movs	r1, #67	; 0x43
 80009d2:	484b      	ldr	r0, [pc, #300]	; (8000b00 <MX_GPIO_Init+0x260>)
 80009d4:	f000 fed2 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2103      	movs	r1, #3
 80009dc:	4849      	ldr	r0, [pc, #292]	; (8000b04 <MX_GPIO_Init+0x264>)
 80009de:	f000 fecd 	bl	800177c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80009e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	483c      	ldr	r0, [pc, #240]	; (8000aec <MX_GPIO_Init+0x24c>)
 80009fc:	f000 fd12 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4837      	ldr	r0, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x254>)
 8000a18:	f000 fd04 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	482e      	ldr	r0, [pc, #184]	; (8000af0 <MX_GPIO_Init+0x250>)
 8000a36:	f000 fcf5 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4828      	ldr	r0, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x254>)
 8000a52:	f000 fce7 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a56:	2306      	movs	r3, #6
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4822      	ldr	r0, [pc, #136]	; (8000af8 <MX_GPIO_Init+0x258>)
 8000a6e:	f000 fcd9 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin
 8000a72:	f644 4381 	movw	r3, #19585	; 0x4c81
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481c      	ldr	r0, [pc, #112]	; (8000afc <MX_GPIO_Init+0x25c>)
 8000a8c:	f000 fcca 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000a90:	2343      	movs	r3, #67	; 0x43
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <MX_GPIO_Init+0x260>)
 8000aa8:	f000 fcbc 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4810      	ldr	r0, [pc, #64]	; (8000b00 <MX_GPIO_Init+0x260>)
 8000ac0:	f000 fcb0 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <MX_GPIO_Init+0x264>)
 8000adc:	f000 fca2 	bl	8001424 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3738      	adds	r7, #56	; 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40021400 	.word	0x40021400
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40021800 	.word	0x40021800
 8000b04:	40020c00 	.word	0x40020c00

08000b08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <HAL_UART_RxCpltCallback+0x34>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10b      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x2a>
  {
    // 데이터 1개를 수신하면 인터럽트를 발생시킨다.
    HAL_UART_Receive_IT(&huart3, &UART_RX_data, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4908      	ldr	r1, [pc, #32]	; (8000b40 <HAL_UART_RxCpltCallback+0x38>)
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_UART_RxCpltCallback+0x3c>)
 8000b20:	f001 fd62 	bl	80025e8 <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart3, &UART_RX_data, 1, 1000);
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4905      	ldr	r1, [pc, #20]	; (8000b40 <HAL_UART_RxCpltCallback+0x38>)
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_UART_RxCpltCallback+0x3c>)
 8000b2e:	f001 fcc9 	bl	80024c4 <HAL_UART_Transmit>
    
  }
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004800 	.word	0x40004800
 8000b40:	20000634 	.word	0x20000634
 8000b44:	200000e4 	.word	0x200000e4

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_SPI_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12b      	bne.n	8000c1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfe:	23e0      	movs	r3, #224	; 0xe0
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000c1a:	f000 fc03 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40013000 	.word	0x40013000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <HAL_UART_MspInit+0x94>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d134      	bne.n	8000cc0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_UART_MspInit+0x98>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_UART_MspInit+0x98>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_UART_MspInit+0x98>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x98>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0x98>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_UART_MspInit+0x98>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <HAL_UART_MspInit+0x9c>)
 8000cac:	f000 fbba 	bl	8001424 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2027      	movs	r0, #39	; 0x27
 8000cb6:	f000 faec 	bl	8001292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cba:	2027      	movs	r0, #39	; 0x27
 8000cbc:	f000 fb05 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40004800 	.word	0x40004800
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020c00 	.word	0x40020c00

08000cd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cf4:	d13f      	bne.n	8000d76 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d24:	230a      	movs	r3, #10
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4815      	ldr	r0, [pc, #84]	; (8000d84 <HAL_PCD_MspInit+0xb0>)
 8000d30:	f000 fb78 	bl	8001424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480e      	ldr	r0, [pc, #56]	; (8000d84 <HAL_PCD_MspInit+0xb0>)
 8000d4a:	f000 fb6b 	bl	8001424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d58:	6353      	str	r3, [r2, #52]	; 0x34
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_PCD_MspInit+0xac>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f93e 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <USART3_IRQHandler+0x10>)
 8000de2:	f001 fc31 	bl	8002648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000e4 	.word	0x200000e4

08000df0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
	}

return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e009      	b.n	8000e50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fba5 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf1      	blt.n	8000e3c <_write+0x12>
	}
	return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_close>:

int _close(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_isatty>:

int _isatty(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f002 fe0e 	bl	8003b1c <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20030000 	.word	0x20030000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	2000064c 	.word	0x2000064c
 8000f34:	20000668 	.word	0x20000668

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f78:	4c0b      	ldr	r4, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f86:	f7ff ffd7 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f002 fdcd 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fb13 	bl	80005b8 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fa0:	08004e08 	.word	0x08004e08
  ldr r2, =_sbss
 8000fa4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fa8:	20000664 	.word	0x20000664

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fdb6 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	20000008 	.word	0x20000008
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	20000650 	.word	0x20000650

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000650 	.word	0x20000650

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff feb6 	bl	800107c <HAL_GetTick>
 8001310:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d008      	beq.n	8001330 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e052      	b.n	80013d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0216 	bic.w	r2, r2, #22
 800133e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800134e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <HAL_DMA_Abort+0x62>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0208 	bic.w	r2, r2, #8
 800136e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001380:	e013      	b.n	80013aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001382:	f7ff fe7b 	bl	800107c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b05      	cmp	r3, #5
 800138e:	d90c      	bls.n	80013aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2220      	movs	r2, #32
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2203      	movs	r2, #3
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e015      	b.n	80013d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e4      	bne.n	8001382 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013bc:	223f      	movs	r2, #63	; 0x3f
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d004      	beq.n	80013fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e00c      	b.n	8001416 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2205      	movs	r2, #5
 8001400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	e177      	b.n	8001730 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	429a      	cmp	r2, r3
 800145a:	f040 8166 	bne.w	800172a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d005      	beq.n	8001476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001472:	2b02      	cmp	r3, #2
 8001474:	d130      	bne.n	80014d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 0201 	and.w	r2, r3, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d017      	beq.n	8001514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d123      	bne.n	8001568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	69b9      	ldr	r1, [r7, #24]
 8001564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0203 	and.w	r2, r3, #3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80c0 	beq.w	800172a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_GPIO_Init+0x324>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a65      	ldr	r2, [pc, #404]	; (8001748 <HAL_GPIO_Init+0x324>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_GPIO_Init+0x324>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c6:	4a61      	ldr	r2, [pc, #388]	; (800174c <HAL_GPIO_Init+0x328>)
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	089b      	lsrs	r3, r3, #2
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_GPIO_Init+0x32c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d037      	beq.n	8001662 <HAL_GPIO_Init+0x23e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a57      	ldr	r2, [pc, #348]	; (8001754 <HAL_GPIO_Init+0x330>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d031      	beq.n	800165e <HAL_GPIO_Init+0x23a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a56      	ldr	r2, [pc, #344]	; (8001758 <HAL_GPIO_Init+0x334>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d02b      	beq.n	800165a <HAL_GPIO_Init+0x236>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a55      	ldr	r2, [pc, #340]	; (800175c <HAL_GPIO_Init+0x338>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d025      	beq.n	8001656 <HAL_GPIO_Init+0x232>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <HAL_GPIO_Init+0x33c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01f      	beq.n	8001652 <HAL_GPIO_Init+0x22e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a53      	ldr	r2, [pc, #332]	; (8001764 <HAL_GPIO_Init+0x340>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d019      	beq.n	800164e <HAL_GPIO_Init+0x22a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_GPIO_Init+0x344>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x226>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <HAL_GPIO_Init+0x348>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x222>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a50      	ldr	r2, [pc, #320]	; (8001770 <HAL_GPIO_Init+0x34c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x21e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4f      	ldr	r2, [pc, #316]	; (8001774 <HAL_GPIO_Init+0x350>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x21a>
 800163a:	2309      	movs	r3, #9
 800163c:	e012      	b.n	8001664 <HAL_GPIO_Init+0x240>
 800163e:	230a      	movs	r3, #10
 8001640:	e010      	b.n	8001664 <HAL_GPIO_Init+0x240>
 8001642:	2308      	movs	r3, #8
 8001644:	e00e      	b.n	8001664 <HAL_GPIO_Init+0x240>
 8001646:	2307      	movs	r3, #7
 8001648:	e00c      	b.n	8001664 <HAL_GPIO_Init+0x240>
 800164a:	2306      	movs	r3, #6
 800164c:	e00a      	b.n	8001664 <HAL_GPIO_Init+0x240>
 800164e:	2305      	movs	r3, #5
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x240>
 8001652:	2304      	movs	r3, #4
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x240>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x240>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x240>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x240>
 8001662:	2300      	movs	r3, #0
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001674:	4935      	ldr	r1, [pc, #212]	; (800174c <HAL_GPIO_Init+0x328>)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_GPIO_Init+0x354>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_GPIO_Init+0x354>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_GPIO_Init+0x354>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d0:	4a29      	ldr	r2, [pc, #164]	; (8001778 <HAL_GPIO_Init+0x354>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_GPIO_Init+0x354>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_GPIO_Init+0x354>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_GPIO_Init+0x354>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_GPIO_Init+0x354>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	f67f ae84 	bls.w	8001440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40021400 	.word	0x40021400
 8001768:	40021800 	.word	0x40021800
 800176c:	40021c00 	.word	0x40021c00
 8001770:	40022000 	.word	0x40022000
 8001774:	40022400 	.word	0x40022400
 8001778:	40013c00 	.word	0x40013c00

0800177c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
 8001788:	4613      	mov	r3, r2
 800178a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	787b      	ldrb	r3, [r7, #1]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	041a      	lsls	r2, r3, #16
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b0:	b08f      	sub	sp, #60	; 0x3c
 80017b2:	af0a      	add	r7, sp, #40	; 0x28
 80017b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e10f      	b.n	80019e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fa7a 	bl	8000cd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2203      	movs	r2, #3
 80017e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 feeb 	bl	80035da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	687e      	ldr	r6, [r7, #4]
 800180c:	466d      	mov	r5, sp
 800180e:	f106 0410 	add.w	r4, r6, #16
 8001812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800181e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001822:	1d33      	adds	r3, r6, #4
 8001824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001826:	6838      	ldr	r0, [r7, #0]
 8001828:	f001 fe76 	bl	8003518 <USB_CoreInit>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0d0      	b.n	80019e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f001 fed9 	bl	80035fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e04a      	b.n	80018e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	333d      	adds	r3, #61	; 0x3d
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	333c      	adds	r3, #60	; 0x3c
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	b298      	uxth	r0, r3
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	3344      	adds	r3, #68	; 0x44
 800188c:	4602      	mov	r2, r0
 800188e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3340      	adds	r3, #64	; 0x40
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3348      	adds	r3, #72	; 0x48
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	334c      	adds	r3, #76	; 0x4c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3354      	adds	r3, #84	; 0x54
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	3301      	adds	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3af      	bcc.n	8001850 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e044      	b.n	8001980 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	3301      	adds	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	429a      	cmp	r2, r3
 8001988:	d3b5      	bcc.n	80018f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	687e      	ldr	r6, [r7, #4]
 8001992:	466d      	mov	r5, sp
 8001994:	f106 0410 	add.w	r4, r6, #16
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a8:	1d33      	adds	r3, r6, #4
 80019aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f001 fe71 	bl	8003694 <USB_DevInit>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e00d      	b.n	80019e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 f83c 	bl	8003a56 <USB_DevDisconnect>

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e267      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d075      	beq.n	8001af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a06:	4b88      	ldr	r3, [pc, #544]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d00c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a12:	4b85      	ldr	r3, [pc, #532]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d112      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2a:	d10b      	bne.n	8001a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d05b      	beq.n	8001af0 <HAL_RCC_OscConfig+0x108>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d157      	bne.n	8001af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e242      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x74>
 8001a4e:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a75      	ldr	r2, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xb0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x98>
 8001a66:	4b70      	ldr	r3, [pc, #448]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6f      	ldr	r2, [pc, #444]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b6d      	ldr	r3, [pc, #436]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6c      	ldr	r2, [pc, #432]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xb0>
 8001a80:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a68      	ldr	r2, [pc, #416]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff faec 	bl	800107c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fae8 	bl	800107c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e207      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b5b      	ldr	r3, [pc, #364]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xc0>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fad8 	bl	800107c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fad4 	bl	800107c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1f3      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xe8>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d063      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001afe:	4b4a      	ldr	r3, [pc, #296]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d11c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x152>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1c7      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4937      	ldr	r1, [pc, #220]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e03a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_RCC_OscConfig+0x244>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fa8d 	bl	800107c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff fa89 	bl	800107c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1a8      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4925      	ldr	r1, [pc, #148]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_RCC_OscConfig+0x244>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fa6c 	bl	800107c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fa68 	bl	800107c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e187      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d036      	beq.n	8001c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d016      	beq.n	8001c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_RCC_OscConfig+0x248>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fa4c 	bl	800107c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fa48 	bl	800107c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e167      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x200>
 8001c06:	e01b      	b.n	8001c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_OscConfig+0x248>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fa35 	bl	800107c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	e00e      	b.n	8001c34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c16:	f7ff fa31 	bl	800107c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d907      	bls.n	8001c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e150      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	42470000 	.word	0x42470000
 8001c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b88      	ldr	r3, [pc, #544]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ea      	bne.n	8001c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8097 	beq.w	8001d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10f      	bne.n	8001c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b7d      	ldr	r3, [pc, #500]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a7c      	ldr	r2, [pc, #496]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b7a      	ldr	r3, [pc, #488]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b77      	ldr	r3, [pc, #476]	; (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b74      	ldr	r3, [pc, #464]	; (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a73      	ldr	r2, [pc, #460]	; (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7ff f9f1 	bl	800107c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7ff f9ed 	bl	800107c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e10c      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <HAL_RCC_OscConfig+0x474>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x2ea>
 8001cc4:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a63      	ldr	r2, [pc, #396]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x324>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x30c>
 8001cda:	4b5f      	ldr	r3, [pc, #380]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5e      	ldr	r2, [pc, #376]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a5b      	ldr	r2, [pc, #364]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0x324>
 8001cf4:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	4a57      	ldr	r2, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001d00:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	4a54      	ldr	r2, [pc, #336]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d015      	beq.n	8001d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f9b2 	bl	800107c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f9ae 	bl	800107c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0cb      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ee      	beq.n	8001d1c <HAL_RCC_OscConfig+0x334>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff f99c 	bl	800107c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff f998 	bl	800107c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0b5      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ee      	bne.n	8001d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a38      	ldr	r2, [pc, #224]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a1 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d05c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d141      	bne.n	8001e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_RCC_OscConfig+0x478>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff f96c 	bl	800107c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f968 	bl	800107c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e087      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	491b      	ldr	r1, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_RCC_OscConfig+0x478>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7ff f941 	bl	800107c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff f93d 	bl	800107c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e05c      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x416>
 8001e1c:	e054      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x478>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff f92a 	bl	800107c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff f926 	bl	800107c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e045      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x470>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x444>
 8001e4a:	e03d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e038      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x4ec>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d028      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d121      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	3b01      	subs	r3, #1
 8001eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0cc      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b68      	ldr	r3, [pc, #416]	; (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d90c      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b65      	ldr	r3, [pc, #404]	; (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d044      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d119      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d003      	beq.n	8001f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e067      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b37      	ldr	r3, [pc, #220]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4934      	ldr	r1, [pc, #208]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff f858 	bl	800107c <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7ff f854 	bl	800107c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e04f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d20c      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_ClockConfig+0x1b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490a      	ldr	r1, [pc, #40]	; (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe ffb8 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00
 8002094:	40023800 	.word	0x40023800
 8002098:	08004d48 	.word	0x08004d48
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a8:	b094      	sub	sp, #80	; 0x50
 80020aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
 80020b0:	2300      	movs	r3, #0
 80020b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020b4:	2300      	movs	r3, #0
 80020b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020bc:	4b79      	ldr	r3, [pc, #484]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d00d      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x40>
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	f200 80e1 	bhi.w	8002290 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x3a>
 80020d6:	e0db      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b73      	ldr	r3, [pc, #460]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020dc:	e0db      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020de:	4b73      	ldr	r3, [pc, #460]	; (80022ac <HAL_RCC_GetSysClockFreq+0x208>)
 80020e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020e2:	e0d8      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e4:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ee:	4b6d      	ldr	r3, [pc, #436]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d063      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fa:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	2200      	movs	r2, #0
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
 8002104:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
 800210e:	2300      	movs	r3, #0
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
 8002112:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002116:	4622      	mov	r2, r4
 8002118:	462b      	mov	r3, r5
 800211a:	f04f 0000 	mov.w	r0, #0
 800211e:	f04f 0100 	mov.w	r1, #0
 8002122:	0159      	lsls	r1, r3, #5
 8002124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002128:	0150      	lsls	r0, r2, #5
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4621      	mov	r1, r4
 8002130:	1a51      	subs	r1, r2, r1
 8002132:	6139      	str	r1, [r7, #16]
 8002134:	4629      	mov	r1, r5
 8002136:	eb63 0301 	sbc.w	r3, r3, r1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002148:	4659      	mov	r1, fp
 800214a:	018b      	lsls	r3, r1, #6
 800214c:	4651      	mov	r1, sl
 800214e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002152:	4651      	mov	r1, sl
 8002154:	018a      	lsls	r2, r1, #6
 8002156:	4651      	mov	r1, sl
 8002158:	ebb2 0801 	subs.w	r8, r2, r1
 800215c:	4659      	mov	r1, fp
 800215e:	eb63 0901 	sbc.w	r9, r3, r1
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800216e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002176:	4690      	mov	r8, r2
 8002178:	4699      	mov	r9, r3
 800217a:	4623      	mov	r3, r4
 800217c:	eb18 0303 	adds.w	r3, r8, r3
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	462b      	mov	r3, r5
 8002184:	eb49 0303 	adc.w	r3, r9, r3
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002196:	4629      	mov	r1, r5
 8002198:	024b      	lsls	r3, r1, #9
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021a0:	4621      	mov	r1, r4
 80021a2:	024a      	lsls	r2, r1, #9
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021aa:	2200      	movs	r2, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021b4:	f7fe f86c 	bl	8000290 <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c0:	e058      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	2200      	movs	r2, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	4611      	mov	r1, r2
 80021ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021dc:	4642      	mov	r2, r8
 80021de:	464b      	mov	r3, r9
 80021e0:	f04f 0000 	mov.w	r0, #0
 80021e4:	f04f 0100 	mov.w	r1, #0
 80021e8:	0159      	lsls	r1, r3, #5
 80021ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ee:	0150      	lsls	r0, r2, #5
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4641      	mov	r1, r8
 80021f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80021fa:	4649      	mov	r1, r9
 80021fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800220c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002210:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002214:	ebb2 040a 	subs.w	r4, r2, sl
 8002218:	eb63 050b 	sbc.w	r5, r3, fp
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	00eb      	lsls	r3, r5, #3
 8002226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800222a:	00e2      	lsls	r2, r4, #3
 800222c:	4614      	mov	r4, r2
 800222e:	461d      	mov	r5, r3
 8002230:	4643      	mov	r3, r8
 8002232:	18e3      	adds	r3, r4, r3
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	464b      	mov	r3, r9
 8002238:	eb45 0303 	adc.w	r3, r5, r3
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800224a:	4629      	mov	r1, r5
 800224c:	028b      	lsls	r3, r1, #10
 800224e:	4621      	mov	r1, r4
 8002250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002254:	4621      	mov	r1, r4
 8002256:	028a      	lsls	r2, r1, #10
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800225e:	2200      	movs	r2, #0
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	61fa      	str	r2, [r7, #28]
 8002264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002268:	f7fe f812 	bl	8000290 <__aeabi_uldivmod>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4613      	mov	r3, r2
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	3301      	adds	r3, #1
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800228e:	e002      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002292:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002298:	4618      	mov	r0, r3
 800229a:	3750      	adds	r7, #80	; 0x50
 800229c:	46bd      	mov	sp, r7
 800229e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200

080022b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022cc:	f7ff fff0 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0a9b      	lsrs	r3, r3, #10
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4903      	ldr	r1, [pc, #12]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40023800 	.word	0x40023800
 80022ec:	08004d58 	.word	0x08004d58

080022f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022f4:	f7ff ffdc 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0b5b      	lsrs	r3, r3, #13
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	08004d58 	.word	0x08004d58

08002318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07b      	b.n	8002422 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	2b00      	cmp	r3, #0
 8002330:	d108      	bne.n	8002344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800233a:	d009      	beq.n	8002350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
 8002342:	e005      	b.n	8002350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fc1a 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d4:	ea42 0103 	orr.w	r1, r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	f003 0104 	and.w	r1, r3, #4
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0210 	and.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002410:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e03f      	b.n	80024bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7fe fbef 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2224      	movs	r2, #36	; 0x24
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800246c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fdde 	bl	8003030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002482:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002492:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d17c      	bne.n	80025de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Transmit+0x2c>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e075      	b.n	80025e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Transmit+0x3e>
 80024fe:	2302      	movs	r3, #2
 8002500:	e06e      	b.n	80025e0 <HAL_UART_Transmit+0x11c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2221      	movs	r2, #33	; 0x21
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002518:	f7fe fdb0 	bl	800107c <HAL_GetTick>
 800251c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	d108      	bne.n	8002546 <HAL_UART_Transmit+0x82>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e003      	b.n	800254e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002556:	e02a      	b.n	80025ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2200      	movs	r2, #0
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fb1e 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e036      	b.n	80025e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002586:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	3302      	adds	r3, #2
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	e007      	b.n	80025a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1cf      	bne.n	8002558 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2200      	movs	r2, #0
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 faee 	bl	8002ba4 <UART_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e006      	b.n	80025e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025de:	2302      	movs	r3, #2
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d11d      	bne.n	800263e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_UART_Receive_IT+0x26>
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e016      	b.n	8002640 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_UART_Receive_IT+0x38>
 800261c:	2302      	movs	r3, #2
 800261e:	e00f      	b.n	8002640 <HAL_UART_Receive_IT+0x58>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	461a      	mov	r2, r3
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fb23 	bl	8002c80 <UART_Start_Receive_IT>
 800263a:	4603      	mov	r3, r0
 800263c:	e000      	b.n	8002640 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0ba      	sub	sp, #232	; 0xe8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_UART_IRQHandler+0x66>
 800269a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fc07 	bl	8002eba <UART_Receive_IT>
      return;
 80026ac:	e256      	b.n	8002b5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80de 	beq.w	8002874 <HAL_UART_IRQHandler+0x22c>
 80026b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80d1 	beq.w	8002874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_UART_IRQHandler+0xae>
 80026de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_UART_IRQHandler+0xd2>
 8002702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f043 0202 	orr.w	r2, r3, #2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_UART_IRQHandler+0xf6>
 8002726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0204 	orr.w	r2, r3, #4
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <HAL_UART_IRQHandler+0x126>
 800274a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d105      	bne.n	8002762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f043 0208 	orr.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 81ed 	beq.w	8002b52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_UART_IRQHandler+0x14e>
 8002784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fb92 	bl	8002eba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b40      	cmp	r3, #64	; 0x40
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <HAL_UART_IRQHandler+0x17a>
 80027ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d04f      	beq.n	8002862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa9a 	bl	8002cfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d141      	bne.n	800285a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3314      	adds	r3, #20
 80027fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800280e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800281a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1d9      	bne.n	80027d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	2b00      	cmp	r3, #0
 8002828:	d013      	beq.n	8002852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_UART_IRQHandler+0x3dc>)
 8002830:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fdd1 	bl	80013de <HAL_DMA_Abort_IT>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800284c:	4610      	mov	r0, r2
 800284e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	e00e      	b.n	8002870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f990 	bl	8002b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	e00a      	b.n	8002870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f98c 	bl	8002b78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	e006      	b.n	8002870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f988 	bl	8002b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800286e:	e170      	b.n	8002b52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	bf00      	nop
    return;
 8002872:	e16e      	b.n	8002b52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	2b01      	cmp	r3, #1
 800287a:	f040 814a 	bne.w	8002b12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8143 	beq.w	8002b12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800288c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 813c 	beq.w	8002b12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	f040 80b4 	bne.w	8002a28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8140 	beq.w	8002b56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028de:	429a      	cmp	r2, r3
 80028e0:	f080 8139 	bcs.w	8002b56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f6:	f000 8088 	beq.w	8002a0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800292a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002932:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1d9      	bne.n	80028fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3314      	adds	r3, #20
 800294c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002950:	e853 3f00 	ldrex	r3, [r3]
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800296a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800296e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002972:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800297c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e1      	bne.n	8002946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3314      	adds	r3, #20
 8002988:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e3      	bne.n	8002982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029da:	f023 0310 	bic.w	r3, r3, #16
 80029de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80029ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e3      	bne.n	80029c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fc7a 	bl	80012fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f8b6 	bl	8002b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a20:	e099      	b.n	8002b56 <HAL_UART_IRQHandler+0x50e>
 8002a22:	bf00      	nop
 8002a24:	08002dc3 	.word	0x08002dc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 808b 	beq.w	8002b5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8086 	beq.w	8002b5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	e853 3f00 	ldrex	r3, [r3]
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a72:	647a      	str	r2, [r7, #68]	; 0x44
 8002a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a7a:	e841 2300 	strex	r3, r2, [r1]
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e3      	bne.n	8002a4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3314      	adds	r3, #20
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	623b      	str	r3, [r7, #32]
   return(result);
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e3      	bne.n	8002a86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0310 	bic.w	r3, r3, #16
 8002ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	330c      	adds	r3, #12
 8002aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002af0:	61fa      	str	r2, [r7, #28]
 8002af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	69b9      	ldr	r1, [r7, #24]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	617b      	str	r3, [r7, #20]
   return(result);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e3      	bne.n	8002acc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f83e 	bl	8002b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b10:	e023      	b.n	8002b5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_UART_IRQHandler+0x4ea>
 8002b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f95d 	bl	8002dea <UART_Transmit_IT>
    return;
 8002b30:	e014      	b.n	8002b5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <HAL_UART_IRQHandler+0x514>
 8002b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f99d 	bl	8002e8a <UART_EndTransmit_IT>
    return;
 8002b50:	e004      	b.n	8002b5c <HAL_UART_IRQHandler+0x514>
    return;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <HAL_UART_IRQHandler+0x514>
      return;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <HAL_UART_IRQHandler+0x514>
      return;
 8002b5a:	bf00      	nop
  }
}
 8002b5c:	37e8      	adds	r7, #232	; 0xe8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop

08002b64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b090      	sub	sp, #64	; 0x40
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb4:	e050      	b.n	8002c58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d04c      	beq.n	8002c58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bc4:	f7fe fa5a 	bl	800107c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d241      	bcs.n	8002c58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	e853 3f00 	ldrex	r3, [r3]
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf4:	637a      	str	r2, [r7, #52]	; 0x34
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e5      	bne.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	613b      	str	r3, [r7, #16]
   return(result);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3314      	adds	r3, #20
 8002c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c28:	623a      	str	r2, [r7, #32]
 8002c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	69f9      	ldr	r1, [r7, #28]
 8002c2e:	6a3a      	ldr	r2, [r7, #32]
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e5      	bne.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e00f      	b.n	8002c78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d09f      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3740      	adds	r7, #64	; 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2222      	movs	r2, #34	; 0x22
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b095      	sub	sp, #84	; 0x54
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d24:	643a      	str	r2, [r7, #64]	; 0x40
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e5      	bne.n	8002d04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3314      	adds	r3, #20
 8002d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d119      	bne.n	8002da8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f023 0310 	bic.w	r3, r3, #16
 8002d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d94:	61ba      	str	r2, [r7, #24]
 8002d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6979      	ldr	r1, [r7, #20]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	613b      	str	r3, [r7, #16]
   return(result);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e5      	bne.n	8002d74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002db6:	bf00      	nop
 8002db8:	3754      	adds	r7, #84	; 0x54
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff fecb 	bl	8002b78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b21      	cmp	r3, #33	; 0x21
 8002dfc:	d13e      	bne.n	8002e7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d114      	bne.n	8002e32 <UART_Transmit_IT+0x48>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d110      	bne.n	8002e32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	1c9a      	adds	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	621a      	str	r2, [r3, #32]
 8002e30:	e008      	b.n	8002e44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6211      	str	r1, [r2, #32]
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4619      	mov	r1, r3
 8002e52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10f      	bne.n	8002e78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
  }
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fe5a 	bl	8002b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b08c      	sub	sp, #48	; 0x30
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b22      	cmp	r3, #34	; 0x22
 8002ecc:	f040 80ab 	bne.w	8003026 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d117      	bne.n	8002f0a <UART_Receive_IT+0x50>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d113      	bne.n	8002f0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
 8002f08:	e026      	b.n	8002f58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d007      	beq.n	8002f2e <UART_Receive_IT+0x74>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <UART_Receive_IT+0x82>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e008      	b.n	8002f4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4619      	mov	r1, r3
 8002f66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d15a      	bne.n	8003022 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0220 	bic.w	r2, r2, #32
 8002f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d135      	bne.n	8003018 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	e853 3f00 	ldrex	r3, [r3]
 8002fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f023 0310 	bic.w	r3, r3, #16
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd2:	623a      	str	r2, [r7, #32]
 8002fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	69f9      	ldr	r1, [r7, #28]
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e5      	bne.n	8002fb2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d10a      	bne.n	800300a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff fdbb 	bl	8002b8c <HAL_UARTEx_RxEventCallback>
 8003016:	e002      	b.n	800301e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7fd fd75 	bl	8000b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e002      	b.n	8003028 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3730      	adds	r7, #48	; 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b0c0      	sub	sp, #256	; 0x100
 8003036:	af00      	add	r7, sp, #0
 8003038:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	68d9      	ldr	r1, [r3, #12]
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	ea40 0301 	orr.w	r3, r0, r1
 8003058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	431a      	orrs	r2, r3
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003088:	f021 010c 	bic.w	r1, r1, #12
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003096:	430b      	orrs	r3, r1
 8003098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	6999      	ldr	r1, [r3, #24]
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	ea40 0301 	orr.w	r3, r0, r1
 80030b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b8f      	ldr	r3, [pc, #572]	; (80032fc <UART_SetConfig+0x2cc>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d005      	beq.n	80030d0 <UART_SetConfig+0xa0>
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8d      	ldr	r3, [pc, #564]	; (8003300 <UART_SetConfig+0x2d0>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d104      	bne.n	80030da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030d0:	f7ff f90e 	bl	80022f0 <HAL_RCC_GetPCLK2Freq>
 80030d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030d8:	e003      	b.n	80030e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030da:	f7ff f8f5 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 80030de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ec:	f040 810c 	bne.w	8003308 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	1891      	adds	r1, r2, r2
 8003108:	65b9      	str	r1, [r7, #88]	; 0x58
 800310a:	415b      	adcs	r3, r3
 800310c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800310e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003112:	4621      	mov	r1, r4
 8003114:	eb12 0801 	adds.w	r8, r2, r1
 8003118:	4629      	mov	r1, r5
 800311a:	eb43 0901 	adc.w	r9, r3, r1
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003132:	4690      	mov	r8, r2
 8003134:	4699      	mov	r9, r3
 8003136:	4623      	mov	r3, r4
 8003138:	eb18 0303 	adds.w	r3, r8, r3
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003140:	462b      	mov	r3, r5
 8003142:	eb49 0303 	adc.w	r3, r9, r3
 8003146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003156:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800315a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800315e:	460b      	mov	r3, r1
 8003160:	18db      	adds	r3, r3, r3
 8003162:	653b      	str	r3, [r7, #80]	; 0x50
 8003164:	4613      	mov	r3, r2
 8003166:	eb42 0303 	adc.w	r3, r2, r3
 800316a:	657b      	str	r3, [r7, #84]	; 0x54
 800316c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003170:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003174:	f7fd f88c 	bl	8000290 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4b61      	ldr	r3, [pc, #388]	; (8003304 <UART_SetConfig+0x2d4>)
 800317e:	fba3 2302 	umull	r2, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	011c      	lsls	r4, r3, #4
 8003186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003190:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003194:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	1891      	adds	r1, r2, r2
 800319e:	64b9      	str	r1, [r7, #72]	; 0x48
 80031a0:	415b      	adcs	r3, r3
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031a8:	4641      	mov	r1, r8
 80031aa:	eb12 0a01 	adds.w	sl, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb43 0b01 	adc.w	fp, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c8:	4692      	mov	sl, r2
 80031ca:	469b      	mov	fp, r3
 80031cc:	4643      	mov	r3, r8
 80031ce:	eb1a 0303 	adds.w	r3, sl, r3
 80031d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031d6:	464b      	mov	r3, r9
 80031d8:	eb4b 0303 	adc.w	r3, fp, r3
 80031dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031f4:	460b      	mov	r3, r1
 80031f6:	18db      	adds	r3, r3, r3
 80031f8:	643b      	str	r3, [r7, #64]	; 0x40
 80031fa:	4613      	mov	r3, r2
 80031fc:	eb42 0303 	adc.w	r3, r2, r3
 8003200:	647b      	str	r3, [r7, #68]	; 0x44
 8003202:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003206:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800320a:	f7fd f841 	bl	8000290 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4611      	mov	r1, r2
 8003214:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <UART_SetConfig+0x2d4>)
 8003216:	fba3 2301 	umull	r2, r3, r3, r1
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2264      	movs	r2, #100	; 0x64
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <UART_SetConfig+0x2d4>)
 800322c:	fba3 2302 	umull	r2, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003238:	441c      	add	r4, r3
 800323a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003244:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003248:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800324c:	4642      	mov	r2, r8
 800324e:	464b      	mov	r3, r9
 8003250:	1891      	adds	r1, r2, r2
 8003252:	63b9      	str	r1, [r7, #56]	; 0x38
 8003254:	415b      	adcs	r3, r3
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800325c:	4641      	mov	r1, r8
 800325e:	1851      	adds	r1, r2, r1
 8003260:	6339      	str	r1, [r7, #48]	; 0x30
 8003262:	4649      	mov	r1, r9
 8003264:	414b      	adcs	r3, r1
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003274:	4659      	mov	r1, fp
 8003276:	00cb      	lsls	r3, r1, #3
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327e:	4651      	mov	r1, sl
 8003280:	00ca      	lsls	r2, r1, #3
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	4603      	mov	r3, r0
 8003288:	4642      	mov	r2, r8
 800328a:	189b      	adds	r3, r3, r2
 800328c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003290:	464b      	mov	r3, r9
 8003292:	460a      	mov	r2, r1
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032b0:	460b      	mov	r3, r1
 80032b2:	18db      	adds	r3, r3, r3
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b6:	4613      	mov	r3, r2
 80032b8:	eb42 0303 	adc.w	r3, r2, r3
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032c6:	f7fc ffe3 	bl	8000290 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <UART_SetConfig+0x2d4>)
 80032d0:	fba3 1302 	umull	r1, r3, r3, r2
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2164      	movs	r1, #100	; 0x64
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	3332      	adds	r3, #50	; 0x32
 80032e2:	4a08      	ldr	r2, [pc, #32]	; (8003304 <UART_SetConfig+0x2d4>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4422      	add	r2, r4
 80032f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032f8:	e105      	b.n	8003506 <UART_SetConfig+0x4d6>
 80032fa:	bf00      	nop
 80032fc:	40011000 	.word	0x40011000
 8003300:	40011400 	.word	0x40011400
 8003304:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003312:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003316:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800331a:	4642      	mov	r2, r8
 800331c:	464b      	mov	r3, r9
 800331e:	1891      	adds	r1, r2, r2
 8003320:	6239      	str	r1, [r7, #32]
 8003322:	415b      	adcs	r3, r3
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800332a:	4641      	mov	r1, r8
 800332c:	1854      	adds	r4, r2, r1
 800332e:	4649      	mov	r1, r9
 8003330:	eb43 0501 	adc.w	r5, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	00eb      	lsls	r3, r5, #3
 800333e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003342:	00e2      	lsls	r2, r4, #3
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	4643      	mov	r3, r8
 800334a:	18e3      	adds	r3, r4, r3
 800334c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003350:	464b      	mov	r3, r9
 8003352:	eb45 0303 	adc.w	r3, r5, r3
 8003356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003366:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003376:	4629      	mov	r1, r5
 8003378:	008b      	lsls	r3, r1, #2
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003380:	4621      	mov	r1, r4
 8003382:	008a      	lsls	r2, r1, #2
 8003384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003388:	f7fc ff82 	bl	8000290 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4b60      	ldr	r3, [pc, #384]	; (8003514 <UART_SetConfig+0x4e4>)
 8003392:	fba3 2302 	umull	r2, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	011c      	lsls	r4, r3, #4
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	61b9      	str	r1, [r7, #24]
 80033b4:	415b      	adcs	r3, r3
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033bc:	4641      	mov	r1, r8
 80033be:	1851      	adds	r1, r2, r1
 80033c0:	6139      	str	r1, [r7, #16]
 80033c2:	4649      	mov	r1, r9
 80033c4:	414b      	adcs	r3, r1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033d4:	4659      	mov	r1, fp
 80033d6:	00cb      	lsls	r3, r1, #3
 80033d8:	4651      	mov	r1, sl
 80033da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033de:	4651      	mov	r1, sl
 80033e0:	00ca      	lsls	r2, r1, #3
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	4642      	mov	r2, r8
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033f0:	464b      	mov	r3, r9
 80033f2:	460a      	mov	r2, r1
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	67bb      	str	r3, [r7, #120]	; 0x78
 8003406:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003414:	4649      	mov	r1, r9
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	4641      	mov	r1, r8
 800341a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341e:	4641      	mov	r1, r8
 8003420:	008a      	lsls	r2, r1, #2
 8003422:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003426:	f7fc ff33 	bl	8000290 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4b39      	ldr	r3, [pc, #228]	; (8003514 <UART_SetConfig+0x4e4>)
 8003430:	fba3 1302 	umull	r1, r3, r3, r2
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	2164      	movs	r1, #100	; 0x64
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	3332      	adds	r3, #50	; 0x32
 8003442:	4a34      	ldr	r2, [pc, #208]	; (8003514 <UART_SetConfig+0x4e4>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344e:	441c      	add	r4, r3
 8003450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003454:	2200      	movs	r2, #0
 8003456:	673b      	str	r3, [r7, #112]	; 0x70
 8003458:	677a      	str	r2, [r7, #116]	; 0x74
 800345a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800345e:	4642      	mov	r2, r8
 8003460:	464b      	mov	r3, r9
 8003462:	1891      	adds	r1, r2, r2
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	415b      	adcs	r3, r3
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800346e:	4641      	mov	r1, r8
 8003470:	1851      	adds	r1, r2, r1
 8003472:	6039      	str	r1, [r7, #0]
 8003474:	4649      	mov	r1, r9
 8003476:	414b      	adcs	r3, r1
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003486:	4659      	mov	r1, fp
 8003488:	00cb      	lsls	r3, r1, #3
 800348a:	4651      	mov	r1, sl
 800348c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003490:	4651      	mov	r1, sl
 8003492:	00ca      	lsls	r2, r1, #3
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	4603      	mov	r3, r0
 800349a:	4642      	mov	r2, r8
 800349c:	189b      	adds	r3, r3, r2
 800349e:	66bb      	str	r3, [r7, #104]	; 0x68
 80034a0:	464b      	mov	r3, r9
 80034a2:	460a      	mov	r2, r1
 80034a4:	eb42 0303 	adc.w	r3, r2, r3
 80034a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	663b      	str	r3, [r7, #96]	; 0x60
 80034b4:	667a      	str	r2, [r7, #100]	; 0x64
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034c2:	4649      	mov	r1, r9
 80034c4:	008b      	lsls	r3, r1, #2
 80034c6:	4641      	mov	r1, r8
 80034c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034cc:	4641      	mov	r1, r8
 80034ce:	008a      	lsls	r2, r1, #2
 80034d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034d4:	f7fc fedc 	bl	8000290 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <UART_SetConfig+0x4e4>)
 80034de:	fba3 1302 	umull	r1, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2164      	movs	r1, #100	; 0x64
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	3332      	adds	r3, #50	; 0x32
 80034f0:	4a08      	ldr	r2, [pc, #32]	; (8003514 <UART_SetConfig+0x4e4>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4422      	add	r2, r4
 8003504:	609a      	str	r2, [r3, #8]
}
 8003506:	bf00      	nop
 8003508:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	51eb851f 	.word	0x51eb851f

08003518 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003518:	b084      	sub	sp, #16
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	f107 001c 	add.w	r0, r7, #28
 8003526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	2b01      	cmp	r3, #1
 800352e:	d122      	bne.n	8003576 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 faa2 	bl	8003ab4 <USB_CoreReset>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e01a      	b.n	80035ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa96 	bl	8003ab4 <USB_CoreReset>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800358c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
 800359e:	e005      	b.n	80035ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10b      	bne.n	80035ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f043 0206 	orr.w	r2, r3, #6
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035d6:	b004      	add	sp, #16
 80035d8:	4770      	bx	lr

080035da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 0201 	bic.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d115      	bne.n	800364a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800362a:	2001      	movs	r0, #1
 800362c:	f7fd fd32 	bl	8001094 <HAL_Delay>
      ms++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa2e 	bl	8003a98 <USB_GetMode>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d01e      	beq.n	8003680 <USB_SetCurrentMode+0x84>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b31      	cmp	r3, #49	; 0x31
 8003646:	d9f0      	bls.n	800362a <USB_SetCurrentMode+0x2e>
 8003648:	e01a      	b.n	8003680 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d115      	bne.n	800367c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800365c:	2001      	movs	r0, #1
 800365e:	f7fd fd19 	bl	8001094 <HAL_Delay>
      ms++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3301      	adds	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fa15 	bl	8003a98 <USB_GetMode>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <USB_SetCurrentMode+0x84>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b31      	cmp	r3, #49	; 0x31
 8003678:	d9f0      	bls.n	800365c <USB_SetCurrentMode+0x60>
 800367a:	e001      	b.n	8003680 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e005      	b.n	800368c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b32      	cmp	r3, #50	; 0x32
 8003684:	d101      	bne.n	800368a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003694:	b084      	sub	sp, #16
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	e009      	b.n	80036c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3340      	adds	r3, #64	; 0x40
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	3301      	adds	r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b0e      	cmp	r3, #14
 80036cc:	d9f2      	bls.n	80036b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11c      	bne.n	800370e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
 800370c:	e00b      	b.n	8003726 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800372c:	461a      	mov	r2, r3
 800372e:	2300      	movs	r3, #0
 8003730:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003738:	4619      	mov	r1, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003740:	461a      	mov	r2, r3
 8003742:	680b      	ldr	r3, [r1, #0]
 8003744:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10c      	bne.n	8003766 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003752:	2100      	movs	r1, #0
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f965 	bl	8003a24 <USB_SetDevSpeed>
 800375a:	e008      	b.n	800376e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800375c:	2101      	movs	r1, #1
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f960 	bl	8003a24 <USB_SetDevSpeed>
 8003764:	e003      	b.n	800376e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003766:	2103      	movs	r1, #3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f95b 	bl	8003a24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800376e:	2110      	movs	r1, #16
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8f3 	bl	800395c <USB_FlushTxFifo>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f91f 	bl	80039c4 <USB_FlushRxFifo>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	461a      	mov	r2, r3
 8003798:	2300      	movs	r3, #0
 800379a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	461a      	mov	r2, r3
 80037a4:	2300      	movs	r3, #0
 80037a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ae:	461a      	mov	r2, r3
 80037b0:	2300      	movs	r3, #0
 80037b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	e043      	b.n	8003842 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d118      	bne.n	8003804 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	461a      	mov	r2, r3
 80037e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e013      	b.n	8003816 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e008      	b.n	8003816 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003810:	461a      	mov	r2, r3
 8003812:	2300      	movs	r3, #0
 8003814:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	461a      	mov	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	461a      	mov	r2, r3
 8003836:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800383a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3301      	adds	r3, #1
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	d3b7      	bcc.n	80037ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e043      	b.n	80038d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003866:	d118      	bne.n	800389a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	461a      	mov	r2, r3
 800387c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e013      	b.n	80038ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	461a      	mov	r2, r3
 8003892:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e008      	b.n	80038ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	2300      	movs	r3, #0
 80038aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	2300      	movs	r3, #0
 80038bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3b7      	bcc.n	8003850 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003900:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f043 0210 	orr.w	r2, r3, #16
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <USB_DevInit+0x2c4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f043 0208 	orr.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003954:	b004      	add	sp, #16
 8003956:	4770      	bx	lr
 8003958:	803c3800 	.word	0x803c3800

0800395c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <USB_FlushTxFifo+0x64>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e01b      	b.n	80039b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	daf2      	bge.n	800396a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	019b      	lsls	r3, r3, #6
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3301      	adds	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <USB_FlushTxFifo+0x64>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e006      	b.n	80039b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d0f0      	beq.n	8003994 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	00030d40 	.word	0x00030d40

080039c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3301      	adds	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <USB_FlushRxFifo+0x5c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e018      	b.n	8003a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	daf2      	bge.n	80039d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2210      	movs	r2, #16
 80039f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a08      	ldr	r2, [pc, #32]	; (8003a20 <USB_FlushRxFifo+0x5c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e006      	b.n	8003a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d0f0      	beq.n	80039f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	00030d40 	.word	0x00030d40

08003a24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a70:	f023 0303 	bic.w	r3, r3, #3
 8003a74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a13      	ldr	r2, [pc, #76]	; (8003b18 <USB_CoreReset+0x64>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e01b      	b.n	8003b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	daf2      	bge.n	8003ac0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f043 0201 	orr.w	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a09      	ldr	r2, [pc, #36]	; (8003b18 <USB_CoreReset+0x64>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e006      	b.n	8003b0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d0f0      	beq.n	8003aea <USB_CoreReset+0x36>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	00030d40 	.word	0x00030d40

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000000c 	.word	0x2000000c

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1b64      	subs	r4, r4, r5
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2600      	movs	r6, #0
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4d0b      	ldr	r5, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f001 f824 	bl	8004b88 <_init>
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2600      	movs	r6, #0
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08004e00 	.word	0x08004e00
 8003b64:	08004e00 	.word	0x08004e00
 8003b68:	08004e00 	.word	0x08004e00
 8003b6c:	08004e04 	.word	0x08004e04

08003b70 <memset>:
 8003b70:	4402      	add	r2, r0
 8003b72:	4603      	mov	r3, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <iprintf>:
 8003b80:	b40f      	push	{r0, r1, r2, r3}
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <iprintf+0x2c>)
 8003b84:	b513      	push	{r0, r1, r4, lr}
 8003b86:	681c      	ldr	r4, [r3, #0]
 8003b88:	b124      	cbz	r4, 8003b94 <iprintf+0x14>
 8003b8a:	69a3      	ldr	r3, [r4, #24]
 8003b8c:	b913      	cbnz	r3, 8003b94 <iprintf+0x14>
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 fa5e 	bl	8004050 <__sinit>
 8003b94:	ab05      	add	r3, sp, #20
 8003b96:	9a04      	ldr	r2, [sp, #16]
 8003b98:	68a1      	ldr	r1, [r4, #8]
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f000 fc67 	bl	8004470 <_vfiprintf_r>
 8003ba2:	b002      	add	sp, #8
 8003ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba8:	b004      	add	sp, #16
 8003baa:	4770      	bx	lr
 8003bac:	2000000c 	.word	0x2000000c

08003bb0 <_puts_r>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	460e      	mov	r6, r1
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	b118      	cbz	r0, 8003bc0 <_puts_r+0x10>
 8003bb8:	6983      	ldr	r3, [r0, #24]
 8003bba:	b90b      	cbnz	r3, 8003bc0 <_puts_r+0x10>
 8003bbc:	f000 fa48 	bl	8004050 <__sinit>
 8003bc0:	69ab      	ldr	r3, [r5, #24]
 8003bc2:	68ac      	ldr	r4, [r5, #8]
 8003bc4:	b913      	cbnz	r3, 8003bcc <_puts_r+0x1c>
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 fa42 	bl	8004050 <__sinit>
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <_puts_r+0xd0>)
 8003bce:	429c      	cmp	r4, r3
 8003bd0:	d120      	bne.n	8003c14 <_puts_r+0x64>
 8003bd2:	686c      	ldr	r4, [r5, #4]
 8003bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bd6:	07db      	lsls	r3, r3, #31
 8003bd8:	d405      	bmi.n	8003be6 <_puts_r+0x36>
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	0598      	lsls	r0, r3, #22
 8003bde:	d402      	bmi.n	8003be6 <_puts_r+0x36>
 8003be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003be2:	f000 fad3 	bl	800418c <__retarget_lock_acquire_recursive>
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	0719      	lsls	r1, r3, #28
 8003bea:	d51d      	bpl.n	8003c28 <_puts_r+0x78>
 8003bec:	6923      	ldr	r3, [r4, #16]
 8003bee:	b1db      	cbz	r3, 8003c28 <_puts_r+0x78>
 8003bf0:	3e01      	subs	r6, #1
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	60a3      	str	r3, [r4, #8]
 8003bfc:	bb39      	cbnz	r1, 8003c4e <_puts_r+0x9e>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da38      	bge.n	8003c74 <_puts_r+0xc4>
 8003c02:	4622      	mov	r2, r4
 8003c04:	210a      	movs	r1, #10
 8003c06:	4628      	mov	r0, r5
 8003c08:	f000 f848 	bl	8003c9c <__swbuf_r>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d011      	beq.n	8003c34 <_puts_r+0x84>
 8003c10:	250a      	movs	r5, #10
 8003c12:	e011      	b.n	8003c38 <_puts_r+0x88>
 8003c14:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <_puts_r+0xd4>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d101      	bne.n	8003c1e <_puts_r+0x6e>
 8003c1a:	68ac      	ldr	r4, [r5, #8]
 8003c1c:	e7da      	b.n	8003bd4 <_puts_r+0x24>
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <_puts_r+0xd8>)
 8003c20:	429c      	cmp	r4, r3
 8003c22:	bf08      	it	eq
 8003c24:	68ec      	ldreq	r4, [r5, #12]
 8003c26:	e7d5      	b.n	8003bd4 <_puts_r+0x24>
 8003c28:	4621      	mov	r1, r4
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f000 f888 	bl	8003d40 <__swsetup_r>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d0dd      	beq.n	8003bf0 <_puts_r+0x40>
 8003c34:	f04f 35ff 	mov.w	r5, #4294967295
 8003c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c3a:	07da      	lsls	r2, r3, #31
 8003c3c:	d405      	bmi.n	8003c4a <_puts_r+0x9a>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	059b      	lsls	r3, r3, #22
 8003c42:	d402      	bmi.n	8003c4a <_puts_r+0x9a>
 8003c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c46:	f000 faa2 	bl	800418e <__retarget_lock_release_recursive>
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	da04      	bge.n	8003c5c <_puts_r+0xac>
 8003c52:	69a2      	ldr	r2, [r4, #24]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	dc06      	bgt.n	8003c66 <_puts_r+0xb6>
 8003c58:	290a      	cmp	r1, #10
 8003c5a:	d004      	beq.n	8003c66 <_puts_r+0xb6>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	6022      	str	r2, [r4, #0]
 8003c62:	7019      	strb	r1, [r3, #0]
 8003c64:	e7c5      	b.n	8003bf2 <_puts_r+0x42>
 8003c66:	4622      	mov	r2, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f000 f817 	bl	8003c9c <__swbuf_r>
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d1bf      	bne.n	8003bf2 <_puts_r+0x42>
 8003c72:	e7df      	b.n	8003c34 <_puts_r+0x84>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	250a      	movs	r5, #10
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	6022      	str	r2, [r4, #0]
 8003c7c:	701d      	strb	r5, [r3, #0]
 8003c7e:	e7db      	b.n	8003c38 <_puts_r+0x88>
 8003c80:	08004d84 	.word	0x08004d84
 8003c84:	08004da4 	.word	0x08004da4
 8003c88:	08004d64 	.word	0x08004d64

08003c8c <puts>:
 8003c8c:	4b02      	ldr	r3, [pc, #8]	; (8003c98 <puts+0xc>)
 8003c8e:	4601      	mov	r1, r0
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f7ff bf8d 	b.w	8003bb0 <_puts_r>
 8003c96:	bf00      	nop
 8003c98:	2000000c 	.word	0x2000000c

08003c9c <__swbuf_r>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	460e      	mov	r6, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	b118      	cbz	r0, 8003cae <__swbuf_r+0x12>
 8003ca6:	6983      	ldr	r3, [r0, #24]
 8003ca8:	b90b      	cbnz	r3, 8003cae <__swbuf_r+0x12>
 8003caa:	f000 f9d1 	bl	8004050 <__sinit>
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <__swbuf_r+0x98>)
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	d12b      	bne.n	8003d0c <__swbuf_r+0x70>
 8003cb4:	686c      	ldr	r4, [r5, #4]
 8003cb6:	69a3      	ldr	r3, [r4, #24]
 8003cb8:	60a3      	str	r3, [r4, #8]
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	071a      	lsls	r2, r3, #28
 8003cbe:	d52f      	bpl.n	8003d20 <__swbuf_r+0x84>
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	b36b      	cbz	r3, 8003d20 <__swbuf_r+0x84>
 8003cc4:	6923      	ldr	r3, [r4, #16]
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	1ac0      	subs	r0, r0, r3
 8003cca:	6963      	ldr	r3, [r4, #20]
 8003ccc:	b2f6      	uxtb	r6, r6
 8003cce:	4283      	cmp	r3, r0
 8003cd0:	4637      	mov	r7, r6
 8003cd2:	dc04      	bgt.n	8003cde <__swbuf_r+0x42>
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f000 f926 	bl	8003f28 <_fflush_r>
 8003cdc:	bb30      	cbnz	r0, 8003d2c <__swbuf_r+0x90>
 8003cde:	68a3      	ldr	r3, [r4, #8]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	60a3      	str	r3, [r4, #8]
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	6022      	str	r2, [r4, #0]
 8003cea:	701e      	strb	r6, [r3, #0]
 8003cec:	6963      	ldr	r3, [r4, #20]
 8003cee:	3001      	adds	r0, #1
 8003cf0:	4283      	cmp	r3, r0
 8003cf2:	d004      	beq.n	8003cfe <__swbuf_r+0x62>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	07db      	lsls	r3, r3, #31
 8003cf8:	d506      	bpl.n	8003d08 <__swbuf_r+0x6c>
 8003cfa:	2e0a      	cmp	r6, #10
 8003cfc:	d104      	bne.n	8003d08 <__swbuf_r+0x6c>
 8003cfe:	4621      	mov	r1, r4
 8003d00:	4628      	mov	r0, r5
 8003d02:	f000 f911 	bl	8003f28 <_fflush_r>
 8003d06:	b988      	cbnz	r0, 8003d2c <__swbuf_r+0x90>
 8003d08:	4638      	mov	r0, r7
 8003d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <__swbuf_r+0x9c>)
 8003d0e:	429c      	cmp	r4, r3
 8003d10:	d101      	bne.n	8003d16 <__swbuf_r+0x7a>
 8003d12:	68ac      	ldr	r4, [r5, #8]
 8003d14:	e7cf      	b.n	8003cb6 <__swbuf_r+0x1a>
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <__swbuf_r+0xa0>)
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	bf08      	it	eq
 8003d1c:	68ec      	ldreq	r4, [r5, #12]
 8003d1e:	e7ca      	b.n	8003cb6 <__swbuf_r+0x1a>
 8003d20:	4621      	mov	r1, r4
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 f80c 	bl	8003d40 <__swsetup_r>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d0cb      	beq.n	8003cc4 <__swbuf_r+0x28>
 8003d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d30:	e7ea      	b.n	8003d08 <__swbuf_r+0x6c>
 8003d32:	bf00      	nop
 8003d34:	08004d84 	.word	0x08004d84
 8003d38:	08004da4 	.word	0x08004da4
 8003d3c:	08004d64 	.word	0x08004d64

08003d40 <__swsetup_r>:
 8003d40:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <__swsetup_r+0xcc>)
 8003d42:	b570      	push	{r4, r5, r6, lr}
 8003d44:	681d      	ldr	r5, [r3, #0]
 8003d46:	4606      	mov	r6, r0
 8003d48:	460c      	mov	r4, r1
 8003d4a:	b125      	cbz	r5, 8003d56 <__swsetup_r+0x16>
 8003d4c:	69ab      	ldr	r3, [r5, #24]
 8003d4e:	b913      	cbnz	r3, 8003d56 <__swsetup_r+0x16>
 8003d50:	4628      	mov	r0, r5
 8003d52:	f000 f97d 	bl	8004050 <__sinit>
 8003d56:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <__swsetup_r+0xd0>)
 8003d58:	429c      	cmp	r4, r3
 8003d5a:	d10f      	bne.n	8003d7c <__swsetup_r+0x3c>
 8003d5c:	686c      	ldr	r4, [r5, #4]
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d64:	0719      	lsls	r1, r3, #28
 8003d66:	d42c      	bmi.n	8003dc2 <__swsetup_r+0x82>
 8003d68:	06dd      	lsls	r5, r3, #27
 8003d6a:	d411      	bmi.n	8003d90 <__swsetup_r+0x50>
 8003d6c:	2309      	movs	r3, #9
 8003d6e:	6033      	str	r3, [r6, #0]
 8003d70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7a:	e03e      	b.n	8003dfa <__swsetup_r+0xba>
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <__swsetup_r+0xd4>)
 8003d7e:	429c      	cmp	r4, r3
 8003d80:	d101      	bne.n	8003d86 <__swsetup_r+0x46>
 8003d82:	68ac      	ldr	r4, [r5, #8]
 8003d84:	e7eb      	b.n	8003d5e <__swsetup_r+0x1e>
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <__swsetup_r+0xd8>)
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	bf08      	it	eq
 8003d8c:	68ec      	ldreq	r4, [r5, #12]
 8003d8e:	e7e6      	b.n	8003d5e <__swsetup_r+0x1e>
 8003d90:	0758      	lsls	r0, r3, #29
 8003d92:	d512      	bpl.n	8003dba <__swsetup_r+0x7a>
 8003d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d96:	b141      	cbz	r1, 8003daa <__swsetup_r+0x6a>
 8003d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	d002      	beq.n	8003da6 <__swsetup_r+0x66>
 8003da0:	4630      	mov	r0, r6
 8003da2:	f000 fa5b 	bl	800425c <_free_r>
 8003da6:	2300      	movs	r3, #0
 8003da8:	6363      	str	r3, [r4, #52]	; 0x34
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003db0:	81a3      	strh	r3, [r4, #12]
 8003db2:	2300      	movs	r3, #0
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	6923      	ldr	r3, [r4, #16]
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	f043 0308 	orr.w	r3, r3, #8
 8003dc0:	81a3      	strh	r3, [r4, #12]
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	b94b      	cbnz	r3, 8003dda <__swsetup_r+0x9a>
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd0:	d003      	beq.n	8003dda <__swsetup_r+0x9a>
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f000 fa01 	bl	80041dc <__smakebuf_r>
 8003dda:	89a0      	ldrh	r0, [r4, #12]
 8003ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003de0:	f010 0301 	ands.w	r3, r0, #1
 8003de4:	d00a      	beq.n	8003dfc <__swsetup_r+0xbc>
 8003de6:	2300      	movs	r3, #0
 8003de8:	60a3      	str	r3, [r4, #8]
 8003dea:	6963      	ldr	r3, [r4, #20]
 8003dec:	425b      	negs	r3, r3
 8003dee:	61a3      	str	r3, [r4, #24]
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	b943      	cbnz	r3, 8003e06 <__swsetup_r+0xc6>
 8003df4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003df8:	d1ba      	bne.n	8003d70 <__swsetup_r+0x30>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	0781      	lsls	r1, r0, #30
 8003dfe:	bf58      	it	pl
 8003e00:	6963      	ldrpl	r3, [r4, #20]
 8003e02:	60a3      	str	r3, [r4, #8]
 8003e04:	e7f4      	b.n	8003df0 <__swsetup_r+0xb0>
 8003e06:	2000      	movs	r0, #0
 8003e08:	e7f7      	b.n	8003dfa <__swsetup_r+0xba>
 8003e0a:	bf00      	nop
 8003e0c:	2000000c 	.word	0x2000000c
 8003e10:	08004d84 	.word	0x08004d84
 8003e14:	08004da4 	.word	0x08004da4
 8003e18:	08004d64 	.word	0x08004d64

08003e1c <__sflush_r>:
 8003e1c:	898a      	ldrh	r2, [r1, #12]
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e22:	4605      	mov	r5, r0
 8003e24:	0710      	lsls	r0, r2, #28
 8003e26:	460c      	mov	r4, r1
 8003e28:	d458      	bmi.n	8003edc <__sflush_r+0xc0>
 8003e2a:	684b      	ldr	r3, [r1, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	dc05      	bgt.n	8003e3c <__sflush_r+0x20>
 8003e30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dc02      	bgt.n	8003e3c <__sflush_r+0x20>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e3e:	2e00      	cmp	r6, #0
 8003e40:	d0f9      	beq.n	8003e36 <__sflush_r+0x1a>
 8003e42:	2300      	movs	r3, #0
 8003e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e48:	682f      	ldr	r7, [r5, #0]
 8003e4a:	602b      	str	r3, [r5, #0]
 8003e4c:	d032      	beq.n	8003eb4 <__sflush_r+0x98>
 8003e4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	075a      	lsls	r2, r3, #29
 8003e54:	d505      	bpl.n	8003e62 <__sflush_r+0x46>
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	1ac0      	subs	r0, r0, r3
 8003e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e5c:	b10b      	cbz	r3, 8003e62 <__sflush_r+0x46>
 8003e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e60:	1ac0      	subs	r0, r0, r3
 8003e62:	2300      	movs	r3, #0
 8003e64:	4602      	mov	r2, r0
 8003e66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e68:	6a21      	ldr	r1, [r4, #32]
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b0      	blx	r6
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	d106      	bne.n	8003e82 <__sflush_r+0x66>
 8003e74:	6829      	ldr	r1, [r5, #0]
 8003e76:	291d      	cmp	r1, #29
 8003e78:	d82c      	bhi.n	8003ed4 <__sflush_r+0xb8>
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <__sflush_r+0x108>)
 8003e7c:	40ca      	lsrs	r2, r1
 8003e7e:	07d6      	lsls	r6, r2, #31
 8003e80:	d528      	bpl.n	8003ed4 <__sflush_r+0xb8>
 8003e82:	2200      	movs	r2, #0
 8003e84:	6062      	str	r2, [r4, #4]
 8003e86:	04d9      	lsls	r1, r3, #19
 8003e88:	6922      	ldr	r2, [r4, #16]
 8003e8a:	6022      	str	r2, [r4, #0]
 8003e8c:	d504      	bpl.n	8003e98 <__sflush_r+0x7c>
 8003e8e:	1c42      	adds	r2, r0, #1
 8003e90:	d101      	bne.n	8003e96 <__sflush_r+0x7a>
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	b903      	cbnz	r3, 8003e98 <__sflush_r+0x7c>
 8003e96:	6560      	str	r0, [r4, #84]	; 0x54
 8003e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9a:	602f      	str	r7, [r5, #0]
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	d0ca      	beq.n	8003e36 <__sflush_r+0x1a>
 8003ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d002      	beq.n	8003eae <__sflush_r+0x92>
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f9d7 	bl	800425c <_free_r>
 8003eae:	2000      	movs	r0, #0
 8003eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8003eb2:	e7c1      	b.n	8003e38 <__sflush_r+0x1c>
 8003eb4:	6a21      	ldr	r1, [r4, #32]
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4628      	mov	r0, r5
 8003eba:	47b0      	blx	r6
 8003ebc:	1c41      	adds	r1, r0, #1
 8003ebe:	d1c7      	bne.n	8003e50 <__sflush_r+0x34>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0c4      	beq.n	8003e50 <__sflush_r+0x34>
 8003ec6:	2b1d      	cmp	r3, #29
 8003ec8:	d001      	beq.n	8003ece <__sflush_r+0xb2>
 8003eca:	2b16      	cmp	r3, #22
 8003ecc:	d101      	bne.n	8003ed2 <__sflush_r+0xb6>
 8003ece:	602f      	str	r7, [r5, #0]
 8003ed0:	e7b1      	b.n	8003e36 <__sflush_r+0x1a>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed8:	81a3      	strh	r3, [r4, #12]
 8003eda:	e7ad      	b.n	8003e38 <__sflush_r+0x1c>
 8003edc:	690f      	ldr	r7, [r1, #16]
 8003ede:	2f00      	cmp	r7, #0
 8003ee0:	d0a9      	beq.n	8003e36 <__sflush_r+0x1a>
 8003ee2:	0793      	lsls	r3, r2, #30
 8003ee4:	680e      	ldr	r6, [r1, #0]
 8003ee6:	bf08      	it	eq
 8003ee8:	694b      	ldreq	r3, [r1, #20]
 8003eea:	600f      	str	r7, [r1, #0]
 8003eec:	bf18      	it	ne
 8003eee:	2300      	movne	r3, #0
 8003ef0:	eba6 0807 	sub.w	r8, r6, r7
 8003ef4:	608b      	str	r3, [r1, #8]
 8003ef6:	f1b8 0f00 	cmp.w	r8, #0
 8003efa:	dd9c      	ble.n	8003e36 <__sflush_r+0x1a>
 8003efc:	6a21      	ldr	r1, [r4, #32]
 8003efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f00:	4643      	mov	r3, r8
 8003f02:	463a      	mov	r2, r7
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b0      	blx	r6
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	dc06      	bgt.n	8003f1a <__sflush_r+0xfe>
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	e78e      	b.n	8003e38 <__sflush_r+0x1c>
 8003f1a:	4407      	add	r7, r0
 8003f1c:	eba8 0800 	sub.w	r8, r8, r0
 8003f20:	e7e9      	b.n	8003ef6 <__sflush_r+0xda>
 8003f22:	bf00      	nop
 8003f24:	20400001 	.word	0x20400001

08003f28 <_fflush_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	690b      	ldr	r3, [r1, #16]
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	b913      	cbnz	r3, 8003f38 <_fflush_r+0x10>
 8003f32:	2500      	movs	r5, #0
 8003f34:	4628      	mov	r0, r5
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	b118      	cbz	r0, 8003f42 <_fflush_r+0x1a>
 8003f3a:	6983      	ldr	r3, [r0, #24]
 8003f3c:	b90b      	cbnz	r3, 8003f42 <_fflush_r+0x1a>
 8003f3e:	f000 f887 	bl	8004050 <__sinit>
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <_fflush_r+0x6c>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d11b      	bne.n	8003f80 <_fflush_r+0x58>
 8003f48:	686c      	ldr	r4, [r5, #4]
 8003f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0ef      	beq.n	8003f32 <_fflush_r+0xa>
 8003f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f54:	07d0      	lsls	r0, r2, #31
 8003f56:	d404      	bmi.n	8003f62 <_fflush_r+0x3a>
 8003f58:	0599      	lsls	r1, r3, #22
 8003f5a:	d402      	bmi.n	8003f62 <_fflush_r+0x3a>
 8003f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5e:	f000 f915 	bl	800418c <__retarget_lock_acquire_recursive>
 8003f62:	4628      	mov	r0, r5
 8003f64:	4621      	mov	r1, r4
 8003f66:	f7ff ff59 	bl	8003e1c <__sflush_r>
 8003f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f6c:	07da      	lsls	r2, r3, #31
 8003f6e:	4605      	mov	r5, r0
 8003f70:	d4e0      	bmi.n	8003f34 <_fflush_r+0xc>
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	059b      	lsls	r3, r3, #22
 8003f76:	d4dd      	bmi.n	8003f34 <_fflush_r+0xc>
 8003f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f7a:	f000 f908 	bl	800418e <__retarget_lock_release_recursive>
 8003f7e:	e7d9      	b.n	8003f34 <_fflush_r+0xc>
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <_fflush_r+0x70>)
 8003f82:	429c      	cmp	r4, r3
 8003f84:	d101      	bne.n	8003f8a <_fflush_r+0x62>
 8003f86:	68ac      	ldr	r4, [r5, #8]
 8003f88:	e7df      	b.n	8003f4a <_fflush_r+0x22>
 8003f8a:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <_fflush_r+0x74>)
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	bf08      	it	eq
 8003f90:	68ec      	ldreq	r4, [r5, #12]
 8003f92:	e7da      	b.n	8003f4a <_fflush_r+0x22>
 8003f94:	08004d84 	.word	0x08004d84
 8003f98:	08004da4 	.word	0x08004da4
 8003f9c:	08004d64 	.word	0x08004d64

08003fa0 <std>:
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8003faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fae:	6083      	str	r3, [r0, #8]
 8003fb0:	8181      	strh	r1, [r0, #12]
 8003fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8003fb4:	81c2      	strh	r2, [r0, #14]
 8003fb6:	6183      	str	r3, [r0, #24]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	2208      	movs	r2, #8
 8003fbc:	305c      	adds	r0, #92	; 0x5c
 8003fbe:	f7ff fdd7 	bl	8003b70 <memset>
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <std+0x38>)
 8003fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <std+0x3c>)
 8003fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <std+0x40>)
 8003fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <std+0x44>)
 8003fd0:	6224      	str	r4, [r4, #32]
 8003fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	bf00      	nop
 8003fd8:	08004a19 	.word	0x08004a19
 8003fdc:	08004a3b 	.word	0x08004a3b
 8003fe0:	08004a73 	.word	0x08004a73
 8003fe4:	08004a97 	.word	0x08004a97

08003fe8 <_cleanup_r>:
 8003fe8:	4901      	ldr	r1, [pc, #4]	; (8003ff0 <_cleanup_r+0x8>)
 8003fea:	f000 b8af 	b.w	800414c <_fwalk_reent>
 8003fee:	bf00      	nop
 8003ff0:	08003f29 	.word	0x08003f29

08003ff4 <__sfmoreglue>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	2268      	movs	r2, #104	; 0x68
 8003ff8:	1e4d      	subs	r5, r1, #1
 8003ffa:	4355      	muls	r5, r2
 8003ffc:	460e      	mov	r6, r1
 8003ffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004002:	f000 f997 	bl	8004334 <_malloc_r>
 8004006:	4604      	mov	r4, r0
 8004008:	b140      	cbz	r0, 800401c <__sfmoreglue+0x28>
 800400a:	2100      	movs	r1, #0
 800400c:	e9c0 1600 	strd	r1, r6, [r0]
 8004010:	300c      	adds	r0, #12
 8004012:	60a0      	str	r0, [r4, #8]
 8004014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004018:	f7ff fdaa 	bl	8003b70 <memset>
 800401c:	4620      	mov	r0, r4
 800401e:	bd70      	pop	{r4, r5, r6, pc}

08004020 <__sfp_lock_acquire>:
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <__sfp_lock_acquire+0x8>)
 8004022:	f000 b8b3 	b.w	800418c <__retarget_lock_acquire_recursive>
 8004026:	bf00      	nop
 8004028:	20000655 	.word	0x20000655

0800402c <__sfp_lock_release>:
 800402c:	4801      	ldr	r0, [pc, #4]	; (8004034 <__sfp_lock_release+0x8>)
 800402e:	f000 b8ae 	b.w	800418e <__retarget_lock_release_recursive>
 8004032:	bf00      	nop
 8004034:	20000655 	.word	0x20000655

08004038 <__sinit_lock_acquire>:
 8004038:	4801      	ldr	r0, [pc, #4]	; (8004040 <__sinit_lock_acquire+0x8>)
 800403a:	f000 b8a7 	b.w	800418c <__retarget_lock_acquire_recursive>
 800403e:	bf00      	nop
 8004040:	20000656 	.word	0x20000656

08004044 <__sinit_lock_release>:
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <__sinit_lock_release+0x8>)
 8004046:	f000 b8a2 	b.w	800418e <__retarget_lock_release_recursive>
 800404a:	bf00      	nop
 800404c:	20000656 	.word	0x20000656

08004050 <__sinit>:
 8004050:	b510      	push	{r4, lr}
 8004052:	4604      	mov	r4, r0
 8004054:	f7ff fff0 	bl	8004038 <__sinit_lock_acquire>
 8004058:	69a3      	ldr	r3, [r4, #24]
 800405a:	b11b      	cbz	r3, 8004064 <__sinit+0x14>
 800405c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004060:	f7ff bff0 	b.w	8004044 <__sinit_lock_release>
 8004064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004068:	6523      	str	r3, [r4, #80]	; 0x50
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <__sinit+0x68>)
 800406c:	4a13      	ldr	r2, [pc, #76]	; (80040bc <__sinit+0x6c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	62a2      	str	r2, [r4, #40]	; 0x28
 8004072:	42a3      	cmp	r3, r4
 8004074:	bf04      	itt	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	61a3      	streq	r3, [r4, #24]
 800407a:	4620      	mov	r0, r4
 800407c:	f000 f820 	bl	80040c0 <__sfp>
 8004080:	6060      	str	r0, [r4, #4]
 8004082:	4620      	mov	r0, r4
 8004084:	f000 f81c 	bl	80040c0 <__sfp>
 8004088:	60a0      	str	r0, [r4, #8]
 800408a:	4620      	mov	r0, r4
 800408c:	f000 f818 	bl	80040c0 <__sfp>
 8004090:	2200      	movs	r2, #0
 8004092:	60e0      	str	r0, [r4, #12]
 8004094:	2104      	movs	r1, #4
 8004096:	6860      	ldr	r0, [r4, #4]
 8004098:	f7ff ff82 	bl	8003fa0 <std>
 800409c:	68a0      	ldr	r0, [r4, #8]
 800409e:	2201      	movs	r2, #1
 80040a0:	2109      	movs	r1, #9
 80040a2:	f7ff ff7d 	bl	8003fa0 <std>
 80040a6:	68e0      	ldr	r0, [r4, #12]
 80040a8:	2202      	movs	r2, #2
 80040aa:	2112      	movs	r1, #18
 80040ac:	f7ff ff78 	bl	8003fa0 <std>
 80040b0:	2301      	movs	r3, #1
 80040b2:	61a3      	str	r3, [r4, #24]
 80040b4:	e7d2      	b.n	800405c <__sinit+0xc>
 80040b6:	bf00      	nop
 80040b8:	08004d60 	.word	0x08004d60
 80040bc:	08003fe9 	.word	0x08003fe9

080040c0 <__sfp>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	4607      	mov	r7, r0
 80040c4:	f7ff ffac 	bl	8004020 <__sfp_lock_acquire>
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <__sfp+0x84>)
 80040ca:	681e      	ldr	r6, [r3, #0]
 80040cc:	69b3      	ldr	r3, [r6, #24]
 80040ce:	b913      	cbnz	r3, 80040d6 <__sfp+0x16>
 80040d0:	4630      	mov	r0, r6
 80040d2:	f7ff ffbd 	bl	8004050 <__sinit>
 80040d6:	3648      	adds	r6, #72	; 0x48
 80040d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040dc:	3b01      	subs	r3, #1
 80040de:	d503      	bpl.n	80040e8 <__sfp+0x28>
 80040e0:	6833      	ldr	r3, [r6, #0]
 80040e2:	b30b      	cbz	r3, 8004128 <__sfp+0x68>
 80040e4:	6836      	ldr	r6, [r6, #0]
 80040e6:	e7f7      	b.n	80040d8 <__sfp+0x18>
 80040e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040ec:	b9d5      	cbnz	r5, 8004124 <__sfp+0x64>
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <__sfp+0x88>)
 80040f0:	60e3      	str	r3, [r4, #12]
 80040f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040f6:	6665      	str	r5, [r4, #100]	; 0x64
 80040f8:	f000 f847 	bl	800418a <__retarget_lock_init_recursive>
 80040fc:	f7ff ff96 	bl	800402c <__sfp_lock_release>
 8004100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004108:	6025      	str	r5, [r4, #0]
 800410a:	61a5      	str	r5, [r4, #24]
 800410c:	2208      	movs	r2, #8
 800410e:	4629      	mov	r1, r5
 8004110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004114:	f7ff fd2c 	bl	8003b70 <memset>
 8004118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800411c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004120:	4620      	mov	r0, r4
 8004122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004124:	3468      	adds	r4, #104	; 0x68
 8004126:	e7d9      	b.n	80040dc <__sfp+0x1c>
 8004128:	2104      	movs	r1, #4
 800412a:	4638      	mov	r0, r7
 800412c:	f7ff ff62 	bl	8003ff4 <__sfmoreglue>
 8004130:	4604      	mov	r4, r0
 8004132:	6030      	str	r0, [r6, #0]
 8004134:	2800      	cmp	r0, #0
 8004136:	d1d5      	bne.n	80040e4 <__sfp+0x24>
 8004138:	f7ff ff78 	bl	800402c <__sfp_lock_release>
 800413c:	230c      	movs	r3, #12
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	e7ee      	b.n	8004120 <__sfp+0x60>
 8004142:	bf00      	nop
 8004144:	08004d60 	.word	0x08004d60
 8004148:	ffff0001 	.word	0xffff0001

0800414c <_fwalk_reent>:
 800414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004150:	4606      	mov	r6, r0
 8004152:	4688      	mov	r8, r1
 8004154:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004158:	2700      	movs	r7, #0
 800415a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800415e:	f1b9 0901 	subs.w	r9, r9, #1
 8004162:	d505      	bpl.n	8004170 <_fwalk_reent+0x24>
 8004164:	6824      	ldr	r4, [r4, #0]
 8004166:	2c00      	cmp	r4, #0
 8004168:	d1f7      	bne.n	800415a <_fwalk_reent+0xe>
 800416a:	4638      	mov	r0, r7
 800416c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004170:	89ab      	ldrh	r3, [r5, #12]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d907      	bls.n	8004186 <_fwalk_reent+0x3a>
 8004176:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800417a:	3301      	adds	r3, #1
 800417c:	d003      	beq.n	8004186 <_fwalk_reent+0x3a>
 800417e:	4629      	mov	r1, r5
 8004180:	4630      	mov	r0, r6
 8004182:	47c0      	blx	r8
 8004184:	4307      	orrs	r7, r0
 8004186:	3568      	adds	r5, #104	; 0x68
 8004188:	e7e9      	b.n	800415e <_fwalk_reent+0x12>

0800418a <__retarget_lock_init_recursive>:
 800418a:	4770      	bx	lr

0800418c <__retarget_lock_acquire_recursive>:
 800418c:	4770      	bx	lr

0800418e <__retarget_lock_release_recursive>:
 800418e:	4770      	bx	lr

08004190 <__swhatbuf_r>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	460e      	mov	r6, r1
 8004194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004198:	2900      	cmp	r1, #0
 800419a:	b096      	sub	sp, #88	; 0x58
 800419c:	4614      	mov	r4, r2
 800419e:	461d      	mov	r5, r3
 80041a0:	da08      	bge.n	80041b4 <__swhatbuf_r+0x24>
 80041a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	602a      	str	r2, [r5, #0]
 80041aa:	061a      	lsls	r2, r3, #24
 80041ac:	d410      	bmi.n	80041d0 <__swhatbuf_r+0x40>
 80041ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b2:	e00e      	b.n	80041d2 <__swhatbuf_r+0x42>
 80041b4:	466a      	mov	r2, sp
 80041b6:	f000 fc95 	bl	8004ae4 <_fstat_r>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	dbf1      	blt.n	80041a2 <__swhatbuf_r+0x12>
 80041be:	9a01      	ldr	r2, [sp, #4]
 80041c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80041c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80041c8:	425a      	negs	r2, r3
 80041ca:	415a      	adcs	r2, r3
 80041cc:	602a      	str	r2, [r5, #0]
 80041ce:	e7ee      	b.n	80041ae <__swhatbuf_r+0x1e>
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	2000      	movs	r0, #0
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	b016      	add	sp, #88	; 0x58
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080041dc <__smakebuf_r>:
 80041dc:	898b      	ldrh	r3, [r1, #12]
 80041de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041e0:	079d      	lsls	r5, r3, #30
 80041e2:	4606      	mov	r6, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	d507      	bpl.n	80041f8 <__smakebuf_r+0x1c>
 80041e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	6123      	str	r3, [r4, #16]
 80041f0:	2301      	movs	r3, #1
 80041f2:	6163      	str	r3, [r4, #20]
 80041f4:	b002      	add	sp, #8
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	ab01      	add	r3, sp, #4
 80041fa:	466a      	mov	r2, sp
 80041fc:	f7ff ffc8 	bl	8004190 <__swhatbuf_r>
 8004200:	9900      	ldr	r1, [sp, #0]
 8004202:	4605      	mov	r5, r0
 8004204:	4630      	mov	r0, r6
 8004206:	f000 f895 	bl	8004334 <_malloc_r>
 800420a:	b948      	cbnz	r0, 8004220 <__smakebuf_r+0x44>
 800420c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004210:	059a      	lsls	r2, r3, #22
 8004212:	d4ef      	bmi.n	80041f4 <__smakebuf_r+0x18>
 8004214:	f023 0303 	bic.w	r3, r3, #3
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	e7e3      	b.n	80041e8 <__smakebuf_r+0xc>
 8004220:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <__smakebuf_r+0x7c>)
 8004222:	62b3      	str	r3, [r6, #40]	; 0x28
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	6020      	str	r0, [r4, #0]
 8004228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	9b00      	ldr	r3, [sp, #0]
 8004230:	6163      	str	r3, [r4, #20]
 8004232:	9b01      	ldr	r3, [sp, #4]
 8004234:	6120      	str	r0, [r4, #16]
 8004236:	b15b      	cbz	r3, 8004250 <__smakebuf_r+0x74>
 8004238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800423c:	4630      	mov	r0, r6
 800423e:	f000 fc63 	bl	8004b08 <_isatty_r>
 8004242:	b128      	cbz	r0, 8004250 <__smakebuf_r+0x74>
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	81a3      	strh	r3, [r4, #12]
 8004250:	89a0      	ldrh	r0, [r4, #12]
 8004252:	4305      	orrs	r5, r0
 8004254:	81a5      	strh	r5, [r4, #12]
 8004256:	e7cd      	b.n	80041f4 <__smakebuf_r+0x18>
 8004258:	08003fe9 	.word	0x08003fe9

0800425c <_free_r>:
 800425c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800425e:	2900      	cmp	r1, #0
 8004260:	d044      	beq.n	80042ec <_free_r+0x90>
 8004262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004266:	9001      	str	r0, [sp, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f1a1 0404 	sub.w	r4, r1, #4
 800426e:	bfb8      	it	lt
 8004270:	18e4      	addlt	r4, r4, r3
 8004272:	f000 fc6b 	bl	8004b4c <__malloc_lock>
 8004276:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <_free_r+0x94>)
 8004278:	9801      	ldr	r0, [sp, #4]
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	b933      	cbnz	r3, 800428c <_free_r+0x30>
 800427e:	6063      	str	r3, [r4, #4]
 8004280:	6014      	str	r4, [r2, #0]
 8004282:	b003      	add	sp, #12
 8004284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004288:	f000 bc66 	b.w	8004b58 <__malloc_unlock>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d908      	bls.n	80042a2 <_free_r+0x46>
 8004290:	6825      	ldr	r5, [r4, #0]
 8004292:	1961      	adds	r1, r4, r5
 8004294:	428b      	cmp	r3, r1
 8004296:	bf01      	itttt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	1949      	addeq	r1, r1, r5
 800429e:	6021      	streq	r1, [r4, #0]
 80042a0:	e7ed      	b.n	800427e <_free_r+0x22>
 80042a2:	461a      	mov	r2, r3
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b10b      	cbz	r3, 80042ac <_free_r+0x50>
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d9fa      	bls.n	80042a2 <_free_r+0x46>
 80042ac:	6811      	ldr	r1, [r2, #0]
 80042ae:	1855      	adds	r5, r2, r1
 80042b0:	42a5      	cmp	r5, r4
 80042b2:	d10b      	bne.n	80042cc <_free_r+0x70>
 80042b4:	6824      	ldr	r4, [r4, #0]
 80042b6:	4421      	add	r1, r4
 80042b8:	1854      	adds	r4, r2, r1
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	6011      	str	r1, [r2, #0]
 80042be:	d1e0      	bne.n	8004282 <_free_r+0x26>
 80042c0:	681c      	ldr	r4, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	6053      	str	r3, [r2, #4]
 80042c6:	4421      	add	r1, r4
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	e7da      	b.n	8004282 <_free_r+0x26>
 80042cc:	d902      	bls.n	80042d4 <_free_r+0x78>
 80042ce:	230c      	movs	r3, #12
 80042d0:	6003      	str	r3, [r0, #0]
 80042d2:	e7d6      	b.n	8004282 <_free_r+0x26>
 80042d4:	6825      	ldr	r5, [r4, #0]
 80042d6:	1961      	adds	r1, r4, r5
 80042d8:	428b      	cmp	r3, r1
 80042da:	bf04      	itt	eq
 80042dc:	6819      	ldreq	r1, [r3, #0]
 80042de:	685b      	ldreq	r3, [r3, #4]
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	bf04      	itt	eq
 80042e4:	1949      	addeq	r1, r1, r5
 80042e6:	6021      	streq	r1, [r4, #0]
 80042e8:	6054      	str	r4, [r2, #4]
 80042ea:	e7ca      	b.n	8004282 <_free_r+0x26>
 80042ec:	b003      	add	sp, #12
 80042ee:	bd30      	pop	{r4, r5, pc}
 80042f0:	20000658 	.word	0x20000658

080042f4 <sbrk_aligned>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4e0e      	ldr	r6, [pc, #56]	; (8004330 <sbrk_aligned+0x3c>)
 80042f8:	460c      	mov	r4, r1
 80042fa:	6831      	ldr	r1, [r6, #0]
 80042fc:	4605      	mov	r5, r0
 80042fe:	b911      	cbnz	r1, 8004306 <sbrk_aligned+0x12>
 8004300:	f000 fb7a 	bl	80049f8 <_sbrk_r>
 8004304:	6030      	str	r0, [r6, #0]
 8004306:	4621      	mov	r1, r4
 8004308:	4628      	mov	r0, r5
 800430a:	f000 fb75 	bl	80049f8 <_sbrk_r>
 800430e:	1c43      	adds	r3, r0, #1
 8004310:	d00a      	beq.n	8004328 <sbrk_aligned+0x34>
 8004312:	1cc4      	adds	r4, r0, #3
 8004314:	f024 0403 	bic.w	r4, r4, #3
 8004318:	42a0      	cmp	r0, r4
 800431a:	d007      	beq.n	800432c <sbrk_aligned+0x38>
 800431c:	1a21      	subs	r1, r4, r0
 800431e:	4628      	mov	r0, r5
 8004320:	f000 fb6a 	bl	80049f8 <_sbrk_r>
 8004324:	3001      	adds	r0, #1
 8004326:	d101      	bne.n	800432c <sbrk_aligned+0x38>
 8004328:	f04f 34ff 	mov.w	r4, #4294967295
 800432c:	4620      	mov	r0, r4
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	2000065c 	.word	0x2000065c

08004334 <_malloc_r>:
 8004334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004338:	1ccd      	adds	r5, r1, #3
 800433a:	f025 0503 	bic.w	r5, r5, #3
 800433e:	3508      	adds	r5, #8
 8004340:	2d0c      	cmp	r5, #12
 8004342:	bf38      	it	cc
 8004344:	250c      	movcc	r5, #12
 8004346:	2d00      	cmp	r5, #0
 8004348:	4607      	mov	r7, r0
 800434a:	db01      	blt.n	8004350 <_malloc_r+0x1c>
 800434c:	42a9      	cmp	r1, r5
 800434e:	d905      	bls.n	800435c <_malloc_r+0x28>
 8004350:	230c      	movs	r3, #12
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	2600      	movs	r6, #0
 8004356:	4630      	mov	r0, r6
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800435c:	4e2e      	ldr	r6, [pc, #184]	; (8004418 <_malloc_r+0xe4>)
 800435e:	f000 fbf5 	bl	8004b4c <__malloc_lock>
 8004362:	6833      	ldr	r3, [r6, #0]
 8004364:	461c      	mov	r4, r3
 8004366:	bb34      	cbnz	r4, 80043b6 <_malloc_r+0x82>
 8004368:	4629      	mov	r1, r5
 800436a:	4638      	mov	r0, r7
 800436c:	f7ff ffc2 	bl	80042f4 <sbrk_aligned>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	4604      	mov	r4, r0
 8004374:	d14d      	bne.n	8004412 <_malloc_r+0xde>
 8004376:	6834      	ldr	r4, [r6, #0]
 8004378:	4626      	mov	r6, r4
 800437a:	2e00      	cmp	r6, #0
 800437c:	d140      	bne.n	8004400 <_malloc_r+0xcc>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	4631      	mov	r1, r6
 8004382:	4638      	mov	r0, r7
 8004384:	eb04 0803 	add.w	r8, r4, r3
 8004388:	f000 fb36 	bl	80049f8 <_sbrk_r>
 800438c:	4580      	cmp	r8, r0
 800438e:	d13a      	bne.n	8004406 <_malloc_r+0xd2>
 8004390:	6821      	ldr	r1, [r4, #0]
 8004392:	3503      	adds	r5, #3
 8004394:	1a6d      	subs	r5, r5, r1
 8004396:	f025 0503 	bic.w	r5, r5, #3
 800439a:	3508      	adds	r5, #8
 800439c:	2d0c      	cmp	r5, #12
 800439e:	bf38      	it	cc
 80043a0:	250c      	movcc	r5, #12
 80043a2:	4629      	mov	r1, r5
 80043a4:	4638      	mov	r0, r7
 80043a6:	f7ff ffa5 	bl	80042f4 <sbrk_aligned>
 80043aa:	3001      	adds	r0, #1
 80043ac:	d02b      	beq.n	8004406 <_malloc_r+0xd2>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	442b      	add	r3, r5
 80043b2:	6023      	str	r3, [r4, #0]
 80043b4:	e00e      	b.n	80043d4 <_malloc_r+0xa0>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	1b52      	subs	r2, r2, r5
 80043ba:	d41e      	bmi.n	80043fa <_malloc_r+0xc6>
 80043bc:	2a0b      	cmp	r2, #11
 80043be:	d916      	bls.n	80043ee <_malloc_r+0xba>
 80043c0:	1961      	adds	r1, r4, r5
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	6025      	str	r5, [r4, #0]
 80043c6:	bf18      	it	ne
 80043c8:	6059      	strne	r1, [r3, #4]
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	bf08      	it	eq
 80043ce:	6031      	streq	r1, [r6, #0]
 80043d0:	5162      	str	r2, [r4, r5]
 80043d2:	604b      	str	r3, [r1, #4]
 80043d4:	4638      	mov	r0, r7
 80043d6:	f104 060b 	add.w	r6, r4, #11
 80043da:	f000 fbbd 	bl	8004b58 <__malloc_unlock>
 80043de:	f026 0607 	bic.w	r6, r6, #7
 80043e2:	1d23      	adds	r3, r4, #4
 80043e4:	1af2      	subs	r2, r6, r3
 80043e6:	d0b6      	beq.n	8004356 <_malloc_r+0x22>
 80043e8:	1b9b      	subs	r3, r3, r6
 80043ea:	50a3      	str	r3, [r4, r2]
 80043ec:	e7b3      	b.n	8004356 <_malloc_r+0x22>
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	42a3      	cmp	r3, r4
 80043f2:	bf0c      	ite	eq
 80043f4:	6032      	streq	r2, [r6, #0]
 80043f6:	605a      	strne	r2, [r3, #4]
 80043f8:	e7ec      	b.n	80043d4 <_malloc_r+0xa0>
 80043fa:	4623      	mov	r3, r4
 80043fc:	6864      	ldr	r4, [r4, #4]
 80043fe:	e7b2      	b.n	8004366 <_malloc_r+0x32>
 8004400:	4634      	mov	r4, r6
 8004402:	6876      	ldr	r6, [r6, #4]
 8004404:	e7b9      	b.n	800437a <_malloc_r+0x46>
 8004406:	230c      	movs	r3, #12
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4638      	mov	r0, r7
 800440c:	f000 fba4 	bl	8004b58 <__malloc_unlock>
 8004410:	e7a1      	b.n	8004356 <_malloc_r+0x22>
 8004412:	6025      	str	r5, [r4, #0]
 8004414:	e7de      	b.n	80043d4 <_malloc_r+0xa0>
 8004416:	bf00      	nop
 8004418:	20000658 	.word	0x20000658

0800441c <__sfputc_r>:
 800441c:	6893      	ldr	r3, [r2, #8]
 800441e:	3b01      	subs	r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	b410      	push	{r4}
 8004424:	6093      	str	r3, [r2, #8]
 8004426:	da08      	bge.n	800443a <__sfputc_r+0x1e>
 8004428:	6994      	ldr	r4, [r2, #24]
 800442a:	42a3      	cmp	r3, r4
 800442c:	db01      	blt.n	8004432 <__sfputc_r+0x16>
 800442e:	290a      	cmp	r1, #10
 8004430:	d103      	bne.n	800443a <__sfputc_r+0x1e>
 8004432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004436:	f7ff bc31 	b.w	8003c9c <__swbuf_r>
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	1c58      	adds	r0, r3, #1
 800443e:	6010      	str	r0, [r2, #0]
 8004440:	7019      	strb	r1, [r3, #0]
 8004442:	4608      	mov	r0, r1
 8004444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004448:	4770      	bx	lr

0800444a <__sfputs_r>:
 800444a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444c:	4606      	mov	r6, r0
 800444e:	460f      	mov	r7, r1
 8004450:	4614      	mov	r4, r2
 8004452:	18d5      	adds	r5, r2, r3
 8004454:	42ac      	cmp	r4, r5
 8004456:	d101      	bne.n	800445c <__sfputs_r+0x12>
 8004458:	2000      	movs	r0, #0
 800445a:	e007      	b.n	800446c <__sfputs_r+0x22>
 800445c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004460:	463a      	mov	r2, r7
 8004462:	4630      	mov	r0, r6
 8004464:	f7ff ffda 	bl	800441c <__sfputc_r>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d1f3      	bne.n	8004454 <__sfputs_r+0xa>
 800446c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004470 <_vfiprintf_r>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	460d      	mov	r5, r1
 8004476:	b09d      	sub	sp, #116	; 0x74
 8004478:	4614      	mov	r4, r2
 800447a:	4698      	mov	r8, r3
 800447c:	4606      	mov	r6, r0
 800447e:	b118      	cbz	r0, 8004488 <_vfiprintf_r+0x18>
 8004480:	6983      	ldr	r3, [r0, #24]
 8004482:	b90b      	cbnz	r3, 8004488 <_vfiprintf_r+0x18>
 8004484:	f7ff fde4 	bl	8004050 <__sinit>
 8004488:	4b89      	ldr	r3, [pc, #548]	; (80046b0 <_vfiprintf_r+0x240>)
 800448a:	429d      	cmp	r5, r3
 800448c:	d11b      	bne.n	80044c6 <_vfiprintf_r+0x56>
 800448e:	6875      	ldr	r5, [r6, #4]
 8004490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004492:	07d9      	lsls	r1, r3, #31
 8004494:	d405      	bmi.n	80044a2 <_vfiprintf_r+0x32>
 8004496:	89ab      	ldrh	r3, [r5, #12]
 8004498:	059a      	lsls	r2, r3, #22
 800449a:	d402      	bmi.n	80044a2 <_vfiprintf_r+0x32>
 800449c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800449e:	f7ff fe75 	bl	800418c <__retarget_lock_acquire_recursive>
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	d501      	bpl.n	80044ac <_vfiprintf_r+0x3c>
 80044a8:	692b      	ldr	r3, [r5, #16]
 80044aa:	b9eb      	cbnz	r3, 80044e8 <_vfiprintf_r+0x78>
 80044ac:	4629      	mov	r1, r5
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7ff fc46 	bl	8003d40 <__swsetup_r>
 80044b4:	b1c0      	cbz	r0, 80044e8 <_vfiprintf_r+0x78>
 80044b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b8:	07dc      	lsls	r4, r3, #31
 80044ba:	d50e      	bpl.n	80044da <_vfiprintf_r+0x6a>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	b01d      	add	sp, #116	; 0x74
 80044c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c6:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <_vfiprintf_r+0x244>)
 80044c8:	429d      	cmp	r5, r3
 80044ca:	d101      	bne.n	80044d0 <_vfiprintf_r+0x60>
 80044cc:	68b5      	ldr	r5, [r6, #8]
 80044ce:	e7df      	b.n	8004490 <_vfiprintf_r+0x20>
 80044d0:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <_vfiprintf_r+0x248>)
 80044d2:	429d      	cmp	r5, r3
 80044d4:	bf08      	it	eq
 80044d6:	68f5      	ldreq	r5, [r6, #12]
 80044d8:	e7da      	b.n	8004490 <_vfiprintf_r+0x20>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d4ed      	bmi.n	80044bc <_vfiprintf_r+0x4c>
 80044e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e2:	f7ff fe54 	bl	800418e <__retarget_lock_release_recursive>
 80044e6:	e7e9      	b.n	80044bc <_vfiprintf_r+0x4c>
 80044e8:	2300      	movs	r3, #0
 80044ea:	9309      	str	r3, [sp, #36]	; 0x24
 80044ec:	2320      	movs	r3, #32
 80044ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f6:	2330      	movs	r3, #48	; 0x30
 80044f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046bc <_vfiprintf_r+0x24c>
 80044fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004500:	f04f 0901 	mov.w	r9, #1
 8004504:	4623      	mov	r3, r4
 8004506:	469a      	mov	sl, r3
 8004508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800450c:	b10a      	cbz	r2, 8004512 <_vfiprintf_r+0xa2>
 800450e:	2a25      	cmp	r2, #37	; 0x25
 8004510:	d1f9      	bne.n	8004506 <_vfiprintf_r+0x96>
 8004512:	ebba 0b04 	subs.w	fp, sl, r4
 8004516:	d00b      	beq.n	8004530 <_vfiprintf_r+0xc0>
 8004518:	465b      	mov	r3, fp
 800451a:	4622      	mov	r2, r4
 800451c:	4629      	mov	r1, r5
 800451e:	4630      	mov	r0, r6
 8004520:	f7ff ff93 	bl	800444a <__sfputs_r>
 8004524:	3001      	adds	r0, #1
 8004526:	f000 80aa 	beq.w	800467e <_vfiprintf_r+0x20e>
 800452a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800452c:	445a      	add	r2, fp
 800452e:	9209      	str	r2, [sp, #36]	; 0x24
 8004530:	f89a 3000 	ldrb.w	r3, [sl]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a2 	beq.w	800467e <_vfiprintf_r+0x20e>
 800453a:	2300      	movs	r3, #0
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004544:	f10a 0a01 	add.w	sl, sl, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	9307      	str	r3, [sp, #28]
 800454c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004550:	931a      	str	r3, [sp, #104]	; 0x68
 8004552:	4654      	mov	r4, sl
 8004554:	2205      	movs	r2, #5
 8004556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455a:	4858      	ldr	r0, [pc, #352]	; (80046bc <_vfiprintf_r+0x24c>)
 800455c:	f7fb fe48 	bl	80001f0 <memchr>
 8004560:	9a04      	ldr	r2, [sp, #16]
 8004562:	b9d8      	cbnz	r0, 800459c <_vfiprintf_r+0x12c>
 8004564:	06d1      	lsls	r1, r2, #27
 8004566:	bf44      	itt	mi
 8004568:	2320      	movmi	r3, #32
 800456a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800456e:	0713      	lsls	r3, r2, #28
 8004570:	bf44      	itt	mi
 8004572:	232b      	movmi	r3, #43	; 0x2b
 8004574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004578:	f89a 3000 	ldrb.w	r3, [sl]
 800457c:	2b2a      	cmp	r3, #42	; 0x2a
 800457e:	d015      	beq.n	80045ac <_vfiprintf_r+0x13c>
 8004580:	9a07      	ldr	r2, [sp, #28]
 8004582:	4654      	mov	r4, sl
 8004584:	2000      	movs	r0, #0
 8004586:	f04f 0c0a 	mov.w	ip, #10
 800458a:	4621      	mov	r1, r4
 800458c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004590:	3b30      	subs	r3, #48	; 0x30
 8004592:	2b09      	cmp	r3, #9
 8004594:	d94e      	bls.n	8004634 <_vfiprintf_r+0x1c4>
 8004596:	b1b0      	cbz	r0, 80045c6 <_vfiprintf_r+0x156>
 8004598:	9207      	str	r2, [sp, #28]
 800459a:	e014      	b.n	80045c6 <_vfiprintf_r+0x156>
 800459c:	eba0 0308 	sub.w	r3, r0, r8
 80045a0:	fa09 f303 	lsl.w	r3, r9, r3
 80045a4:	4313      	orrs	r3, r2
 80045a6:	9304      	str	r3, [sp, #16]
 80045a8:	46a2      	mov	sl, r4
 80045aa:	e7d2      	b.n	8004552 <_vfiprintf_r+0xe2>
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	9103      	str	r1, [sp, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bfbb      	ittet	lt
 80045b8:	425b      	neglt	r3, r3
 80045ba:	f042 0202 	orrlt.w	r2, r2, #2
 80045be:	9307      	strge	r3, [sp, #28]
 80045c0:	9307      	strlt	r3, [sp, #28]
 80045c2:	bfb8      	it	lt
 80045c4:	9204      	strlt	r2, [sp, #16]
 80045c6:	7823      	ldrb	r3, [r4, #0]
 80045c8:	2b2e      	cmp	r3, #46	; 0x2e
 80045ca:	d10c      	bne.n	80045e6 <_vfiprintf_r+0x176>
 80045cc:	7863      	ldrb	r3, [r4, #1]
 80045ce:	2b2a      	cmp	r3, #42	; 0x2a
 80045d0:	d135      	bne.n	800463e <_vfiprintf_r+0x1ce>
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	9203      	str	r2, [sp, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	f04f 33ff 	movlt.w	r3, #4294967295
 80045e2:	3402      	adds	r4, #2
 80045e4:	9305      	str	r3, [sp, #20]
 80045e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046cc <_vfiprintf_r+0x25c>
 80045ea:	7821      	ldrb	r1, [r4, #0]
 80045ec:	2203      	movs	r2, #3
 80045ee:	4650      	mov	r0, sl
 80045f0:	f7fb fdfe 	bl	80001f0 <memchr>
 80045f4:	b140      	cbz	r0, 8004608 <_vfiprintf_r+0x198>
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	eba0 000a 	sub.w	r0, r0, sl
 80045fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004600:	9b04      	ldr	r3, [sp, #16]
 8004602:	4303      	orrs	r3, r0
 8004604:	3401      	adds	r4, #1
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800460c:	482c      	ldr	r0, [pc, #176]	; (80046c0 <_vfiprintf_r+0x250>)
 800460e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004612:	2206      	movs	r2, #6
 8004614:	f7fb fdec 	bl	80001f0 <memchr>
 8004618:	2800      	cmp	r0, #0
 800461a:	d03f      	beq.n	800469c <_vfiprintf_r+0x22c>
 800461c:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <_vfiprintf_r+0x254>)
 800461e:	bb1b      	cbnz	r3, 8004668 <_vfiprintf_r+0x1f8>
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	3307      	adds	r3, #7
 8004624:	f023 0307 	bic.w	r3, r3, #7
 8004628:	3308      	adds	r3, #8
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800462e:	443b      	add	r3, r7
 8004630:	9309      	str	r3, [sp, #36]	; 0x24
 8004632:	e767      	b.n	8004504 <_vfiprintf_r+0x94>
 8004634:	fb0c 3202 	mla	r2, ip, r2, r3
 8004638:	460c      	mov	r4, r1
 800463a:	2001      	movs	r0, #1
 800463c:	e7a5      	b.n	800458a <_vfiprintf_r+0x11a>
 800463e:	2300      	movs	r3, #0
 8004640:	3401      	adds	r4, #1
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	4619      	mov	r1, r3
 8004646:	f04f 0c0a 	mov.w	ip, #10
 800464a:	4620      	mov	r0, r4
 800464c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004650:	3a30      	subs	r2, #48	; 0x30
 8004652:	2a09      	cmp	r2, #9
 8004654:	d903      	bls.n	800465e <_vfiprintf_r+0x1ee>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0c5      	beq.n	80045e6 <_vfiprintf_r+0x176>
 800465a:	9105      	str	r1, [sp, #20]
 800465c:	e7c3      	b.n	80045e6 <_vfiprintf_r+0x176>
 800465e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004662:	4604      	mov	r4, r0
 8004664:	2301      	movs	r3, #1
 8004666:	e7f0      	b.n	800464a <_vfiprintf_r+0x1da>
 8004668:	ab03      	add	r3, sp, #12
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	462a      	mov	r2, r5
 800466e:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <_vfiprintf_r+0x258>)
 8004670:	a904      	add	r1, sp, #16
 8004672:	4630      	mov	r0, r6
 8004674:	f3af 8000 	nop.w
 8004678:	4607      	mov	r7, r0
 800467a:	1c78      	adds	r0, r7, #1
 800467c:	d1d6      	bne.n	800462c <_vfiprintf_r+0x1bc>
 800467e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004680:	07d9      	lsls	r1, r3, #31
 8004682:	d405      	bmi.n	8004690 <_vfiprintf_r+0x220>
 8004684:	89ab      	ldrh	r3, [r5, #12]
 8004686:	059a      	lsls	r2, r3, #22
 8004688:	d402      	bmi.n	8004690 <_vfiprintf_r+0x220>
 800468a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800468c:	f7ff fd7f 	bl	800418e <__retarget_lock_release_recursive>
 8004690:	89ab      	ldrh	r3, [r5, #12]
 8004692:	065b      	lsls	r3, r3, #25
 8004694:	f53f af12 	bmi.w	80044bc <_vfiprintf_r+0x4c>
 8004698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800469a:	e711      	b.n	80044c0 <_vfiprintf_r+0x50>
 800469c:	ab03      	add	r3, sp, #12
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	462a      	mov	r2, r5
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <_vfiprintf_r+0x258>)
 80046a4:	a904      	add	r1, sp, #16
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 f880 	bl	80047ac <_printf_i>
 80046ac:	e7e4      	b.n	8004678 <_vfiprintf_r+0x208>
 80046ae:	bf00      	nop
 80046b0:	08004d84 	.word	0x08004d84
 80046b4:	08004da4 	.word	0x08004da4
 80046b8:	08004d64 	.word	0x08004d64
 80046bc:	08004dc4 	.word	0x08004dc4
 80046c0:	08004dce 	.word	0x08004dce
 80046c4:	00000000 	.word	0x00000000
 80046c8:	0800444b 	.word	0x0800444b
 80046cc:	08004dca 	.word	0x08004dca

080046d0 <_printf_common>:
 80046d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d4:	4616      	mov	r6, r2
 80046d6:	4699      	mov	r9, r3
 80046d8:	688a      	ldr	r2, [r1, #8]
 80046da:	690b      	ldr	r3, [r1, #16]
 80046dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bfb8      	it	lt
 80046e4:	4613      	movlt	r3, r2
 80046e6:	6033      	str	r3, [r6, #0]
 80046e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ec:	4607      	mov	r7, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	b10a      	cbz	r2, 80046f6 <_printf_common+0x26>
 80046f2:	3301      	adds	r3, #1
 80046f4:	6033      	str	r3, [r6, #0]
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	0699      	lsls	r1, r3, #26
 80046fa:	bf42      	ittt	mi
 80046fc:	6833      	ldrmi	r3, [r6, #0]
 80046fe:	3302      	addmi	r3, #2
 8004700:	6033      	strmi	r3, [r6, #0]
 8004702:	6825      	ldr	r5, [r4, #0]
 8004704:	f015 0506 	ands.w	r5, r5, #6
 8004708:	d106      	bne.n	8004718 <_printf_common+0x48>
 800470a:	f104 0a19 	add.w	sl, r4, #25
 800470e:	68e3      	ldr	r3, [r4, #12]
 8004710:	6832      	ldr	r2, [r6, #0]
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	42ab      	cmp	r3, r5
 8004716:	dc26      	bgt.n	8004766 <_printf_common+0x96>
 8004718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800471c:	1e13      	subs	r3, r2, #0
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	bf18      	it	ne
 8004722:	2301      	movne	r3, #1
 8004724:	0692      	lsls	r2, r2, #26
 8004726:	d42b      	bmi.n	8004780 <_printf_common+0xb0>
 8004728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	47c0      	blx	r8
 8004732:	3001      	adds	r0, #1
 8004734:	d01e      	beq.n	8004774 <_printf_common+0xa4>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	68e5      	ldr	r5, [r4, #12]
 800473a:	6832      	ldr	r2, [r6, #0]
 800473c:	f003 0306 	and.w	r3, r3, #6
 8004740:	2b04      	cmp	r3, #4
 8004742:	bf08      	it	eq
 8004744:	1aad      	subeq	r5, r5, r2
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	6922      	ldr	r2, [r4, #16]
 800474a:	bf0c      	ite	eq
 800474c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004750:	2500      	movne	r5, #0
 8004752:	4293      	cmp	r3, r2
 8004754:	bfc4      	itt	gt
 8004756:	1a9b      	subgt	r3, r3, r2
 8004758:	18ed      	addgt	r5, r5, r3
 800475a:	2600      	movs	r6, #0
 800475c:	341a      	adds	r4, #26
 800475e:	42b5      	cmp	r5, r6
 8004760:	d11a      	bne.n	8004798 <_printf_common+0xc8>
 8004762:	2000      	movs	r0, #0
 8004764:	e008      	b.n	8004778 <_printf_common+0xa8>
 8004766:	2301      	movs	r3, #1
 8004768:	4652      	mov	r2, sl
 800476a:	4649      	mov	r1, r9
 800476c:	4638      	mov	r0, r7
 800476e:	47c0      	blx	r8
 8004770:	3001      	adds	r0, #1
 8004772:	d103      	bne.n	800477c <_printf_common+0xac>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477c:	3501      	adds	r5, #1
 800477e:	e7c6      	b.n	800470e <_printf_common+0x3e>
 8004780:	18e1      	adds	r1, r4, r3
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	2030      	movs	r0, #48	; 0x30
 8004786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800478a:	4422      	add	r2, r4
 800478c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004794:	3302      	adds	r3, #2
 8004796:	e7c7      	b.n	8004728 <_printf_common+0x58>
 8004798:	2301      	movs	r3, #1
 800479a:	4622      	mov	r2, r4
 800479c:	4649      	mov	r1, r9
 800479e:	4638      	mov	r0, r7
 80047a0:	47c0      	blx	r8
 80047a2:	3001      	adds	r0, #1
 80047a4:	d0e6      	beq.n	8004774 <_printf_common+0xa4>
 80047a6:	3601      	adds	r6, #1
 80047a8:	e7d9      	b.n	800475e <_printf_common+0x8e>
	...

080047ac <_printf_i>:
 80047ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	7e0f      	ldrb	r7, [r1, #24]
 80047b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047b4:	2f78      	cmp	r7, #120	; 0x78
 80047b6:	4691      	mov	r9, r2
 80047b8:	4680      	mov	r8, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	469a      	mov	sl, r3
 80047be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047c2:	d807      	bhi.n	80047d4 <_printf_i+0x28>
 80047c4:	2f62      	cmp	r7, #98	; 0x62
 80047c6:	d80a      	bhi.n	80047de <_printf_i+0x32>
 80047c8:	2f00      	cmp	r7, #0
 80047ca:	f000 80d8 	beq.w	800497e <_printf_i+0x1d2>
 80047ce:	2f58      	cmp	r7, #88	; 0x58
 80047d0:	f000 80a3 	beq.w	800491a <_printf_i+0x16e>
 80047d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047dc:	e03a      	b.n	8004854 <_printf_i+0xa8>
 80047de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047e2:	2b15      	cmp	r3, #21
 80047e4:	d8f6      	bhi.n	80047d4 <_printf_i+0x28>
 80047e6:	a101      	add	r1, pc, #4	; (adr r1, 80047ec <_printf_i+0x40>)
 80047e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047ec:	08004845 	.word	0x08004845
 80047f0:	08004859 	.word	0x08004859
 80047f4:	080047d5 	.word	0x080047d5
 80047f8:	080047d5 	.word	0x080047d5
 80047fc:	080047d5 	.word	0x080047d5
 8004800:	080047d5 	.word	0x080047d5
 8004804:	08004859 	.word	0x08004859
 8004808:	080047d5 	.word	0x080047d5
 800480c:	080047d5 	.word	0x080047d5
 8004810:	080047d5 	.word	0x080047d5
 8004814:	080047d5 	.word	0x080047d5
 8004818:	08004965 	.word	0x08004965
 800481c:	08004889 	.word	0x08004889
 8004820:	08004947 	.word	0x08004947
 8004824:	080047d5 	.word	0x080047d5
 8004828:	080047d5 	.word	0x080047d5
 800482c:	08004987 	.word	0x08004987
 8004830:	080047d5 	.word	0x080047d5
 8004834:	08004889 	.word	0x08004889
 8004838:	080047d5 	.word	0x080047d5
 800483c:	080047d5 	.word	0x080047d5
 8004840:	0800494f 	.word	0x0800494f
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	1d1a      	adds	r2, r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004854:	2301      	movs	r3, #1
 8004856:	e0a3      	b.n	80049a0 <_printf_i+0x1f4>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	6829      	ldr	r1, [r5, #0]
 800485c:	0606      	lsls	r6, r0, #24
 800485e:	f101 0304 	add.w	r3, r1, #4
 8004862:	d50a      	bpl.n	800487a <_printf_i+0xce>
 8004864:	680e      	ldr	r6, [r1, #0]
 8004866:	602b      	str	r3, [r5, #0]
 8004868:	2e00      	cmp	r6, #0
 800486a:	da03      	bge.n	8004874 <_printf_i+0xc8>
 800486c:	232d      	movs	r3, #45	; 0x2d
 800486e:	4276      	negs	r6, r6
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004874:	485e      	ldr	r0, [pc, #376]	; (80049f0 <_printf_i+0x244>)
 8004876:	230a      	movs	r3, #10
 8004878:	e019      	b.n	80048ae <_printf_i+0x102>
 800487a:	680e      	ldr	r6, [r1, #0]
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004882:	bf18      	it	ne
 8004884:	b236      	sxthne	r6, r6
 8004886:	e7ef      	b.n	8004868 <_printf_i+0xbc>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	1d19      	adds	r1, r3, #4
 800488e:	6029      	str	r1, [r5, #0]
 8004890:	0601      	lsls	r1, r0, #24
 8004892:	d501      	bpl.n	8004898 <_printf_i+0xec>
 8004894:	681e      	ldr	r6, [r3, #0]
 8004896:	e002      	b.n	800489e <_printf_i+0xf2>
 8004898:	0646      	lsls	r6, r0, #25
 800489a:	d5fb      	bpl.n	8004894 <_printf_i+0xe8>
 800489c:	881e      	ldrh	r6, [r3, #0]
 800489e:	4854      	ldr	r0, [pc, #336]	; (80049f0 <_printf_i+0x244>)
 80048a0:	2f6f      	cmp	r7, #111	; 0x6f
 80048a2:	bf0c      	ite	eq
 80048a4:	2308      	moveq	r3, #8
 80048a6:	230a      	movne	r3, #10
 80048a8:	2100      	movs	r1, #0
 80048aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ae:	6865      	ldr	r5, [r4, #4]
 80048b0:	60a5      	str	r5, [r4, #8]
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	bfa2      	ittt	ge
 80048b6:	6821      	ldrge	r1, [r4, #0]
 80048b8:	f021 0104 	bicge.w	r1, r1, #4
 80048bc:	6021      	strge	r1, [r4, #0]
 80048be:	b90e      	cbnz	r6, 80048c4 <_printf_i+0x118>
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	d04d      	beq.n	8004960 <_printf_i+0x1b4>
 80048c4:	4615      	mov	r5, r2
 80048c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ca:	fb03 6711 	mls	r7, r3, r1, r6
 80048ce:	5dc7      	ldrb	r7, [r0, r7]
 80048d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048d4:	4637      	mov	r7, r6
 80048d6:	42bb      	cmp	r3, r7
 80048d8:	460e      	mov	r6, r1
 80048da:	d9f4      	bls.n	80048c6 <_printf_i+0x11a>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d10b      	bne.n	80048f8 <_printf_i+0x14c>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	07de      	lsls	r6, r3, #31
 80048e4:	d508      	bpl.n	80048f8 <_printf_i+0x14c>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	6861      	ldr	r1, [r4, #4]
 80048ea:	4299      	cmp	r1, r3
 80048ec:	bfde      	ittt	le
 80048ee:	2330      	movle	r3, #48	; 0x30
 80048f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048f8:	1b52      	subs	r2, r2, r5
 80048fa:	6122      	str	r2, [r4, #16]
 80048fc:	f8cd a000 	str.w	sl, [sp]
 8004900:	464b      	mov	r3, r9
 8004902:	aa03      	add	r2, sp, #12
 8004904:	4621      	mov	r1, r4
 8004906:	4640      	mov	r0, r8
 8004908:	f7ff fee2 	bl	80046d0 <_printf_common>
 800490c:	3001      	adds	r0, #1
 800490e:	d14c      	bne.n	80049aa <_printf_i+0x1fe>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	b004      	add	sp, #16
 8004916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491a:	4835      	ldr	r0, [pc, #212]	; (80049f0 <_printf_i+0x244>)
 800491c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004920:	6829      	ldr	r1, [r5, #0]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f851 6b04 	ldr.w	r6, [r1], #4
 8004928:	6029      	str	r1, [r5, #0]
 800492a:	061d      	lsls	r5, r3, #24
 800492c:	d514      	bpl.n	8004958 <_printf_i+0x1ac>
 800492e:	07df      	lsls	r7, r3, #31
 8004930:	bf44      	itt	mi
 8004932:	f043 0320 	orrmi.w	r3, r3, #32
 8004936:	6023      	strmi	r3, [r4, #0]
 8004938:	b91e      	cbnz	r6, 8004942 <_printf_i+0x196>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	f023 0320 	bic.w	r3, r3, #32
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	2310      	movs	r3, #16
 8004944:	e7b0      	b.n	80048a8 <_printf_i+0xfc>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	2378      	movs	r3, #120	; 0x78
 8004950:	4828      	ldr	r0, [pc, #160]	; (80049f4 <_printf_i+0x248>)
 8004952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004956:	e7e3      	b.n	8004920 <_printf_i+0x174>
 8004958:	0659      	lsls	r1, r3, #25
 800495a:	bf48      	it	mi
 800495c:	b2b6      	uxthmi	r6, r6
 800495e:	e7e6      	b.n	800492e <_printf_i+0x182>
 8004960:	4615      	mov	r5, r2
 8004962:	e7bb      	b.n	80048dc <_printf_i+0x130>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	6826      	ldr	r6, [r4, #0]
 8004968:	6961      	ldr	r1, [r4, #20]
 800496a:	1d18      	adds	r0, r3, #4
 800496c:	6028      	str	r0, [r5, #0]
 800496e:	0635      	lsls	r5, r6, #24
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	d501      	bpl.n	8004978 <_printf_i+0x1cc>
 8004974:	6019      	str	r1, [r3, #0]
 8004976:	e002      	b.n	800497e <_printf_i+0x1d2>
 8004978:	0670      	lsls	r0, r6, #25
 800497a:	d5fb      	bpl.n	8004974 <_printf_i+0x1c8>
 800497c:	8019      	strh	r1, [r3, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	4615      	mov	r5, r2
 8004984:	e7ba      	b.n	80048fc <_printf_i+0x150>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	1d1a      	adds	r2, r3, #4
 800498a:	602a      	str	r2, [r5, #0]
 800498c:	681d      	ldr	r5, [r3, #0]
 800498e:	6862      	ldr	r2, [r4, #4]
 8004990:	2100      	movs	r1, #0
 8004992:	4628      	mov	r0, r5
 8004994:	f7fb fc2c 	bl	80001f0 <memchr>
 8004998:	b108      	cbz	r0, 800499e <_printf_i+0x1f2>
 800499a:	1b40      	subs	r0, r0, r5
 800499c:	6060      	str	r0, [r4, #4]
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	2300      	movs	r3, #0
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a8:	e7a8      	b.n	80048fc <_printf_i+0x150>
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	462a      	mov	r2, r5
 80049ae:	4649      	mov	r1, r9
 80049b0:	4640      	mov	r0, r8
 80049b2:	47d0      	blx	sl
 80049b4:	3001      	adds	r0, #1
 80049b6:	d0ab      	beq.n	8004910 <_printf_i+0x164>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	079b      	lsls	r3, r3, #30
 80049bc:	d413      	bmi.n	80049e6 <_printf_i+0x23a>
 80049be:	68e0      	ldr	r0, [r4, #12]
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	4298      	cmp	r0, r3
 80049c4:	bfb8      	it	lt
 80049c6:	4618      	movlt	r0, r3
 80049c8:	e7a4      	b.n	8004914 <_printf_i+0x168>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4632      	mov	r2, r6
 80049ce:	4649      	mov	r1, r9
 80049d0:	4640      	mov	r0, r8
 80049d2:	47d0      	blx	sl
 80049d4:	3001      	adds	r0, #1
 80049d6:	d09b      	beq.n	8004910 <_printf_i+0x164>
 80049d8:	3501      	adds	r5, #1
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	9903      	ldr	r1, [sp, #12]
 80049de:	1a5b      	subs	r3, r3, r1
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dcf2      	bgt.n	80049ca <_printf_i+0x21e>
 80049e4:	e7eb      	b.n	80049be <_printf_i+0x212>
 80049e6:	2500      	movs	r5, #0
 80049e8:	f104 0619 	add.w	r6, r4, #25
 80049ec:	e7f5      	b.n	80049da <_printf_i+0x22e>
 80049ee:	bf00      	nop
 80049f0:	08004dd5 	.word	0x08004dd5
 80049f4:	08004de6 	.word	0x08004de6

080049f8 <_sbrk_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	; (8004a14 <_sbrk_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fc fa62 	bl	8000ecc <_sbrk>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_sbrk_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_sbrk_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000660 	.word	0x20000660

08004a18 <__sread>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a20:	f000 f8a0 	bl	8004b64 <_read_r>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	bfab      	itete	ge
 8004a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a2c:	181b      	addge	r3, r3, r0
 8004a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a32:	bfac      	ite	ge
 8004a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a36:	81a3      	strhlt	r3, [r4, #12]
 8004a38:	bd10      	pop	{r4, pc}

08004a3a <__swrite>:
 8004a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3e:	461f      	mov	r7, r3
 8004a40:	898b      	ldrh	r3, [r1, #12]
 8004a42:	05db      	lsls	r3, r3, #23
 8004a44:	4605      	mov	r5, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	4616      	mov	r6, r2
 8004a4a:	d505      	bpl.n	8004a58 <__swrite+0x1e>
 8004a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a50:	2302      	movs	r3, #2
 8004a52:	2200      	movs	r2, #0
 8004a54:	f000 f868 	bl	8004b28 <_lseek_r>
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	4632      	mov	r2, r6
 8004a66:	463b      	mov	r3, r7
 8004a68:	4628      	mov	r0, r5
 8004a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6e:	f000 b817 	b.w	8004aa0 <_write_r>

08004a72 <__sseek>:
 8004a72:	b510      	push	{r4, lr}
 8004a74:	460c      	mov	r4, r1
 8004a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a7a:	f000 f855 	bl	8004b28 <_lseek_r>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	bf15      	itete	ne
 8004a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a8e:	81a3      	strheq	r3, [r4, #12]
 8004a90:	bf18      	it	ne
 8004a92:	81a3      	strhne	r3, [r4, #12]
 8004a94:	bd10      	pop	{r4, pc}

08004a96 <__sclose>:
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 b813 	b.w	8004ac4 <_close_r>
	...

08004aa0 <_write_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	4d07      	ldr	r5, [pc, #28]	; (8004ac0 <_write_r+0x20>)
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	4608      	mov	r0, r1
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	602a      	str	r2, [r5, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f7fc f9bb 	bl	8000e2a <_write>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_write_r+0x1e>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_write_r+0x1e>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	20000660 	.word	0x20000660

08004ac4 <_close_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d06      	ldr	r5, [pc, #24]	; (8004ae0 <_close_r+0x1c>)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4604      	mov	r4, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	f7fc f9c7 	bl	8000e62 <_close>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_close_r+0x1a>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_close_r+0x1a>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20000660 	.word	0x20000660

08004ae4 <_fstat_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4d07      	ldr	r5, [pc, #28]	; (8004b04 <_fstat_r+0x20>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	f7fc f9c2 	bl	8000e7a <_fstat>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	d102      	bne.n	8004b00 <_fstat_r+0x1c>
 8004afa:	682b      	ldr	r3, [r5, #0]
 8004afc:	b103      	cbz	r3, 8004b00 <_fstat_r+0x1c>
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	20000660 	.word	0x20000660

08004b08 <_isatty_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d06      	ldr	r5, [pc, #24]	; (8004b24 <_isatty_r+0x1c>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4604      	mov	r4, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	f7fc f9c1 	bl	8000e9a <_isatty>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_isatty_r+0x1a>
 8004b1c:	682b      	ldr	r3, [r5, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_isatty_r+0x1a>
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	20000660 	.word	0x20000660

08004b28 <_lseek_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4d07      	ldr	r5, [pc, #28]	; (8004b48 <_lseek_r+0x20>)
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	4608      	mov	r0, r1
 8004b30:	4611      	mov	r1, r2
 8004b32:	2200      	movs	r2, #0
 8004b34:	602a      	str	r2, [r5, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f7fc f9ba 	bl	8000eb0 <_lseek>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_lseek_r+0x1e>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_lseek_r+0x1e>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	20000660 	.word	0x20000660

08004b4c <__malloc_lock>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	; (8004b54 <__malloc_lock+0x8>)
 8004b4e:	f7ff bb1d 	b.w	800418c <__retarget_lock_acquire_recursive>
 8004b52:	bf00      	nop
 8004b54:	20000654 	.word	0x20000654

08004b58 <__malloc_unlock>:
 8004b58:	4801      	ldr	r0, [pc, #4]	; (8004b60 <__malloc_unlock+0x8>)
 8004b5a:	f7ff bb18 	b.w	800418e <__retarget_lock_release_recursive>
 8004b5e:	bf00      	nop
 8004b60:	20000654 	.word	0x20000654

08004b64 <_read_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4d07      	ldr	r5, [pc, #28]	; (8004b84 <_read_r+0x20>)
 8004b68:	4604      	mov	r4, r0
 8004b6a:	4608      	mov	r0, r1
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	602a      	str	r2, [r5, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f7fc f93c 	bl	8000df0 <_read>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_read_r+0x1e>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_read_r+0x1e>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	20000660 	.word	0x20000660

08004b88 <_init>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr

08004b94 <_fini>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr


Cluster_Control_V01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005424  08005424  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800542c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000660  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d0  200006d0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec3a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f1  00000000  00000000  0002ecda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024561  00000000  00000000  000325f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e46d  00000000  00000000  00056b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d811e  00000000  00000000  00064fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d0e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cb0  00000000  00000000  0013d134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005048 	.word	0x08005048

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005048 	.word	0x08005048

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <__io_putchar+0x20>)
 80005a6:	f002 f95b 	bl	8002860 <HAL_UART_Transmit>
  return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fec5 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 fa29 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fb1f 	bl	8000c08 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 fac5 	bl	8000b58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ce:	f000 faed 	bl	8000bac <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005d2:	f000 fa8b 	bl	8000aec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // HAL_UART_Receive_IT(&huart3, &UART_RX_data, 1);

  printf("\r\n----------------------------------------------------------------- \r\n");
 80005d6:	48a4      	ldr	r0, [pc, #656]	; (8000868 <main+0x2b0>)
 80005d8:	f003 fd70 	bl	80040bc <puts>
  printf("Version 2022, 10, 06 Cluster Control Board Ver 0.0.3 \r\n");
 80005dc:	48a3      	ldr	r0, [pc, #652]	; (800086c <main+0x2b4>)
 80005de:	f003 fd6d 	bl	80040bc <puts>
  printf("0.0.1 Labview Communication Test Checked Labview RX\r\n");
 80005e2:	48a3      	ldr	r0, [pc, #652]	; (8000870 <main+0x2b8>)
 80005e4:	f003 fd6a 	bl	80040bc <puts>
  printf("0.0.2 Labview Communication Test Checked Labview TX\r\n");
 80005e8:	48a2      	ldr	r0, [pc, #648]	; (8000874 <main+0x2bc>)
 80005ea:	f003 fd67 	bl	80040bc <puts>
  printf("0.0.3 Labview Communication Test Checked Data Parsing Test \r\n");
 80005ee:	48a2      	ldr	r0, [pc, #648]	; (8000878 <main+0x2c0>)
 80005f0:	f003 fd64 	bl	80040bc <puts>
  printf("0.0.4 Git Test  \r\n");
 80005f4:	48a1      	ldr	r0, [pc, #644]	; (800087c <main+0x2c4>)
 80005f6:	f003 fd61 	bl	80040bc <puts>
  printf("0.0.5 Labview Communication Test Labview Parsing Test \r\n");
 80005fa:	48a1      	ldr	r0, [pc, #644]	; (8000880 <main+0x2c8>)
 80005fc:	f003 fd5e 	bl	80040bc <puts>
  printf("0.0.6 Labview Communication Test ARM Parsing Test \r\n");
 8000600:	48a0      	ldr	r0, [pc, #640]	; (8000884 <main+0x2cc>)
 8000602:	f003 fd5b 	bl	80040bc <puts>
  printf("0.0.7 ARM Protocol Ver 0.1 \r\n");
 8000606:	48a0      	ldr	r0, [pc, #640]	; (8000888 <main+0x2d0>)
 8000608:	f003 fd58 	bl	80040bc <puts>
  printf("0.0.8 Command Added \r\n");
 800060c:	489f      	ldr	r0, [pc, #636]	; (800088c <main+0x2d4>)
 800060e:	f003 fd55 	bl	80040bc <puts>
  printf("0.0.9 Function Added \r\n");
 8000612:	489f      	ldr	r0, [pc, #636]	; (8000890 <main+0x2d8>)
 8000614:	f003 fd52 	bl	80040bc <puts>
  /*GPIO Reset Fuction 추가*/
  printf("0.1.0 Protocal Ver 0.1 \r\n");
 8000618:	489e      	ldr	r0, [pc, #632]	; (8000894 <main+0x2dc>)
 800061a:	f003 fd4f 	bl	80040bc <puts>
  printf("0.1.1 Setting Cluster ID \r\n");
 800061e:	489e      	ldr	r0, [pc, #632]	; (8000898 <main+0x2e0>)
 8000620:	f003 fd4c 	bl	80040bc <puts>
  printf("----- ------------------------------------------------------------ \r\n");
 8000624:	489d      	ldr	r0, [pc, #628]	; (800089c <main+0x2e4>)
 8000626:	f003 fd49 	bl	80040bc <puts>
  HAL_GPIO_WritePin(GPIOE, 0x02, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	489c      	ldr	r0, [pc, #624]	; (80008a0 <main+0x2e8>)
 8000630:	f001 fa72 	bl	8001b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CSA_Pin | CSB_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2103      	movs	r1, #3
 8000638:	489a      	ldr	r0, [pc, #616]	; (80008a4 <main+0x2ec>)
 800063a:	f001 fa6d 	bl	8001b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, WR_0_Pin | WR_1_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2103      	movs	r1, #3
 8000642:	4899      	ldr	r0, [pc, #612]	; (80008a8 <main+0x2f0>)
 8000644:	f001 fa68 	bl	8001b18 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int che = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  while (1)
  {
    HAL_Delay(5);
 800064c:	2005      	movs	r0, #5
 800064e:	f000 feef 	bl	8001430 <HAL_Delay>
    if (( (cnt % 100) == 0))
 8000652:	4b96      	ldr	r3, [pc, #600]	; (80008ac <main+0x2f4>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b96      	ldr	r3, [pc, #600]	; (80008b0 <main+0x2f8>)
 8000658:	fb83 1302 	smull	r1, r3, r3, r2
 800065c:	1159      	asrs	r1, r3, #5
 800065e:	17d3      	asrs	r3, r2, #31
 8000660:	1acb      	subs	r3, r1, r3
 8000662:	2164      	movs	r1, #100	; 0x64
 8000664:	fb01 f303 	mul.w	r3, r1, r3
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <main+0xc2>
      printf("System Count : %d end\r\n", cnt);
 800066e:	4b8f      	ldr	r3, [pc, #572]	; (80008ac <main+0x2f4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4619      	mov	r1, r3
 8000674:	488f      	ldr	r0, [pc, #572]	; (80008b4 <main+0x2fc>)
 8000676:	f003 fc85 	bl	8003f84 <iprintf>
    cnt++;
 800067a:	4b8c      	ldr	r3, [pc, #560]	; (80008ac <main+0x2f4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	4a8a      	ldr	r2, [pc, #552]	; (80008ac <main+0x2f4>)
 8000682:	6013      	str	r3, [r2, #0]
    //주기적으로 신호를 보냄으로서 정상 동작 한다는 것을 알림

    // UART 신호 수신
    rcvStat = HAL_UART_Receive(&huart3, UART_RX_data, data_length, 10);
 8000684:	230a      	movs	r3, #10
 8000686:	2264      	movs	r2, #100	; 0x64
 8000688:	498b      	ldr	r1, [pc, #556]	; (80008b8 <main+0x300>)
 800068a:	488c      	ldr	r0, [pc, #560]	; (80008bc <main+0x304>)
 800068c:	f002 f97a 	bl	8002984 <HAL_UART_Receive>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b8a      	ldr	r3, [pc, #552]	; (80008c0 <main+0x308>)
 8000696:	701a      	strb	r2, [r3, #0]

    //받은 데이터 중에 시작 문자와 끝 문자가 있는지 판별
    for (int n = 0; n < data_length; n++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e01c      	b.n	80006d8 <main+0x120>
    {
      if (UART_RX_data[n] == '+')
 800069e:	4a86      	ldr	r2, [pc, #536]	; (80008b8 <main+0x300>)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b2b      	cmp	r3, #43	; 0x2b
 80006a8:	d113      	bne.n	80006d2 <main+0x11a>
      {
        // printf("Find Start %d \r\n", n);
        if ((UART_RX_data[n + 7]) == '#')
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3307      	adds	r3, #7
 80006ae:	4a82      	ldr	r2, [pc, #520]	; (80008b8 <main+0x300>)
 80006b0:	5cd3      	ldrb	r3, [r2, r3]
 80006b2:	2b23      	cmp	r3, #35	; 0x23
 80006b4:	d10d      	bne.n	80006d2 <main+0x11a>
        {
          if (UART_RX_data[n + 1] == '1') // 아이디 판별 식
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a7f      	ldr	r2, [pc, #508]	; (80008b8 <main+0x300>)
 80006bc:	5cd3      	ldrb	r3, [r2, r3]
 80006be:	2b31      	cmp	r3, #49	; 0x31
 80006c0:	d102      	bne.n	80006c8 <main+0x110>
          {
            start_char_flag = 1;
 80006c2:	4b80      	ldr	r3, [pc, #512]	; (80008c4 <main+0x30c>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
          }
          uart_cnt = n;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b7e      	ldr	r3, [pc, #504]	; (80008c8 <main+0x310>)
 80006ce:	701a      	strb	r2, [r3, #0]
          break;
 80006d0:	e005      	b.n	80006de <main+0x126>
    for (int n = 0; n < data_length; n++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2b63      	cmp	r3, #99	; 0x63
 80006dc:	dddf      	ble.n	800069e <main+0xe6>
        }
      }
    }
    if (start_char_flag == 1) //만약 시작 문자와 끝문자 그리고 클러스터 지정 문자가 검출되면 start_char_flag = 1
 80006de:	4b79      	ldr	r3, [pc, #484]	; (80008c4 <main+0x30c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d1b2      	bne.n	800064c <main+0x94>
    {
      start_char_flag = 0;
 80006e6:	4b77      	ldr	r3, [pc, #476]	; (80008c4 <main+0x30c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
      for (int m = 0; m < 8; m++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	e00e      	b.n	8000710 <main+0x158>
      {

        UART_RX_temp[m] = UART_RX_data[uart_cnt + m];
 80006f2:	4b75      	ldr	r3, [pc, #468]	; (80008c8 <main+0x310>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a6e      	ldr	r2, [pc, #440]	; (80008b8 <main+0x300>)
 80006fe:	5cd1      	ldrb	r1, [r2, r3]
 8000700:	4a72      	ldr	r2, [pc, #456]	; (80008cc <main+0x314>)
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	4413      	add	r3, r2
 8000706:	460a      	mov	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
      for (int m = 0; m < 8; m++)
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	3301      	adds	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	2b07      	cmp	r3, #7
 8000714:	dded      	ble.n	80006f2 <main+0x13a>
      }
      //이전에 받은 데이터와 비교해서 달라졌으면 실행, 달라지지 않았으면 그대로 간다
      //아랫 부분이 명령어를 받고 실행하는 부분이다
      for (int n = 0; n < 8; n++)
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e141      	b.n	80009a0 <main+0x3e8>
      {
        if (UART_RX_data_word[n] != UART_RX_temp[n])
 800071c:	4a6c      	ldr	r2, [pc, #432]	; (80008d0 <main+0x318>)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	4969      	ldr	r1, [pc, #420]	; (80008cc <main+0x314>)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	440b      	add	r3, r1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	f000 8134 	beq.w	800099a <main+0x3e2>
          ////////////////////////////////////////////명령어 인식 파트///////////////////////////////////////////////
          // HAL_GPIO_WritePin(GPIOE, 0x02, GPIO_PIN_SET);
          // HAL_GPIO_TogglePin(GPIOE, 0xFF);
          // T 다음에 오는 숫자는?
          //////////////////////////TX Code/////////////////////////////////
          if (UART_RX_temp[3] > '9')
 8000732:	4b66      	ldr	r3, [pc, #408]	; (80008cc <main+0x314>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	2b39      	cmp	r3, #57	; 0x39
 8000738:	d906      	bls.n	8000748 <main+0x190>
          {
            TX_SEL = (UART_RX_temp[3] - 55);
 800073a:	4b64      	ldr	r3, [pc, #400]	; (80008cc <main+0x314>)
 800073c:	78db      	ldrb	r3, [r3, #3]
 800073e:	3b37      	subs	r3, #55	; 0x37
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <main+0x31c>)
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e005      	b.n	8000754 <main+0x19c>
          }
          else
          {
            TX_SEL = (UART_RX_temp[3] - 48);
 8000748:	4b60      	ldr	r3, [pc, #384]	; (80008cc <main+0x314>)
 800074a:	78db      	ldrb	r3, [r3, #3]
 800074c:	3b30      	subs	r3, #48	; 0x30
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b60      	ldr	r3, [pc, #384]	; (80008d4 <main+0x31c>)
 8000752:	701a      	strb	r2, [r3, #0]
          }
          printf("Tx Code : %d \r\n", TX_SEL);
 8000754:	4b5f      	ldr	r3, [pc, #380]	; (80008d4 <main+0x31c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	485f      	ldr	r0, [pc, #380]	; (80008d8 <main+0x320>)
 800075c:	f003 fc12 	bl	8003f84 <iprintf>

          // R 다음에 오는 출력 신호는 ?
          //////////////////////////RX Code //////////////////////////////
          if (UART_RX_temp[5] > '9')
 8000760:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <main+0x314>)
 8000762:	795b      	ldrb	r3, [r3, #5]
 8000764:	2b39      	cmp	r3, #57	; 0x39
 8000766:	d906      	bls.n	8000776 <main+0x1be>
          {
            RX_ADDR = (UART_RX_temp[5] - 55);
 8000768:	4b58      	ldr	r3, [pc, #352]	; (80008cc <main+0x314>)
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	3b37      	subs	r3, #55	; 0x37
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b5a      	ldr	r3, [pc, #360]	; (80008dc <main+0x324>)
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e005      	b.n	8000782 <main+0x1ca>
          }
          else
          {
            RX_ADDR = (UART_RX_temp[5] - 48);
 8000776:	4b55      	ldr	r3, [pc, #340]	; (80008cc <main+0x314>)
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	3b30      	subs	r3, #48	; 0x30
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b57      	ldr	r3, [pc, #348]	; (80008dc <main+0x324>)
 8000780:	701a      	strb	r2, [r3, #0]
          }
          printf("Rx ADDR : %d \r\n", RX_ADDR);
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <main+0x324>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	4855      	ldr	r0, [pc, #340]	; (80008e0 <main+0x328>)
 800078a:	f003 fbfb 	bl	8003f84 <iprintf>
          //그 다음에 오는 Rx MUX Sel 신호는 ?
          if (UART_RX_temp[6] > '9')
 800078e:	4b4f      	ldr	r3, [pc, #316]	; (80008cc <main+0x314>)
 8000790:	799b      	ldrb	r3, [r3, #6]
 8000792:	2b39      	cmp	r3, #57	; 0x39
 8000794:	d906      	bls.n	80007a4 <main+0x1ec>
          {
            RX_SEL = (UART_RX_temp[6] - 55);
 8000796:	4b4d      	ldr	r3, [pc, #308]	; (80008cc <main+0x314>)
 8000798:	799b      	ldrb	r3, [r3, #6]
 800079a:	3b37      	subs	r3, #55	; 0x37
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b51      	ldr	r3, [pc, #324]	; (80008e4 <main+0x32c>)
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	e005      	b.n	80007b0 <main+0x1f8>
          }
          else
          {
            RX_SEL = (UART_RX_temp[6] - 48);
 80007a4:	4b49      	ldr	r3, [pc, #292]	; (80008cc <main+0x314>)
 80007a6:	799b      	ldrb	r3, [r3, #6]
 80007a8:	3b30      	subs	r3, #48	; 0x30
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b4d      	ldr	r3, [pc, #308]	; (80008e4 <main+0x32c>)
 80007ae:	701a      	strb	r2, [r3, #0]
          }
          printf("Rx SEL : %d \r\n", RX_SEL);
 80007b0:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <main+0x32c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	484c      	ldr	r0, [pc, #304]	; (80008e8 <main+0x330>)
 80007b8:	f003 fbe4 	bl	8003f84 <iprintf>
          ///////////////////////////////
          GPIO_Reset();
 80007bc:	f000 fb62 	bl	8000e84 <GPIO_Reset>

          HAL_Delay(5);
 80007c0:	2005      	movs	r0, #5
 80007c2:	f000 fe35 	bl	8001430 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOG, CSA_Pin | CSB_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2103      	movs	r1, #3
 80007ca:	4836      	ldr	r0, [pc, #216]	; (80008a4 <main+0x2ec>)
 80007cc:	f001 f9a4 	bl	8001b18 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 80007d0:	2005      	movs	r0, #5
 80007d2:	f000 fe2d 	bl	8001430 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOD, WR_0_Pin | WR_1_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2103      	movs	r1, #3
 80007da:	4833      	ldr	r0, [pc, #204]	; (80008a8 <main+0x2f0>)
 80007dc:	f001 f99c 	bl	8001b18 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOA, RX_EN_1_Pin |RX_EN_0_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2103      	movs	r1, #3
 80007e4:	4841      	ldr	r0, [pc, #260]	; (80008ec <main+0x334>)
 80007e6:	f001 f997 	bl	8001b18 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 80007ea:	2005      	movs	r0, #5
 80007ec:	f000 fe20 	bl	8001430 <HAL_Delay>

          ///////////////////////////////////////////명령어 실행 파트////////////////////////////////////////////
          if (TX_SEL > 32)
 80007f0:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <main+0x31c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b20      	cmp	r3, #32
 80007f6:	d903      	bls.n	8000800 <main+0x248>
          {
            printf("error : TX_SEL Out Of Range \r\n");
 80007f8:	483d      	ldr	r0, [pc, #244]	; (80008f0 <main+0x338>)
 80007fa:	f003 fc5f 	bl	80040bc <puts>
 80007fe:	e07e      	b.n	80008fe <main+0x346>
          }
          else if (TX_SEL == 32) //W 입력 받았을 경우
 8000800:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <main+0x31c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b20      	cmp	r3, #32
 8000806:	d07a      	beq.n	80008fe <main+0x346>
          {
            //아무것도 하지 않음.
          }
          else if ((TX_SEL >= 16) && (TX_SEL < 32))
 8000808:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <main+0x31c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d910      	bls.n	8000832 <main+0x27a>
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <main+0x31c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b1f      	cmp	r3, #31
 8000816:	d80c      	bhi.n	8000832 <main+0x27a>
          {
            HAL_GPIO_WritePin(GPIOF, 1 << (TX_SEL - 16), GPIO_PIN_SET);
 8000818:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <main+0x31c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3b10      	subs	r3, #16
 800081e:	2201      	movs	r2, #1
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	b29b      	uxth	r3, r3
 8000826:	2201      	movs	r2, #1
 8000828:	4619      	mov	r1, r3
 800082a:	4832      	ldr	r0, [pc, #200]	; (80008f4 <main+0x33c>)
 800082c:	f001 f974 	bl	8001b18 <HAL_GPIO_WritePin>
 8000830:	e065      	b.n	80008fe <main+0x346>
          }
          else if (TX_SEL > 0)
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <main+0x31c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00b      	beq.n	8000852 <main+0x29a>
          {

            HAL_GPIO_WritePin(GPIOE, 1 << TX_SEL, GPIO_PIN_SET);
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <main+0x31c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	2301      	movs	r3, #1
 8000842:	4093      	lsls	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	2201      	movs	r2, #1
 8000848:	4619      	mov	r1, r3
 800084a:	4815      	ldr	r0, [pc, #84]	; (80008a0 <main+0x2e8>)
 800084c:	f001 f964 	bl	8001b18 <HAL_GPIO_WritePin>
 8000850:	e055      	b.n	80008fe <main+0x346>
          }
          else if (TX_SEL == 0)
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <main+0x31c>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d14e      	bne.n	80008f8 <main+0x340>
          {
            //printf("%d^%d= %d \r\n", 2, 2, 1 << TX_SEL);
            HAL_GPIO_WritePin(GPIOE, 0x01, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2101      	movs	r1, #1
 800085e:	4810      	ldr	r0, [pc, #64]	; (80008a0 <main+0x2e8>)
 8000860:	f001 f95a 	bl	8001b18 <HAL_GPIO_WritePin>
 8000864:	e04b      	b.n	80008fe <main+0x346>
 8000866:	bf00      	nop
 8000868:	08005060 	.word	0x08005060
 800086c:	080050a8 	.word	0x080050a8
 8000870:	080050e0 	.word	0x080050e0
 8000874:	08005118 	.word	0x08005118
 8000878:	08005150 	.word	0x08005150
 800087c:	08005190 	.word	0x08005190
 8000880:	080051a4 	.word	0x080051a4
 8000884:	080051dc 	.word	0x080051dc
 8000888:	08005210 	.word	0x08005210
 800088c:	08005230 	.word	0x08005230
 8000890:	08005248 	.word	0x08005248
 8000894:	08005260 	.word	0x08005260
 8000898:	0800527c 	.word	0x0800527c
 800089c:	08005298 	.word	0x08005298
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	200006ac 	.word	0x200006ac
 80008b0:	51eb851f 	.word	0x51eb851f
 80008b4:	080052e0 	.word	0x080052e0
 80008b8:	20000634 	.word	0x20000634
 80008bc:	200000e4 	.word	0x200000e4
 80008c0:	200006b4 	.word	0x200006b4
 80008c4:	200006b0 	.word	0x200006b0
 80008c8:	200006a9 	.word	0x200006a9
 80008cc:	200006a0 	.word	0x200006a0
 80008d0:	20000698 	.word	0x20000698
 80008d4:	200006b1 	.word	0x200006b1
 80008d8:	080052f8 	.word	0x080052f8
 80008dc:	200006b2 	.word	0x200006b2
 80008e0:	08005308 	.word	0x08005308
 80008e4:	200006b3 	.word	0x200006b3
 80008e8:	08005318 	.word	0x08005318
 80008ec:	40020000 	.word	0x40020000
 80008f0:	08005328 	.word	0x08005328
 80008f4:	40021400 	.word	0x40021400
          }
          else
          {
            printf("error : TX_SEL Out Of Range \r\n");
 80008f8:	483d      	ldr	r0, [pc, #244]	; (80009f0 <main+0x438>)
 80008fa:	f003 fbdf 	bl	80040bc <puts>
          }

          // RX_ADDR 세팅

          if (RX_ADDR > 16)
 80008fe:	4b3d      	ldr	r3, [pc, #244]	; (80009f4 <main+0x43c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b10      	cmp	r3, #16
 8000904:	d903      	bls.n	800090e <main+0x356>
          {
            printf("error : RX_ADDR Out Of Range \r\n");
 8000906:	483c      	ldr	r0, [pc, #240]	; (80009f8 <main+0x440>)
 8000908:	f003 fbd8 	bl	80040bc <puts>
 800090c:	e01d      	b.n	800094a <main+0x392>
          }
          else if (RX_ADDR == 16)
 800090e:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <main+0x43c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b10      	cmp	r3, #16
 8000914:	d019      	beq.n	800094a <main+0x392>
          {
            //아무것도 하지 않음 전부 OFF GPIO Reset에서 전부 0으로 만들어주기 때문 
          }
          else if (RX_ADDR > 0)
 8000916:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <main+0x43c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d008      	beq.n	8000930 <main+0x378>
          {
            HAL_GPIO_WritePin(GPIOC, RX_ADDR, GPIO_PIN_SET);
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <main+0x43c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	2201      	movs	r2, #1
 8000926:	4619      	mov	r1, r3
 8000928:	4834      	ldr	r0, [pc, #208]	; (80009fc <main+0x444>)
 800092a:	f001 f8f5 	bl	8001b18 <HAL_GPIO_WritePin>
 800092e:	e00c      	b.n	800094a <main+0x392>
          }
          else if (RX_ADDR == 0)
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <main+0x43c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d105      	bne.n	8000944 <main+0x38c>
          {
            HAL_GPIO_WritePin(GPIOC, 0 , GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2100      	movs	r1, #0
 800093c:	482f      	ldr	r0, [pc, #188]	; (80009fc <main+0x444>)
 800093e:	f001 f8eb 	bl	8001b18 <HAL_GPIO_WritePin>
 8000942:	e002      	b.n	800094a <main+0x392>
          }
          else
          {
            printf("error : RX_ADDR Out Of Range \r\n");
 8000944:	482c      	ldr	r0, [pc, #176]	; (80009f8 <main+0x440>)
 8000946:	f003 fbb9 	bl	80040bc <puts>
          }
          // RX_MUX 세팅
          if (RX_SEL == 0)
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <main+0x448>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d105      	bne.n	800095e <main+0x3a6>
          {
            HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2101      	movs	r1, #1
 8000956:	482b      	ldr	r0, [pc, #172]	; (8000a04 <main+0x44c>)
 8000958:	f001 f8de 	bl	8001b18 <HAL_GPIO_WritePin>
 800095c:	e016      	b.n	800098c <main+0x3d4>
          }
          else if (RX_SEL == 1)
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <main+0x448>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d105      	bne.n	8000972 <main+0x3ba>
          {
            HAL_GPIO_WritePin(GPIOA, RX_EN_1_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2102      	movs	r1, #2
 800096a:	4826      	ldr	r0, [pc, #152]	; (8000a04 <main+0x44c>)
 800096c:	f001 f8d4 	bl	8001b18 <HAL_GPIO_WritePin>
 8000970:	e00c      	b.n	800098c <main+0x3d4>
          }
          else if (RX_SEL == 2)
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <main+0x448>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d105      	bne.n	8000986 <main+0x3ce>
          {
            HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin | RX_EN_1_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2103      	movs	r1, #3
 800097e:	4821      	ldr	r0, [pc, #132]	; (8000a04 <main+0x44c>)
 8000980:	f001 f8ca 	bl	8001b18 <HAL_GPIO_WritePin>
 8000984:	e002      	b.n	800098c <main+0x3d4>
          }
          else
          {
            printf("error : RX_ADDR Out Of Range \r\n");
 8000986:	481c      	ldr	r0, [pc, #112]	; (80009f8 <main+0x440>)
 8000988:	f003 fb98 	bl	80040bc <puts>
          }

          ///////////////////////////////
          HAL_Delay(5);
 800098c:	2005      	movs	r0, #5
 800098e:	f000 fd4f 	bl	8001430 <HAL_Delay>
          data_flag = 1;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <main+0x450>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
          break;
 8000998:	e006      	b.n	80009a8 <main+0x3f0>
      for (int n = 0; n < 8; n++)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b07      	cmp	r3, #7
 80009a4:	f77f aeba 	ble.w	800071c <main+0x164>
        }
      }

      //비교 기준이 되는 이전 데이터 자리에 현재 데이터를 넣는다
      for (int k = 0; k < 8; k++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	e016      	b.n	80009dc <main+0x424>
      {
        UART_RX_data_word[k] = UART_RX_temp[k];
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <main+0x454>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4413      	add	r3, r2
 80009b4:	7819      	ldrb	r1, [r3, #0]
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <main+0x458>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	460a      	mov	r2, r1
 80009be:	701a      	strb	r2, [r3, #0]
        if (data_flag == 1)
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <main+0x450>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d106      	bne.n	80009d6 <main+0x41e>
        {
          printf("%c", UART_RX_data_word[k]);
 80009c8:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <main+0x458>)
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 faef 	bl	8003fb4 <putchar>
      for (int k = 0; k < 8; k++)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3301      	adds	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	2b07      	cmp	r3, #7
 80009e0:	dde5      	ble.n	80009ae <main+0x3f6>
        }
      }
      printf("\r\n");
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <main+0x45c>)
 80009e4:	f003 fb6a 	bl	80040bc <puts>
      data_flag = 0;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <main+0x450>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 80009ee:	e62d      	b.n	800064c <main+0x94>
 80009f0:	08005328 	.word	0x08005328
 80009f4:	200006b2 	.word	0x200006b2
 80009f8:	08005348 	.word	0x08005348
 80009fc:	40020800 	.word	0x40020800
 8000a00:	200006b3 	.word	0x200006b3
 8000a04:	40020000 	.word	0x40020000
 8000a08:	200006a8 	.word	0x200006a8
 8000a0c:	200006a0 	.word	0x200006a0
 8000a10:	20000698 	.word	0x20000698
 8000a14:	08005368 	.word	0x08005368

08000a18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	2230      	movs	r2, #48	; 0x30
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 faa4 	bl	8003f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a27      	ldr	r2, [pc, #156]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <SystemClock_Config+0xcc>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <SystemClock_Config+0xd0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a8c:	23a8      	movs	r3, #168	; 0xa8
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0320 	add.w	r3, r7, #32
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f971 	bl	8001d84 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa8:	f000 fa1c 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000aac:	230f      	movs	r3, #15
 8000aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2105      	movs	r1, #5
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fbd2 	bl	8002274 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ad6:	f000 fa05 	bl	8000ee4 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <MX_SPI1_Init+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b38:	220a      	movs	r2, #10
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b3e:	f001 fdb9 	bl	80026b4 <HAL_SPI_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b48:	f000 f9cc 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	40013000 	.word	0x40013000

08000b58 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART3_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b90:	f001 fe19 	bl	80027c6 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f9a3 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000e4 	.word	0x200000e4
 8000ba8:	40004800 	.word	0x40004800

08000bac <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	f000 ffab 	bl	8001b4a <HAL_PCD_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bfa:	f000 f973 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000128 	.word	0x20000128

08000c08 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
 8000c22:	4b8b      	ldr	r3, [pc, #556]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a8a      	ldr	r2, [pc, #552]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b88      	ldr	r3, [pc, #544]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	4b84      	ldr	r3, [pc, #528]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a83      	ldr	r2, [pc, #524]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b81      	ldr	r3, [pc, #516]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	4b7d      	ldr	r3, [pc, #500]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a7c      	ldr	r2, [pc, #496]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c60:	f043 0320 	orr.w	r3, r3, #32
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b7a      	ldr	r3, [pc, #488]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	4b76      	ldr	r3, [pc, #472]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a75      	ldr	r2, [pc, #468]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b73      	ldr	r3, [pc, #460]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a6e      	ldr	r2, [pc, #440]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b6c      	ldr	r3, [pc, #432]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b68      	ldr	r3, [pc, #416]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a67      	ldr	r2, [pc, #412]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b65      	ldr	r3, [pc, #404]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b61      	ldr	r3, [pc, #388]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a60      	ldr	r2, [pc, #384]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b5e      	ldr	r3, [pc, #376]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a59      	ldr	r2, [pc, #356]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <MX_GPIO_Init+0x248>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d04:	4853      	ldr	r0, [pc, #332]	; (8000e54 <MX_GPIO_Init+0x24c>)
 8000d06:	f000 ff07 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d10:	4851      	ldr	r0, [pc, #324]	; (8000e58 <MX_GPIO_Init+0x250>)
 8000d12:	f000 ff01 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	4850      	ldr	r0, [pc, #320]	; (8000e5c <MX_GPIO_Init+0x254>)
 8000d1c:	f000 fefc 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin | RX_EN_1_Pin | GPIO_PIN_2, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2107      	movs	r1, #7
 8000d24:	484e      	ldr	r0, [pc, #312]	; (8000e60 <MX_GPIO_Init+0x258>)
 8000d26:	f000 fef7 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_10 | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f644 4181 	movw	r1, #19585	; 0x4c81
 8000d30:	484c      	ldr	r0, [pc, #304]	; (8000e64 <MX_GPIO_Init+0x25c>)
 8000d32:	f000 fef1 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CSA_Pin | CSB_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2143      	movs	r1, #67	; 0x43
 8000d3a:	484b      	ldr	r0, [pc, #300]	; (8000e68 <MX_GPIO_Init+0x260>)
 8000d3c:	f000 feec 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WR_0_Pin | WR_1_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2103      	movs	r1, #3
 8000d44:	4849      	ldr	r0, [pc, #292]	; (8000e6c <MX_GPIO_Init+0x264>)
 8000d46:	f000 fee7 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_MUX_SEL_2_Pin TX_MUX_SEL_3_Pin TX_MUX_SEL_4_Pin TX_MUX_SEL_5_Pin
                           TX_MUX_SEL_6_Pin TX_MUX_SEL_7_Pin TX_MUX_SEL_8_Pin TX_MUX_SEL_9_Pin
                           TX_MUX_SEL_10_Pin TX_MUX_SEL_11_Pin TX_MUX_SEL_12_Pin TX_MUX_SEL_13_Pin
                           TX_MUX_SEL_14_Pin TX_MUX_SEL_15_Pin TX_MUX_SEL_0_Pin TX_MUX_SEL_1_Pin */
  GPIO_InitStruct.Pin = TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin;
 8000d4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	483c      	ldr	r0, [pc, #240]	; (8000e54 <MX_GPIO_Init+0x24c>)
 8000d64:	f000 fd2c 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4837      	ldr	r0, [pc, #220]	; (8000e5c <MX_GPIO_Init+0x254>)
 8000d80:	f000 fd1e 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TX_MUX_SEL_16_Pin TX_MUX_SEL_17_Pin TX_MUX_SEL_18_Pin TX_MUX_SEL_19_Pin
                           TX_MUX_SEL_20_Pin TX_MUX_SEL_21_Pin TX_MUX_SEL_22_Pin TX_MUX_SEL_23_Pin
                           TX_MUX_SEL_24_Pin TX_MUX_SEL_25_Pin TX_MUX_SEL_26_Pin TX_MUX_SEL_27_Pin
                           TX_MUX_SEL_28_Pin TX_MUX_SEL_29_Pin TX_MUX_SEL_30_Pin TX_MUX_SEL_31_Pin */
  GPIO_InitStruct.Pin = TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin;
 8000d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482e      	ldr	r0, [pc, #184]	; (8000e58 <MX_GPIO_Init+0x250>)
 8000d9e:	f000 fd0f 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_ADDR_0_Pin RX_ADDR_1_Pin RX_ADDR_2_Pin RX_ADDR_3_Pin */
  GPIO_InitStruct.Pin = RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin;
 8000da2:	230f      	movs	r3, #15
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4828      	ldr	r0, [pc, #160]	; (8000e5c <MX_GPIO_Init+0x254>)
 8000dba:	f000 fd01 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_EN_0_Pin RX_EN_1_Pin PA2 */
  GPIO_InitStruct.Pin = RX_EN_0_Pin | RX_EN_1_Pin | GPIO_PIN_2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <MX_GPIO_Init+0x258>)
 8000dd6:	f000 fcf3 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_10 | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8000dda:	f644 4381 	movw	r3, #19585	; 0x4c81
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_GPIO_Init+0x25c>)
 8000df4:	f000 fce4 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSA_Pin CSB_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = CSA_Pin | CSB_Pin | USB_PowerSwitchOn_Pin;
 8000df8:	2343      	movs	r3, #67	; 0x43
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <MX_GPIO_Init+0x260>)
 8000e10:	f000 fcd6 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4810      	ldr	r0, [pc, #64]	; (8000e68 <MX_GPIO_Init+0x260>)
 8000e28:	f000 fcca 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WR_0_Pin WR_1_Pin */
  GPIO_InitStruct.Pin = WR_0_Pin | WR_1_Pin;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	480a      	ldr	r0, [pc, #40]	; (8000e6c <MX_GPIO_Init+0x264>)
 8000e44:	f000 fcbc 	bl	80017c0 <HAL_GPIO_Init>
}
 8000e48:	bf00      	nop
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40021400 	.word	0x40021400
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	40020c00 	.word	0x40020c00

08000e70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    // ?��?��?�� 1개�?? ?��?��?���? ?��?��?��?���? 발생?��?��?��.
    // HAL_UART_Receive_IT(&huart3, &UART_RX_data, 1);
    // HAL_UART_Transmit(&huart3, &UART_RX_data, 1, 1000);
    // uart_flag = 1;
  }
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <GPIO_Reset>:
void GPIO_Reset()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOE, TX_MUX_SEL_2_Pin | TX_MUX_SEL_3_Pin | TX_MUX_SEL_4_Pin | TX_MUX_SEL_5_Pin | TX_MUX_SEL_6_Pin | TX_MUX_SEL_7_Pin | TX_MUX_SEL_8_Pin | TX_MUX_SEL_9_Pin | TX_MUX_SEL_10_Pin | TX_MUX_SEL_11_Pin | TX_MUX_SEL_12_Pin | TX_MUX_SEL_13_Pin | TX_MUX_SEL_14_Pin | TX_MUX_SEL_15_Pin | TX_MUX_SEL_0_Pin | TX_MUX_SEL_1_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e8e:	480f      	ldr	r0, [pc, #60]	; (8000ecc <GPIO_Reset+0x48>)
 8000e90:	f000 fe42 	bl	8001b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, TX_MUX_SEL_16_Pin | TX_MUX_SEL_17_Pin | TX_MUX_SEL_18_Pin | TX_MUX_SEL_19_Pin | TX_MUX_SEL_20_Pin | TX_MUX_SEL_21_Pin | TX_MUX_SEL_22_Pin | TX_MUX_SEL_23_Pin | TX_MUX_SEL_24_Pin | TX_MUX_SEL_25_Pin | TX_MUX_SEL_26_Pin | TX_MUX_SEL_27_Pin | TX_MUX_SEL_28_Pin | TX_MUX_SEL_29_Pin | TX_MUX_SEL_30_Pin | TX_MUX_SEL_31_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <GPIO_Reset+0x4c>)
 8000e9c:	f000 fe3c 	bl	8001b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RX_ADDR_0_Pin | RX_ADDR_1_Pin | RX_ADDR_2_Pin | RX_ADDR_3_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <GPIO_Reset+0x50>)
 8000ea6:	f000 fe37 	bl	8001b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RX_EN_0_Pin | RX_EN_1_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2103      	movs	r1, #3
 8000eae:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <GPIO_Reset+0x54>)
 8000eb0:	f000 fe32 	bl	8001b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CSA_Pin | CSB_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <GPIO_Reset+0x58>)
 8000eba:	f000 fe2d 	bl	8001b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, WR_0_Pin | WR_1_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <GPIO_Reset+0x5c>)
 8000ec4:	f000 fe28 	bl	8001b18 <HAL_GPIO_WritePin>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40021400 	.word	0x40021400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12b      	bne.n	8000fba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f9a:	23e0      	movs	r3, #224	; 0xe0
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000faa:	2305      	movs	r3, #5
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_SPI_MspInit+0x8c>)
 8000fb6:	f000 fc03 	bl	80017c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_UART_MspInit+0x94>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d134      	bne.n	800105c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_UART_MspInit+0x98>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_UART_MspInit+0x98>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_UART_MspInit+0x98>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800102a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103c:	2307      	movs	r3, #7
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_UART_MspInit+0x9c>)
 8001048:	f000 fbba 	bl	80017c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2027      	movs	r0, #39	; 0x27
 8001052:	f000 faec 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001056:	2027      	movs	r0, #39	; 0x27
 8001058:	f000 fb05 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004800 	.word	0x40004800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00

08001070 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001090:	d13f      	bne.n	8001112 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <HAL_PCD_MspInit+0xac>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_PCD_MspInit+0xac>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_PCD_MspInit+0xac>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010c0:	230a      	movs	r3, #10
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4815      	ldr	r0, [pc, #84]	; (8001120 <HAL_PCD_MspInit+0xb0>)
 80010cc:	f000 fb78 	bl	80017c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <HAL_PCD_MspInit+0xb0>)
 80010e6:	f000 fb6b 	bl	80017c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_PCD_MspInit+0xac>)
 80010ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_PCD_MspInit+0xac>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	6353      	str	r3, [r2, #52]	; 0x34
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_PCD_MspInit+0xac>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_PCD_MspInit+0xac>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_PCD_MspInit+0xac>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f93e 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <USART3_IRQHandler+0x10>)
 800117e:	f001 fca3 	bl	8002ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000e4 	.word	0x200000e4

0800118c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e00a      	b.n	80011b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800119e:	f3af 8000 	nop.w
 80011a2:	4601      	mov	r1, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	b2ca      	uxtb	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbf0      	blt.n	800119e <_read+0x12>
	}

return len;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e009      	b.n	80011ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f9d7 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf1      	blt.n	80011d8 <_write+0x12>
	}
	return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_close>:

int _close(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	605a      	str	r2, [r3, #4]
	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_isatty>:

int _isatty(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	return 1;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f002 fe42 	bl	8003f20 <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20030000 	.word	0x20030000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200006b8 	.word	0x200006b8
 80012d0:	200006d0 	.word	0x200006d0

080012d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012fe:	490e      	ldr	r1, [pc, #56]	; (8001338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001314:	4c0b      	ldr	r4, [pc, #44]	; (8001344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001322:	f7ff ffd7 	bl	80012d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f002 fe01 	bl	8003f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff f945 	bl	80005b8 <main>
  bx  lr    
 800132e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001330:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800133c:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 8001340:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001344:	200006d0 	.word	0x200006d0

08001348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <HAL_Init+0x40>)
 8001356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_Init+0x40>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_Init+0x40>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_Init+0x40>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f94f 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	2000      	movs	r0, #0
 800137c:	f000 f808 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fdb6 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x54>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f967 	bl	8001682 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f92f 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_InitTick+0x5c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	200006bc 	.word	0x200006bc

08001418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200006bc 	.word	0x200006bc

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff feb6 	bl	8001418 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d008      	beq.n	80016cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e052      	b.n	8001772 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0216 	bic.w	r2, r2, #22
 80016da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d103      	bne.n	80016fc <HAL_DMA_Abort+0x62>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d007      	beq.n	800170c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0208 	bic.w	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171c:	e013      	b.n	8001746 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800171e:	f7ff fe7b 	bl	8001418 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b05      	cmp	r3, #5
 800172a:	d90c      	bls.n	8001746 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e015      	b.n	8001772 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e4      	bne.n	800171e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	223f      	movs	r2, #63	; 0x3f
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d004      	beq.n	8001798 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e00c      	b.n	80017b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2205      	movs	r2, #5
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	e177      	b.n	8001acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f040 8166 	bne.w	8001ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d005      	beq.n	8001812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	2b02      	cmp	r3, #2
 8001810:	d130      	bne.n	8001874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001848:	2201      	movs	r2, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 0201 	and.w	r2, r3, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b03      	cmp	r3, #3
 800187e:	d017      	beq.n	80018b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d123      	bne.n	8001904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0203 	and.w	r2, r3, #3
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80c0 	beq.w	8001ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a65      	ldr	r2, [pc, #404]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_GPIO_Init+0x324>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001962:	4a61      	ldr	r2, [pc, #388]	; (8001ae8 <HAL_GPIO_Init+0x328>)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a58      	ldr	r2, [pc, #352]	; (8001aec <HAL_GPIO_Init+0x32c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d037      	beq.n	80019fe <HAL_GPIO_Init+0x23e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a57      	ldr	r2, [pc, #348]	; (8001af0 <HAL_GPIO_Init+0x330>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d031      	beq.n	80019fa <HAL_GPIO_Init+0x23a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a56      	ldr	r2, [pc, #344]	; (8001af4 <HAL_GPIO_Init+0x334>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d02b      	beq.n	80019f6 <HAL_GPIO_Init+0x236>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <HAL_GPIO_Init+0x338>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d025      	beq.n	80019f2 <HAL_GPIO_Init+0x232>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a54      	ldr	r2, [pc, #336]	; (8001afc <HAL_GPIO_Init+0x33c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01f      	beq.n	80019ee <HAL_GPIO_Init+0x22e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a53      	ldr	r2, [pc, #332]	; (8001b00 <HAL_GPIO_Init+0x340>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x22a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <HAL_GPIO_Init+0x344>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x226>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a51      	ldr	r2, [pc, #324]	; (8001b08 <HAL_GPIO_Init+0x348>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x222>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a50      	ldr	r2, [pc, #320]	; (8001b0c <HAL_GPIO_Init+0x34c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x21e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_GPIO_Init+0x350>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x21a>
 80019d6:	2309      	movs	r3, #9
 80019d8:	e012      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019da:	230a      	movs	r3, #10
 80019dc:	e010      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019de:	2308      	movs	r3, #8
 80019e0:	e00e      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019e2:	2307      	movs	r3, #7
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019e6:	2306      	movs	r3, #6
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x240>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x328>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a34      	ldr	r2, [pc, #208]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_GPIO_Init+0x354>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f ae84 	bls.w	80017dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40021c00 	.word	0x40021c00
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40022400 	.word	0x40022400
 8001b14:	40013c00 	.word	0x40013c00

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4c:	b08f      	sub	sp, #60	; 0x3c
 8001b4e:	af0a      	add	r7, sp, #40	; 0x28
 8001b50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e10f      	b.n	8001d7c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fa7a 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 ff1f 	bl	80039de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	687e      	ldr	r6, [r7, #4]
 8001ba8:	466d      	mov	r5, sp
 8001baa:	f106 0410 	add.w	r4, r6, #16
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bbe:	1d33      	adds	r3, r6, #4
 8001bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f001 feaa 	bl	800391c <USB_CoreInit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0d0      	b.n	8001d7c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 ff0d 	bl	8003a00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	e04a      	b.n	8001c82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	333d      	adds	r3, #61	; 0x3d
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	333c      	adds	r3, #60	; 0x3c
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	b298      	uxth	r0, r3
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	3344      	adds	r3, #68	; 0x44
 8001c28:	4602      	mov	r2, r0
 8001c2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	3340      	adds	r3, #64	; 0x40
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3348      	adds	r3, #72	; 0x48
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	334c      	adds	r3, #76	; 0x4c
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	3354      	adds	r3, #84	; 0x54
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3af      	bcc.n	8001bec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e044      	b.n	8001d1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d3b5      	bcc.n	8001c92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	687e      	ldr	r6, [r7, #4]
 8001d2e:	466d      	mov	r5, sp
 8001d30:	f106 0410 	add.w	r4, r6, #16
 8001d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d44:	1d33      	adds	r3, r6, #4
 8001d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f001 fea5 	bl	8003a98 <USB_DevInit>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e00d      	b.n	8001d7c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 f870 	bl	8003e5a <USB_DevDisconnect>

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e267      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d075      	beq.n	8001e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d00c      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d112      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc6:	d10b      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	4b7e      	ldr	r3, [pc, #504]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d05b      	beq.n	8001e8c <HAL_RCC_OscConfig+0x108>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d157      	bne.n	8001e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e242      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d106      	bne.n	8001df8 <HAL_RCC_OscConfig+0x74>
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x98>
 8001e02:	4b70      	ldr	r3, [pc, #448]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6f      	ldr	r2, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	4b69      	ldr	r3, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a68      	ldr	r2, [pc, #416]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a65      	ldr	r2, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff faec 	bl	8001418 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fae8 	bl	8001418 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e207      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xc0>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fad8 	bl	8001418 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fad4 	bl	8001418 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e1f3      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0xe8>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1c7      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e03a      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7ff fa8d 	bl	8001418 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7ff fa89 	bl	8001418 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1a8      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4925      	ldr	r1, [pc, #148]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e015      	b.n	8001f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x244>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fa6c 	bl	8001418 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff fa68 	bl	8001418 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e187      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d036      	beq.n	8001fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d016      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff fa4c 	bl	8001418 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff fa48 	bl	8001418 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e167      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x240>)
 8001f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x200>
 8001fa2:	e01b      	b.n	8001fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x248>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fa35 	bl	8001418 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	e00e      	b.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fa31 	bl	8001418 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d907      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e150      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470000 	.word	0x42470000
 8001fcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ea      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8097 	beq.w	8002118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b81      	ldr	r3, [pc, #516]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b7d      	ldr	r3, [pc, #500]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a7c      	ldr	r2, [pc, #496]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b7a      	ldr	r3, [pc, #488]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b77      	ldr	r3, [pc, #476]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b74      	ldr	r3, [pc, #464]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a73      	ldr	r2, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7ff f9f1 	bl	8001418 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7ff f9ed 	bl	8001418 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e10c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x474>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x2ea>
 8002060:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a63      	ldr	r2, [pc, #396]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x30c>
 8002076:	4b5f      	ldr	r3, [pc, #380]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a5e      	ldr	r2, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a5b      	ldr	r2, [pc, #364]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x324>
 8002090:	4b58      	ldr	r3, [pc, #352]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a57      	ldr	r2, [pc, #348]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f9b2 	bl	8001418 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff f9ae 	bl	8001418 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0cb      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ee      	beq.n	80020b8 <HAL_RCC_OscConfig+0x334>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7ff f99c 	bl	8001418 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f998 	bl	8001418 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0b5      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ee      	bne.n	80020e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a1 	beq.w	8002264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d05c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d141      	bne.n	80021ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff f96c 	bl	8001418 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f968 	bl	8001418 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e087      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	3b01      	subs	r3, #1
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	491b      	ldr	r1, [pc, #108]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff f941 	bl	8001418 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219a:	f7ff f93d 	bl	8001418 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e05c      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x416>
 80021b8:	e054      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_RCC_OscConfig+0x478>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f92a 	bl	8001418 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f926 	bl	8001418 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e045      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_OscConfig+0x470>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x444>
 80021e6:	e03d      	b.n	8002264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e038      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x4ec>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d028      	beq.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d121      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d11a      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cc      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d90c      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e067      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4934      	ldr	r1, [pc, #208]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7ff f858 	bl	8001418 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7ff f854 	bl	8001418 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d20c      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe ffb8 	bl	8001390 <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
 8002434:	0800536c 	.word	0x0800536c
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b094      	sub	sp, #80	; 0x50
 8002446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	647b      	str	r3, [r7, #68]	; 0x44
 800244c:	2300      	movs	r3, #0
 800244e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002450:	2300      	movs	r3, #0
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002458:	4b79      	ldr	r3, [pc, #484]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d00d      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x40>
 8002464:	2b08      	cmp	r3, #8
 8002466:	f200 80e1 	bhi.w	800262c <HAL_RCC_GetSysClockFreq+0x1ec>
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 800246e:	2b04      	cmp	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x3a>
 8002472:	e0db      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_GetSysClockFreq+0x204>)
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002478:	e0db      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_GetSysClockFreq+0x208>)
 800247c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800247e:	e0d8      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002496:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	2200      	movs	r2, #0
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
 80024a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
 80024ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	f04f 0000 	mov.w	r0, #0
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	0159      	lsls	r1, r3, #5
 80024c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c4:	0150      	lsls	r0, r2, #5
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4621      	mov	r1, r4
 80024cc:	1a51      	subs	r1, r2, r1
 80024ce:	6139      	str	r1, [r7, #16]
 80024d0:	4629      	mov	r1, r5
 80024d2:	eb63 0301 	sbc.w	r3, r3, r1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024e4:	4659      	mov	r1, fp
 80024e6:	018b      	lsls	r3, r1, #6
 80024e8:	4651      	mov	r1, sl
 80024ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ee:	4651      	mov	r1, sl
 80024f0:	018a      	lsls	r2, r1, #6
 80024f2:	4651      	mov	r1, sl
 80024f4:	ebb2 0801 	subs.w	r8, r2, r1
 80024f8:	4659      	mov	r1, fp
 80024fa:	eb63 0901 	sbc.w	r9, r3, r1
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800250a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002512:	4690      	mov	r8, r2
 8002514:	4699      	mov	r9, r3
 8002516:	4623      	mov	r3, r4
 8002518:	eb18 0303 	adds.w	r3, r8, r3
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	462b      	mov	r3, r5
 8002520:	eb49 0303 	adc.w	r3, r9, r3
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002532:	4629      	mov	r1, r5
 8002534:	024b      	lsls	r3, r1, #9
 8002536:	4621      	mov	r1, r4
 8002538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800253c:	4621      	mov	r1, r4
 800253e:	024a      	lsls	r2, r1, #9
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	2200      	movs	r2, #0
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
 800254a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800254c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002550:	f7fd fe9e 	bl	8000290 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800255c:	e058      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	2200      	movs	r2, #0
 8002566:	4618      	mov	r0, r3
 8002568:	4611      	mov	r1, r2
 800256a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	f04f 0000 	mov.w	r0, #0
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	0159      	lsls	r1, r3, #5
 8002586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258a:	0150      	lsls	r0, r2, #5
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4641      	mov	r1, r8
 8002592:	ebb2 0a01 	subs.w	sl, r2, r1
 8002596:	4649      	mov	r1, r9
 8002598:	eb63 0b01 	sbc.w	fp, r3, r1
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025b0:	ebb2 040a 	subs.w	r4, r2, sl
 80025b4:	eb63 050b 	sbc.w	r5, r3, fp
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	00eb      	lsls	r3, r5, #3
 80025c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c6:	00e2      	lsls	r2, r4, #3
 80025c8:	4614      	mov	r4, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	4643      	mov	r3, r8
 80025ce:	18e3      	adds	r3, r4, r3
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	464b      	mov	r3, r9
 80025d4:	eb45 0303 	adc.w	r3, r5, r3
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e6:	4629      	mov	r1, r5
 80025e8:	028b      	lsls	r3, r1, #10
 80025ea:	4621      	mov	r1, r4
 80025ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f0:	4621      	mov	r1, r4
 80025f2:	028a      	lsls	r2, r1, #10
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fa:	2200      	movs	r2, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	61fa      	str	r2, [r7, #28]
 8002600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002604:	f7fd fe44 	bl	8000290 <__aeabi_uldivmod>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4613      	mov	r3, r2
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	3301      	adds	r3, #1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800262a:	e002      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002634:	4618      	mov	r0, r3
 8002636:	3750      	adds	r7, #80	; 0x50
 8002638:	46bd      	mov	sp, r7
 800263a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	00f42400 	.word	0x00f42400
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCC_GetHCLKFreq+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000000 	.word	0x20000000

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002668:	f7ff fff0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	0800537c 	.word	0x0800537c

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002690:	f7ff ffdc 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0b5b      	lsrs	r3, r3, #13
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	0800537c 	.word	0x0800537c

080026b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e07b      	b.n	80027be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026d6:	d009      	beq.n	80026ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
 80026de:	e005      	b.n	80026ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fc1a 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	ea42 0103 	orr.w	r1, r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	f003 0104 	and.w	r1, r3, #4
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f003 0210 	and.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e03f      	b.n	8002858 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fe fbef 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2224      	movs	r2, #36	; 0x24
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002808:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fe12 	bl	8003434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800281e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800282e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800283e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d17c      	bne.n	800297a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_UART_Transmit+0x2c>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e075      	b.n	800297c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Transmit+0x3e>
 800289a:	2302      	movs	r3, #2
 800289c:	e06e      	b.n	800297c <HAL_UART_Transmit+0x11c>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2221      	movs	r2, #33	; 0x21
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fdb0 	bl	8001418 <HAL_GetTick>
 80028b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	88fa      	ldrh	r2, [r7, #6]
 80028be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ce:	d108      	bne.n	80028e2 <HAL_UART_Transmit+0x82>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	e003      	b.n	80028ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028f2:	e02a      	b.n	800294a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2200      	movs	r2, #0
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fb90 	bl	8003024 <UART_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e036      	b.n	800297c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002922:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	3302      	adds	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e007      	b.n	800293c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1cf      	bne.n	80028f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2200      	movs	r2, #0
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fb60 	bl	8003024 <UART_WaitOnFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e006      	b.n	800297c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	f040 808c 	bne.w	8002abe <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_UART_Receive+0x2e>
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e084      	b.n	8002ac0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_UART_Receive+0x40>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e07d      	b.n	8002ac0 <HAL_UART_Receive+0x13c>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2222      	movs	r2, #34	; 0x22
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fd1a 	bl	8001418 <HAL_GetTick>
 80029e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fa:	d108      	bne.n	8002a0e <HAL_UART_Receive+0x8a>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e003      	b.n	8002a16 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a1e:	e043      	b.n	8002aa8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fafa 	bl	8003024 <UART_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e042      	b.n	8002ac0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10c      	bne.n	8002a5a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	3302      	adds	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	e01f      	b.n	8002a9a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	d007      	beq.n	8002a74 <HAL_UART_Receive+0xf0>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <HAL_UART_Receive+0xfe>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e008      	b.n	8002a94 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1b6      	bne.n	8002a20 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
  }
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0ba      	sub	sp, #232	; 0xe8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_UART_IRQHandler+0x66>
 8002b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fbc9 	bl	80032be <UART_Receive_IT>
      return;
 8002b2c:	e256      	b.n	8002fdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80de 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x22c>
 8002b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80d1 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_UART_IRQHandler+0xae>
 8002b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_UART_IRQHandler+0xd2>
 8002b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_UART_IRQHandler+0xf6>
 8002ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0204 	orr.w	r2, r3, #4
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d011      	beq.n	8002bee <HAL_UART_IRQHandler+0x126>
 8002bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0208 	orr.w	r2, r3, #8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 81ed 	beq.w	8002fd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_UART_IRQHandler+0x14e>
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fb54 	bl	80032be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_UART_IRQHandler+0x17a>
 8002c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04f      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa5c 	bl	8003100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d141      	bne.n	8002cda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1d9      	bne.n	8002c56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d013      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	4a7d      	ldr	r2, [pc, #500]	; (8002ea4 <HAL_UART_IRQHandler+0x3dc>)
 8002cb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fd5f 	bl	800177a <HAL_DMA_Abort_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd0:	e00e      	b.n	8002cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f990 	bl	8002ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	e00a      	b.n	8002cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f98c 	bl	8002ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e006      	b.n	8002cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f988 	bl	8002ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cee:	e170      	b.n	8002fd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf0:	bf00      	nop
    return;
 8002cf2:	e16e      	b.n	8002fd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	f040 814a 	bne.w	8002f92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8143 	beq.w	8002f92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 813c 	beq.w	8002f92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	f040 80b4 	bne.w	8002ea8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8140 	beq.w	8002fd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f080 8139 	bcs.w	8002fd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	f000 8088 	beq.w	8002e8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002da6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d9      	bne.n	8002d7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3314      	adds	r3, #20
 8002dcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3314      	adds	r3, #20
 8002de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e1      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3314      	adds	r3, #20
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3314      	adds	r3, #20
 8002e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e3      	bne.n	8002e02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e52:	e853 3f00 	ldrex	r3, [r3]
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5a:	f023 0310 	bic.w	r3, r3, #16
 8002e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e3      	bne.n	8002e48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fc08 	bl	800169a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8b6 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ea0:	e099      	b.n	8002fd6 <HAL_UART_IRQHandler+0x50e>
 8002ea2:	bf00      	nop
 8002ea4:	080031c7 	.word	0x080031c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808b 	beq.w	8002fda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8086 	beq.w	8002fda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8002ef4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e3      	bne.n	8002ece <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	623b      	str	r3, [r7, #32]
   return(result);
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f32:	e841 2300 	strex	r3, r2, [r1]
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e3      	bne.n	8002f06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0310 	bic.w	r3, r3, #16
 8002f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f70:	61fa      	str	r2, [r7, #28]
 8002f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e3      	bne.n	8002f4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f83e 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f90:	e023      	b.n	8002fda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x4ea>
 8002f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f91f 	bl	80031ee <UART_Transmit_IT>
    return;
 8002fb0:	e014      	b.n	8002fdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00e      	beq.n	8002fdc <HAL_UART_IRQHandler+0x514>
 8002fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f95f 	bl	800328e <UART_EndTransmit_IT>
    return;
 8002fd0:	e004      	b.n	8002fdc <HAL_UART_IRQHandler+0x514>
    return;
 8002fd2:	bf00      	nop
 8002fd4:	e002      	b.n	8002fdc <HAL_UART_IRQHandler+0x514>
      return;
 8002fd6:	bf00      	nop
 8002fd8:	e000      	b.n	8002fdc <HAL_UART_IRQHandler+0x514>
      return;
 8002fda:	bf00      	nop
  }
}
 8002fdc:	37e8      	adds	r7, #232	; 0xe8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b090      	sub	sp, #64	; 0x40
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003034:	e050      	b.n	80030d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d04c      	beq.n	80030d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800303e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <UART_WaitOnFlagUntilTimeout+0x30>
 8003044:	f7fe f9e8 	bl	8001418 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003050:	429a      	cmp	r2, r3
 8003052:	d241      	bcs.n	80030d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003074:	637a      	str	r2, [r7, #52]	; 0x34
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800307a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	613b      	str	r3, [r7, #16]
   return(result);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3314      	adds	r3, #20
 80030a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a8:	623a      	str	r2, [r7, #32]
 80030aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	69f9      	ldr	r1, [r7, #28]
 80030ae:	6a3a      	ldr	r2, [r7, #32]
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e00f      	b.n	80030f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d09f      	beq.n	8003036 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3740      	adds	r7, #64	; 0x40
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b095      	sub	sp, #84	; 0x54
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003128:	643a      	str	r2, [r7, #64]	; 0x40
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800312e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3314      	adds	r3, #20
 8003142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	61fb      	str	r3, [r7, #28]
   return(result);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800315c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e5      	bne.n	800313c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	2b01      	cmp	r3, #1
 8003176:	d119      	bne.n	80031ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	60bb      	str	r3, [r7, #8]
   return(result);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003198:	61ba      	str	r2, [r7, #24]
 800319a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6979      	ldr	r1, [r7, #20]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	613b      	str	r3, [r7, #16]
   return(result);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031ba:	bf00      	nop
 80031bc:	3754      	adds	r7, #84	; 0x54
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff ff09 	bl	8002ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b21      	cmp	r3, #33	; 0x21
 8003200:	d13e      	bne.n	8003280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d114      	bne.n	8003236 <UART_Transmit_IT+0x48>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d110      	bne.n	8003236 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	621a      	str	r2, [r3, #32]
 8003234:	e008      	b.n	8003248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	1c59      	adds	r1, r3, #1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6211      	str	r1, [r2, #32]
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4619      	mov	r1, r3
 8003256:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10f      	bne.n	800327c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fe98 	bl	8002fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b08c      	sub	sp, #48	; 0x30
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b22      	cmp	r3, #34	; 0x22
 80032d0:	f040 80ab 	bne.w	800342a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d117      	bne.n	800330e <UART_Receive_IT+0x50>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d113      	bne.n	800330e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	1c9a      	adds	r2, r3, #2
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	e026      	b.n	800335c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003320:	d007      	beq.n	8003332 <UART_Receive_IT+0x74>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <UART_Receive_IT+0x82>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e008      	b.n	8003352 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800334c:	b2da      	uxtb	r2, r3
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29b      	uxth	r3, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4619      	mov	r1, r3
 800336a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800336c:	2b00      	cmp	r3, #0
 800336e:	d15a      	bne.n	8003426 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0220 	bic.w	r2, r2, #32
 800337e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800338e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d135      	bne.n	800341c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 0310 	bic.w	r3, r3, #16
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	623a      	str	r2, [r7, #32]
 80033d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d10a      	bne.n	800340e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fdf9 	bl	800300c <HAL_UARTEx_RxEventCallback>
 800341a:	e002      	b.n	8003422 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fd fd27 	bl	8000e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e002      	b.n	800342c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3730      	adds	r7, #48	; 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b0c0      	sub	sp, #256	; 0x100
 800343a:	af00      	add	r7, sp, #0
 800343c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	68d9      	ldr	r1, [r3, #12]
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	ea40 0301 	orr.w	r3, r0, r1
 800345c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800348c:	f021 010c 	bic.w	r1, r1, #12
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800349a:	430b      	orrs	r3, r1
 800349c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	6999      	ldr	r1, [r3, #24]
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	ea40 0301 	orr.w	r3, r0, r1
 80034ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b8f      	ldr	r3, [pc, #572]	; (8003700 <UART_SetConfig+0x2cc>)
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d005      	beq.n	80034d4 <UART_SetConfig+0xa0>
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b8d      	ldr	r3, [pc, #564]	; (8003704 <UART_SetConfig+0x2d0>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d104      	bne.n	80034de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff f8da 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 80034d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034dc:	e003      	b.n	80034e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034de:	f7ff f8c1 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80034e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f0:	f040 810c 	bne.w	800370c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	1891      	adds	r1, r2, r2
 800350c:	65b9      	str	r1, [r7, #88]	; 0x58
 800350e:	415b      	adcs	r3, r3
 8003510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003516:	4621      	mov	r1, r4
 8003518:	eb12 0801 	adds.w	r8, r2, r1
 800351c:	4629      	mov	r1, r5
 800351e:	eb43 0901 	adc.w	r9, r3, r1
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800352e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003536:	4690      	mov	r8, r2
 8003538:	4699      	mov	r9, r3
 800353a:	4623      	mov	r3, r4
 800353c:	eb18 0303 	adds.w	r3, r8, r3
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003544:	462b      	mov	r3, r5
 8003546:	eb49 0303 	adc.w	r3, r9, r3
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800355a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800355e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003562:	460b      	mov	r3, r1
 8003564:	18db      	adds	r3, r3, r3
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
 8003568:	4613      	mov	r3, r2
 800356a:	eb42 0303 	adc.w	r3, r2, r3
 800356e:	657b      	str	r3, [r7, #84]	; 0x54
 8003570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003578:	f7fc fe8a 	bl	8000290 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4b61      	ldr	r3, [pc, #388]	; (8003708 <UART_SetConfig+0x2d4>)
 8003582:	fba3 2302 	umull	r2, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	011c      	lsls	r4, r3, #4
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003594:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80035a4:	415b      	adcs	r3, r3
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035ac:	4641      	mov	r1, r8
 80035ae:	eb12 0a01 	adds.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb43 0b01 	adc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035cc:	4692      	mov	sl, r2
 80035ce:	469b      	mov	fp, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	eb1a 0303 	adds.w	r3, sl, r3
 80035d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035da:	464b      	mov	r3, r9
 80035dc:	eb4b 0303 	adc.w	r3, fp, r3
 80035e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035f8:	460b      	mov	r3, r1
 80035fa:	18db      	adds	r3, r3, r3
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
 80035fe:	4613      	mov	r3, r2
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	647b      	str	r3, [r7, #68]	; 0x44
 8003606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800360a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800360e:	f7fc fe3f 	bl	8000290 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4611      	mov	r1, r2
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <UART_SetConfig+0x2d4>)
 800361a:	fba3 2301 	umull	r2, r3, r3, r1
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2264      	movs	r2, #100	; 0x64
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	1acb      	subs	r3, r1, r3
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <UART_SetConfig+0x2d4>)
 8003630:	fba3 2302 	umull	r2, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800363c:	441c      	add	r4, r3
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800364c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	1891      	adds	r1, r2, r2
 8003656:	63b9      	str	r1, [r7, #56]	; 0x38
 8003658:	415b      	adcs	r3, r3
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003660:	4641      	mov	r1, r8
 8003662:	1851      	adds	r1, r2, r1
 8003664:	6339      	str	r1, [r7, #48]	; 0x30
 8003666:	4649      	mov	r1, r9
 8003668:	414b      	adcs	r3, r1
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003678:	4659      	mov	r1, fp
 800367a:	00cb      	lsls	r3, r1, #3
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003682:	4651      	mov	r1, sl
 8003684:	00ca      	lsls	r2, r1, #3
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	4603      	mov	r3, r0
 800368c:	4642      	mov	r2, r8
 800368e:	189b      	adds	r3, r3, r2
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003694:	464b      	mov	r3, r9
 8003696:	460a      	mov	r2, r1
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ca:	f7fc fde1 	bl	8000290 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <UART_SetConfig+0x2d4>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	; 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	4a08      	ldr	r2, [pc, #32]	; (8003708 <UART_SetConfig+0x2d4>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	f003 0207 	and.w	r2, r3, #7
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4422      	add	r2, r4
 80036fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036fc:	e105      	b.n	800390a <UART_SetConfig+0x4d6>
 80036fe:	bf00      	nop
 8003700:	40011000 	.word	0x40011000
 8003704:	40011400 	.word	0x40011400
 8003708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003710:	2200      	movs	r2, #0
 8003712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003716:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800371a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800371e:	4642      	mov	r2, r8
 8003720:	464b      	mov	r3, r9
 8003722:	1891      	adds	r1, r2, r2
 8003724:	6239      	str	r1, [r7, #32]
 8003726:	415b      	adcs	r3, r3
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800372e:	4641      	mov	r1, r8
 8003730:	1854      	adds	r4, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb43 0501 	adc.w	r5, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003754:	464b      	mov	r3, r9
 8003756:	eb45 0303 	adc.w	r3, r5, r3
 800375a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800376a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800377a:	4629      	mov	r1, r5
 800377c:	008b      	lsls	r3, r1, #2
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003784:	4621      	mov	r1, r4
 8003786:	008a      	lsls	r2, r1, #2
 8003788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800378c:	f7fc fd80 	bl	8000290 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <UART_SetConfig+0x4e4>)
 8003796:	fba3 2302 	umull	r2, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	011c      	lsls	r4, r3, #4
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	61b9      	str	r1, [r7, #24]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c0:	4641      	mov	r1, r8
 80037c2:	1851      	adds	r1, r2, r1
 80037c4:	6139      	str	r1, [r7, #16]
 80037c6:	4649      	mov	r1, r9
 80037c8:	414b      	adcs	r3, r1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d8:	4659      	mov	r1, fp
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4651      	mov	r1, sl
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4642      	mov	r2, r8
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037f4:	464b      	mov	r3, r9
 80037f6:	460a      	mov	r2, r1
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	67bb      	str	r3, [r7, #120]	; 0x78
 800380a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003818:	4649      	mov	r1, r9
 800381a:	008b      	lsls	r3, r1, #2
 800381c:	4641      	mov	r1, r8
 800381e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003822:	4641      	mov	r1, r8
 8003824:	008a      	lsls	r2, r1, #2
 8003826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800382a:	f7fc fd31 	bl	8000290 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <UART_SetConfig+0x4e4>)
 8003834:	fba3 1302 	umull	r1, r3, r3, r2
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	2164      	movs	r1, #100	; 0x64
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	3332      	adds	r3, #50	; 0x32
 8003846:	4a34      	ldr	r2, [pc, #208]	; (8003918 <UART_SetConfig+0x4e4>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003852:	441c      	add	r4, r3
 8003854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003858:	2200      	movs	r2, #0
 800385a:	673b      	str	r3, [r7, #112]	; 0x70
 800385c:	677a      	str	r2, [r7, #116]	; 0x74
 800385e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003862:	4642      	mov	r2, r8
 8003864:	464b      	mov	r3, r9
 8003866:	1891      	adds	r1, r2, r2
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	415b      	adcs	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003872:	4641      	mov	r1, r8
 8003874:	1851      	adds	r1, r2, r1
 8003876:	6039      	str	r1, [r7, #0]
 8003878:	4649      	mov	r1, r9
 800387a:	414b      	adcs	r3, r1
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800388a:	4659      	mov	r1, fp
 800388c:	00cb      	lsls	r3, r1, #3
 800388e:	4651      	mov	r1, sl
 8003890:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003894:	4651      	mov	r1, sl
 8003896:	00ca      	lsls	r2, r1, #3
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	4603      	mov	r3, r0
 800389e:	4642      	mov	r2, r8
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a4:	464b      	mov	r3, r9
 80038a6:	460a      	mov	r2, r1
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	663b      	str	r3, [r7, #96]	; 0x60
 80038b8:	667a      	str	r2, [r7, #100]	; 0x64
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038c6:	4649      	mov	r1, r9
 80038c8:	008b      	lsls	r3, r1, #2
 80038ca:	4641      	mov	r1, r8
 80038cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d0:	4641      	mov	r1, r8
 80038d2:	008a      	lsls	r2, r1, #2
 80038d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038d8:	f7fc fcda 	bl	8000290 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <UART_SetConfig+0x4e4>)
 80038e2:	fba3 1302 	umull	r1, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2164      	movs	r1, #100	; 0x64
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	3332      	adds	r3, #50	; 0x32
 80038f4:	4a08      	ldr	r2, [pc, #32]	; (8003918 <UART_SetConfig+0x4e4>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4422      	add	r2, r4
 8003908:	609a      	str	r2, [r3, #8]
}
 800390a:	bf00      	nop
 800390c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003916:	bf00      	nop
 8003918:	51eb851f 	.word	0x51eb851f

0800391c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800391c:	b084      	sub	sp, #16
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	f107 001c 	add.w	r0, r7, #28
 800392a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2b01      	cmp	r3, #1
 8003932:	d122      	bne.n	800397a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800395c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 faa2 	bl	8003eb8 <USB_CoreReset>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e01a      	b.n	80039b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa96 	bl	8003eb8 <USB_CoreReset>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
 80039a2:	e005      	b.n	80039b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d10b      	bne.n	80039ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f043 0206 	orr.w	r2, r3, #6
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039da:	b004      	add	sp, #16
 80039dc:	4770      	bx	lr

080039de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d115      	bne.n	8003a4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f7fd fcfe 	bl	8001430 <HAL_Delay>
      ms++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fa2e 	bl	8003e9c <USB_GetMode>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d01e      	beq.n	8003a84 <USB_SetCurrentMode+0x84>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b31      	cmp	r3, #49	; 0x31
 8003a4a:	d9f0      	bls.n	8003a2e <USB_SetCurrentMode+0x2e>
 8003a4c:	e01a      	b.n	8003a84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d115      	bne.n	8003a80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7fd fce5 	bl	8001430 <HAL_Delay>
      ms++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fa15 	bl	8003e9c <USB_GetMode>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <USB_SetCurrentMode+0x84>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b31      	cmp	r3, #49	; 0x31
 8003a7c:	d9f0      	bls.n	8003a60 <USB_SetCurrentMode+0x60>
 8003a7e:	e001      	b.n	8003a84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e005      	b.n	8003a90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b32      	cmp	r3, #50	; 0x32
 8003a88:	d101      	bne.n	8003a8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a98:	b084      	sub	sp, #16
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e009      	b.n	8003acc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3340      	adds	r3, #64	; 0x40
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0e      	cmp	r3, #14
 8003ad0:	d9f2      	bls.n	8003ab8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11c      	bne.n	8003b12 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae6:	f043 0302 	orr.w	r3, r3, #2
 8003aea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8003b10:	e00b      	b.n	8003b2a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b30:	461a      	mov	r2, r3
 8003b32:	2300      	movs	r3, #0
 8003b34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b44:	461a      	mov	r2, r3
 8003b46:	680b      	ldr	r3, [r1, #0]
 8003b48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d10c      	bne.n	8003b6a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b56:	2100      	movs	r1, #0
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f965 	bl	8003e28 <USB_SetDevSpeed>
 8003b5e:	e008      	b.n	8003b72 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b60:	2101      	movs	r1, #1
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f960 	bl	8003e28 <USB_SetDevSpeed>
 8003b68:	e003      	b.n	8003b72 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f95b 	bl	8003e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b72:	2110      	movs	r1, #16
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8f3 	bl	8003d60 <USB_FlushTxFifo>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f91f 	bl	8003dc8 <USB_FlushRxFifo>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	e043      	b.n	8003c46 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd4:	d118      	bne.n	8003c08 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	461a      	mov	r2, r3
 8003bea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e013      	b.n	8003c1a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e008      	b.n	8003c1a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c26:	461a      	mov	r2, r3
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	3301      	adds	r3, #1
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3b7      	bcc.n	8003bbe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e043      	b.n	8003cdc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c6a:	d118      	bne.n	8003c9e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e013      	b.n	8003cb0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	461a      	mov	r2, r3
 8003c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	e008      	b.n	8003cb0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003caa:	461a      	mov	r2, r3
 8003cac:	2300      	movs	r3, #0
 8003cae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3b7      	bcc.n	8003c54 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <USB_DevInit+0x2c4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f043 0208 	orr.w	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d58:	b004      	add	sp, #16
 8003d5a:	4770      	bx	lr
 8003d5c:	803c3800 	.word	0x803c3800

08003d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <USB_FlushTxFifo+0x64>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e01b      	b.n	8003db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	daf2      	bge.n	8003d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	019b      	lsls	r3, r3, #6
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <USB_FlushTxFifo+0x64>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e006      	b.n	8003db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d0f0      	beq.n	8003d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	00030d40 	.word	0x00030d40

08003dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a11      	ldr	r2, [pc, #68]	; (8003e24 <USB_FlushRxFifo+0x5c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e018      	b.n	8003e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	daf2      	bge.n	8003dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2210      	movs	r2, #16
 8003df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <USB_FlushRxFifo+0x5c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e006      	b.n	8003e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d0f0      	beq.n	8003df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	00030d40 	.word	0x00030d40

08003e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e74:	f023 0303 	bic.w	r3, r3, #3
 8003e78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <USB_CoreReset+0x64>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e01b      	b.n	8003f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	daf2      	bge.n	8003ec4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <USB_CoreReset+0x64>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e006      	b.n	8003f0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d0f0      	beq.n	8003eee <USB_CoreReset+0x36>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	00030d40 	.word	0x00030d40

08003f20 <__errno>:
 8003f20:	4b01      	ldr	r3, [pc, #4]	; (8003f28 <__errno+0x8>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000000c 	.word	0x2000000c

08003f2c <__libc_init_array>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	4d0d      	ldr	r5, [pc, #52]	; (8003f64 <__libc_init_array+0x38>)
 8003f30:	4c0d      	ldr	r4, [pc, #52]	; (8003f68 <__libc_init_array+0x3c>)
 8003f32:	1b64      	subs	r4, r4, r5
 8003f34:	10a4      	asrs	r4, r4, #2
 8003f36:	2600      	movs	r6, #0
 8003f38:	42a6      	cmp	r6, r4
 8003f3a:	d109      	bne.n	8003f50 <__libc_init_array+0x24>
 8003f3c:	4d0b      	ldr	r5, [pc, #44]	; (8003f6c <__libc_init_array+0x40>)
 8003f3e:	4c0c      	ldr	r4, [pc, #48]	; (8003f70 <__libc_init_array+0x44>)
 8003f40:	f001 f882 	bl	8005048 <_init>
 8003f44:	1b64      	subs	r4, r4, r5
 8003f46:	10a4      	asrs	r4, r4, #2
 8003f48:	2600      	movs	r6, #0
 8003f4a:	42a6      	cmp	r6, r4
 8003f4c:	d105      	bne.n	8003f5a <__libc_init_array+0x2e>
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f54:	4798      	blx	r3
 8003f56:	3601      	adds	r6, #1
 8003f58:	e7ee      	b.n	8003f38 <__libc_init_array+0xc>
 8003f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5e:	4798      	blx	r3
 8003f60:	3601      	adds	r6, #1
 8003f62:	e7f2      	b.n	8003f4a <__libc_init_array+0x1e>
 8003f64:	08005424 	.word	0x08005424
 8003f68:	08005424 	.word	0x08005424
 8003f6c:	08005424 	.word	0x08005424
 8003f70:	08005428 	.word	0x08005428

08003f74 <memset>:
 8003f74:	4402      	add	r2, r0
 8003f76:	4603      	mov	r3, r0
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <iprintf>:
 8003f84:	b40f      	push	{r0, r1, r2, r3}
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <iprintf+0x2c>)
 8003f88:	b513      	push	{r0, r1, r4, lr}
 8003f8a:	681c      	ldr	r4, [r3, #0]
 8003f8c:	b124      	cbz	r4, 8003f98 <iprintf+0x14>
 8003f8e:	69a3      	ldr	r3, [r4, #24]
 8003f90:	b913      	cbnz	r3, 8003f98 <iprintf+0x14>
 8003f92:	4620      	mov	r0, r4
 8003f94:	f000 fa74 	bl	8004480 <__sinit>
 8003f98:	ab05      	add	r3, sp, #20
 8003f9a:	9a04      	ldr	r2, [sp, #16]
 8003f9c:	68a1      	ldr	r1, [r4, #8]
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f000 fc7d 	bl	80048a0 <_vfiprintf_r>
 8003fa6:	b002      	add	sp, #8
 8003fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fac:	b004      	add	sp, #16
 8003fae:	4770      	bx	lr
 8003fb0:	2000000c 	.word	0x2000000c

08003fb4 <putchar>:
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <putchar+0x28>)
 8003fb6:	b513      	push	{r0, r1, r4, lr}
 8003fb8:	681c      	ldr	r4, [r3, #0]
 8003fba:	4601      	mov	r1, r0
 8003fbc:	b134      	cbz	r4, 8003fcc <putchar+0x18>
 8003fbe:	69a3      	ldr	r3, [r4, #24]
 8003fc0:	b923      	cbnz	r3, 8003fcc <putchar+0x18>
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 fa5b 	bl	8004480 <__sinit>
 8003fca:	9901      	ldr	r1, [sp, #4]
 8003fcc:	68a2      	ldr	r2, [r4, #8]
 8003fce:	4620      	mov	r0, r4
 8003fd0:	b002      	add	sp, #8
 8003fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd6:	f000 bf27 	b.w	8004e28 <_putc_r>
 8003fda:	bf00      	nop
 8003fdc:	2000000c 	.word	0x2000000c

08003fe0 <_puts_r>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	460e      	mov	r6, r1
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	b118      	cbz	r0, 8003ff0 <_puts_r+0x10>
 8003fe8:	6983      	ldr	r3, [r0, #24]
 8003fea:	b90b      	cbnz	r3, 8003ff0 <_puts_r+0x10>
 8003fec:	f000 fa48 	bl	8004480 <__sinit>
 8003ff0:	69ab      	ldr	r3, [r5, #24]
 8003ff2:	68ac      	ldr	r4, [r5, #8]
 8003ff4:	b913      	cbnz	r3, 8003ffc <_puts_r+0x1c>
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f000 fa42 	bl	8004480 <__sinit>
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <_puts_r+0xd0>)
 8003ffe:	429c      	cmp	r4, r3
 8004000:	d120      	bne.n	8004044 <_puts_r+0x64>
 8004002:	686c      	ldr	r4, [r5, #4]
 8004004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004006:	07db      	lsls	r3, r3, #31
 8004008:	d405      	bmi.n	8004016 <_puts_r+0x36>
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	0598      	lsls	r0, r3, #22
 800400e:	d402      	bmi.n	8004016 <_puts_r+0x36>
 8004010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004012:	f000 fad3 	bl	80045bc <__retarget_lock_acquire_recursive>
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	0719      	lsls	r1, r3, #28
 800401a:	d51d      	bpl.n	8004058 <_puts_r+0x78>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	b1db      	cbz	r3, 8004058 <_puts_r+0x78>
 8004020:	3e01      	subs	r6, #1
 8004022:	68a3      	ldr	r3, [r4, #8]
 8004024:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004028:	3b01      	subs	r3, #1
 800402a:	60a3      	str	r3, [r4, #8]
 800402c:	bb39      	cbnz	r1, 800407e <_puts_r+0x9e>
 800402e:	2b00      	cmp	r3, #0
 8004030:	da38      	bge.n	80040a4 <_puts_r+0xc4>
 8004032:	4622      	mov	r2, r4
 8004034:	210a      	movs	r1, #10
 8004036:	4628      	mov	r0, r5
 8004038:	f000 f848 	bl	80040cc <__swbuf_r>
 800403c:	3001      	adds	r0, #1
 800403e:	d011      	beq.n	8004064 <_puts_r+0x84>
 8004040:	250a      	movs	r5, #10
 8004042:	e011      	b.n	8004068 <_puts_r+0x88>
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <_puts_r+0xd4>)
 8004046:	429c      	cmp	r4, r3
 8004048:	d101      	bne.n	800404e <_puts_r+0x6e>
 800404a:	68ac      	ldr	r4, [r5, #8]
 800404c:	e7da      	b.n	8004004 <_puts_r+0x24>
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <_puts_r+0xd8>)
 8004050:	429c      	cmp	r4, r3
 8004052:	bf08      	it	eq
 8004054:	68ec      	ldreq	r4, [r5, #12]
 8004056:	e7d5      	b.n	8004004 <_puts_r+0x24>
 8004058:	4621      	mov	r1, r4
 800405a:	4628      	mov	r0, r5
 800405c:	f000 f888 	bl	8004170 <__swsetup_r>
 8004060:	2800      	cmp	r0, #0
 8004062:	d0dd      	beq.n	8004020 <_puts_r+0x40>
 8004064:	f04f 35ff 	mov.w	r5, #4294967295
 8004068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800406a:	07da      	lsls	r2, r3, #31
 800406c:	d405      	bmi.n	800407a <_puts_r+0x9a>
 800406e:	89a3      	ldrh	r3, [r4, #12]
 8004070:	059b      	lsls	r3, r3, #22
 8004072:	d402      	bmi.n	800407a <_puts_r+0x9a>
 8004074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004076:	f000 faa2 	bl	80045be <__retarget_lock_release_recursive>
 800407a:	4628      	mov	r0, r5
 800407c:	bd70      	pop	{r4, r5, r6, pc}
 800407e:	2b00      	cmp	r3, #0
 8004080:	da04      	bge.n	800408c <_puts_r+0xac>
 8004082:	69a2      	ldr	r2, [r4, #24]
 8004084:	429a      	cmp	r2, r3
 8004086:	dc06      	bgt.n	8004096 <_puts_r+0xb6>
 8004088:	290a      	cmp	r1, #10
 800408a:	d004      	beq.n	8004096 <_puts_r+0xb6>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	6022      	str	r2, [r4, #0]
 8004092:	7019      	strb	r1, [r3, #0]
 8004094:	e7c5      	b.n	8004022 <_puts_r+0x42>
 8004096:	4622      	mov	r2, r4
 8004098:	4628      	mov	r0, r5
 800409a:	f000 f817 	bl	80040cc <__swbuf_r>
 800409e:	3001      	adds	r0, #1
 80040a0:	d1bf      	bne.n	8004022 <_puts_r+0x42>
 80040a2:	e7df      	b.n	8004064 <_puts_r+0x84>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	250a      	movs	r5, #10
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	6022      	str	r2, [r4, #0]
 80040ac:	701d      	strb	r5, [r3, #0]
 80040ae:	e7db      	b.n	8004068 <_puts_r+0x88>
 80040b0:	080053a8 	.word	0x080053a8
 80040b4:	080053c8 	.word	0x080053c8
 80040b8:	08005388 	.word	0x08005388

080040bc <puts>:
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <puts+0xc>)
 80040be:	4601      	mov	r1, r0
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	f7ff bf8d 	b.w	8003fe0 <_puts_r>
 80040c6:	bf00      	nop
 80040c8:	2000000c 	.word	0x2000000c

080040cc <__swbuf_r>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	460e      	mov	r6, r1
 80040d0:	4614      	mov	r4, r2
 80040d2:	4605      	mov	r5, r0
 80040d4:	b118      	cbz	r0, 80040de <__swbuf_r+0x12>
 80040d6:	6983      	ldr	r3, [r0, #24]
 80040d8:	b90b      	cbnz	r3, 80040de <__swbuf_r+0x12>
 80040da:	f000 f9d1 	bl	8004480 <__sinit>
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <__swbuf_r+0x98>)
 80040e0:	429c      	cmp	r4, r3
 80040e2:	d12b      	bne.n	800413c <__swbuf_r+0x70>
 80040e4:	686c      	ldr	r4, [r5, #4]
 80040e6:	69a3      	ldr	r3, [r4, #24]
 80040e8:	60a3      	str	r3, [r4, #8]
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	071a      	lsls	r2, r3, #28
 80040ee:	d52f      	bpl.n	8004150 <__swbuf_r+0x84>
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	b36b      	cbz	r3, 8004150 <__swbuf_r+0x84>
 80040f4:	6923      	ldr	r3, [r4, #16]
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	1ac0      	subs	r0, r0, r3
 80040fa:	6963      	ldr	r3, [r4, #20]
 80040fc:	b2f6      	uxtb	r6, r6
 80040fe:	4283      	cmp	r3, r0
 8004100:	4637      	mov	r7, r6
 8004102:	dc04      	bgt.n	800410e <__swbuf_r+0x42>
 8004104:	4621      	mov	r1, r4
 8004106:	4628      	mov	r0, r5
 8004108:	f000 f926 	bl	8004358 <_fflush_r>
 800410c:	bb30      	cbnz	r0, 800415c <__swbuf_r+0x90>
 800410e:	68a3      	ldr	r3, [r4, #8]
 8004110:	3b01      	subs	r3, #1
 8004112:	60a3      	str	r3, [r4, #8]
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	6022      	str	r2, [r4, #0]
 800411a:	701e      	strb	r6, [r3, #0]
 800411c:	6963      	ldr	r3, [r4, #20]
 800411e:	3001      	adds	r0, #1
 8004120:	4283      	cmp	r3, r0
 8004122:	d004      	beq.n	800412e <__swbuf_r+0x62>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	07db      	lsls	r3, r3, #31
 8004128:	d506      	bpl.n	8004138 <__swbuf_r+0x6c>
 800412a:	2e0a      	cmp	r6, #10
 800412c:	d104      	bne.n	8004138 <__swbuf_r+0x6c>
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f000 f911 	bl	8004358 <_fflush_r>
 8004136:	b988      	cbnz	r0, 800415c <__swbuf_r+0x90>
 8004138:	4638      	mov	r0, r7
 800413a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <__swbuf_r+0x9c>)
 800413e:	429c      	cmp	r4, r3
 8004140:	d101      	bne.n	8004146 <__swbuf_r+0x7a>
 8004142:	68ac      	ldr	r4, [r5, #8]
 8004144:	e7cf      	b.n	80040e6 <__swbuf_r+0x1a>
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <__swbuf_r+0xa0>)
 8004148:	429c      	cmp	r4, r3
 800414a:	bf08      	it	eq
 800414c:	68ec      	ldreq	r4, [r5, #12]
 800414e:	e7ca      	b.n	80040e6 <__swbuf_r+0x1a>
 8004150:	4621      	mov	r1, r4
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f80c 	bl	8004170 <__swsetup_r>
 8004158:	2800      	cmp	r0, #0
 800415a:	d0cb      	beq.n	80040f4 <__swbuf_r+0x28>
 800415c:	f04f 37ff 	mov.w	r7, #4294967295
 8004160:	e7ea      	b.n	8004138 <__swbuf_r+0x6c>
 8004162:	bf00      	nop
 8004164:	080053a8 	.word	0x080053a8
 8004168:	080053c8 	.word	0x080053c8
 800416c:	08005388 	.word	0x08005388

08004170 <__swsetup_r>:
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <__swsetup_r+0xcc>)
 8004172:	b570      	push	{r4, r5, r6, lr}
 8004174:	681d      	ldr	r5, [r3, #0]
 8004176:	4606      	mov	r6, r0
 8004178:	460c      	mov	r4, r1
 800417a:	b125      	cbz	r5, 8004186 <__swsetup_r+0x16>
 800417c:	69ab      	ldr	r3, [r5, #24]
 800417e:	b913      	cbnz	r3, 8004186 <__swsetup_r+0x16>
 8004180:	4628      	mov	r0, r5
 8004182:	f000 f97d 	bl	8004480 <__sinit>
 8004186:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <__swsetup_r+0xd0>)
 8004188:	429c      	cmp	r4, r3
 800418a:	d10f      	bne.n	80041ac <__swsetup_r+0x3c>
 800418c:	686c      	ldr	r4, [r5, #4]
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004194:	0719      	lsls	r1, r3, #28
 8004196:	d42c      	bmi.n	80041f2 <__swsetup_r+0x82>
 8004198:	06dd      	lsls	r5, r3, #27
 800419a:	d411      	bmi.n	80041c0 <__swsetup_r+0x50>
 800419c:	2309      	movs	r3, #9
 800419e:	6033      	str	r3, [r6, #0]
 80041a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041a4:	81a3      	strh	r3, [r4, #12]
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295
 80041aa:	e03e      	b.n	800422a <__swsetup_r+0xba>
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <__swsetup_r+0xd4>)
 80041ae:	429c      	cmp	r4, r3
 80041b0:	d101      	bne.n	80041b6 <__swsetup_r+0x46>
 80041b2:	68ac      	ldr	r4, [r5, #8]
 80041b4:	e7eb      	b.n	800418e <__swsetup_r+0x1e>
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <__swsetup_r+0xd8>)
 80041b8:	429c      	cmp	r4, r3
 80041ba:	bf08      	it	eq
 80041bc:	68ec      	ldreq	r4, [r5, #12]
 80041be:	e7e6      	b.n	800418e <__swsetup_r+0x1e>
 80041c0:	0758      	lsls	r0, r3, #29
 80041c2:	d512      	bpl.n	80041ea <__swsetup_r+0x7a>
 80041c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c6:	b141      	cbz	r1, 80041da <__swsetup_r+0x6a>
 80041c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d002      	beq.n	80041d6 <__swsetup_r+0x66>
 80041d0:	4630      	mov	r0, r6
 80041d2:	f000 fa5b 	bl	800468c <_free_r>
 80041d6:	2300      	movs	r3, #0
 80041d8:	6363      	str	r3, [r4, #52]	; 0x34
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	2300      	movs	r3, #0
 80041e4:	6063      	str	r3, [r4, #4]
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	89a3      	ldrh	r3, [r4, #12]
 80041ec:	f043 0308 	orr.w	r3, r3, #8
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	b94b      	cbnz	r3, 800420a <__swsetup_r+0x9a>
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004200:	d003      	beq.n	800420a <__swsetup_r+0x9a>
 8004202:	4621      	mov	r1, r4
 8004204:	4630      	mov	r0, r6
 8004206:	f000 fa01 	bl	800460c <__smakebuf_r>
 800420a:	89a0      	ldrh	r0, [r4, #12]
 800420c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004210:	f010 0301 	ands.w	r3, r0, #1
 8004214:	d00a      	beq.n	800422c <__swsetup_r+0xbc>
 8004216:	2300      	movs	r3, #0
 8004218:	60a3      	str	r3, [r4, #8]
 800421a:	6963      	ldr	r3, [r4, #20]
 800421c:	425b      	negs	r3, r3
 800421e:	61a3      	str	r3, [r4, #24]
 8004220:	6923      	ldr	r3, [r4, #16]
 8004222:	b943      	cbnz	r3, 8004236 <__swsetup_r+0xc6>
 8004224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004228:	d1ba      	bne.n	80041a0 <__swsetup_r+0x30>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	0781      	lsls	r1, r0, #30
 800422e:	bf58      	it	pl
 8004230:	6963      	ldrpl	r3, [r4, #20]
 8004232:	60a3      	str	r3, [r4, #8]
 8004234:	e7f4      	b.n	8004220 <__swsetup_r+0xb0>
 8004236:	2000      	movs	r0, #0
 8004238:	e7f7      	b.n	800422a <__swsetup_r+0xba>
 800423a:	bf00      	nop
 800423c:	2000000c 	.word	0x2000000c
 8004240:	080053a8 	.word	0x080053a8
 8004244:	080053c8 	.word	0x080053c8
 8004248:	08005388 	.word	0x08005388

0800424c <__sflush_r>:
 800424c:	898a      	ldrh	r2, [r1, #12]
 800424e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	4605      	mov	r5, r0
 8004254:	0710      	lsls	r0, r2, #28
 8004256:	460c      	mov	r4, r1
 8004258:	d458      	bmi.n	800430c <__sflush_r+0xc0>
 800425a:	684b      	ldr	r3, [r1, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	dc05      	bgt.n	800426c <__sflush_r+0x20>
 8004260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	dc02      	bgt.n	800426c <__sflush_r+0x20>
 8004266:	2000      	movs	r0, #0
 8004268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800426c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800426e:	2e00      	cmp	r6, #0
 8004270:	d0f9      	beq.n	8004266 <__sflush_r+0x1a>
 8004272:	2300      	movs	r3, #0
 8004274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004278:	682f      	ldr	r7, [r5, #0]
 800427a:	602b      	str	r3, [r5, #0]
 800427c:	d032      	beq.n	80042e4 <__sflush_r+0x98>
 800427e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	075a      	lsls	r2, r3, #29
 8004284:	d505      	bpl.n	8004292 <__sflush_r+0x46>
 8004286:	6863      	ldr	r3, [r4, #4]
 8004288:	1ac0      	subs	r0, r0, r3
 800428a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800428c:	b10b      	cbz	r3, 8004292 <__sflush_r+0x46>
 800428e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004290:	1ac0      	subs	r0, r0, r3
 8004292:	2300      	movs	r3, #0
 8004294:	4602      	mov	r2, r0
 8004296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004298:	6a21      	ldr	r1, [r4, #32]
 800429a:	4628      	mov	r0, r5
 800429c:	47b0      	blx	r6
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	d106      	bne.n	80042b2 <__sflush_r+0x66>
 80042a4:	6829      	ldr	r1, [r5, #0]
 80042a6:	291d      	cmp	r1, #29
 80042a8:	d82c      	bhi.n	8004304 <__sflush_r+0xb8>
 80042aa:	4a2a      	ldr	r2, [pc, #168]	; (8004354 <__sflush_r+0x108>)
 80042ac:	40ca      	lsrs	r2, r1
 80042ae:	07d6      	lsls	r6, r2, #31
 80042b0:	d528      	bpl.n	8004304 <__sflush_r+0xb8>
 80042b2:	2200      	movs	r2, #0
 80042b4:	6062      	str	r2, [r4, #4]
 80042b6:	04d9      	lsls	r1, r3, #19
 80042b8:	6922      	ldr	r2, [r4, #16]
 80042ba:	6022      	str	r2, [r4, #0]
 80042bc:	d504      	bpl.n	80042c8 <__sflush_r+0x7c>
 80042be:	1c42      	adds	r2, r0, #1
 80042c0:	d101      	bne.n	80042c6 <__sflush_r+0x7a>
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	b903      	cbnz	r3, 80042c8 <__sflush_r+0x7c>
 80042c6:	6560      	str	r0, [r4, #84]	; 0x54
 80042c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ca:	602f      	str	r7, [r5, #0]
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d0ca      	beq.n	8004266 <__sflush_r+0x1a>
 80042d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d002      	beq.n	80042de <__sflush_r+0x92>
 80042d8:	4628      	mov	r0, r5
 80042da:	f000 f9d7 	bl	800468c <_free_r>
 80042de:	2000      	movs	r0, #0
 80042e0:	6360      	str	r0, [r4, #52]	; 0x34
 80042e2:	e7c1      	b.n	8004268 <__sflush_r+0x1c>
 80042e4:	6a21      	ldr	r1, [r4, #32]
 80042e6:	2301      	movs	r3, #1
 80042e8:	4628      	mov	r0, r5
 80042ea:	47b0      	blx	r6
 80042ec:	1c41      	adds	r1, r0, #1
 80042ee:	d1c7      	bne.n	8004280 <__sflush_r+0x34>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0c4      	beq.n	8004280 <__sflush_r+0x34>
 80042f6:	2b1d      	cmp	r3, #29
 80042f8:	d001      	beq.n	80042fe <__sflush_r+0xb2>
 80042fa:	2b16      	cmp	r3, #22
 80042fc:	d101      	bne.n	8004302 <__sflush_r+0xb6>
 80042fe:	602f      	str	r7, [r5, #0]
 8004300:	e7b1      	b.n	8004266 <__sflush_r+0x1a>
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	e7ad      	b.n	8004268 <__sflush_r+0x1c>
 800430c:	690f      	ldr	r7, [r1, #16]
 800430e:	2f00      	cmp	r7, #0
 8004310:	d0a9      	beq.n	8004266 <__sflush_r+0x1a>
 8004312:	0793      	lsls	r3, r2, #30
 8004314:	680e      	ldr	r6, [r1, #0]
 8004316:	bf08      	it	eq
 8004318:	694b      	ldreq	r3, [r1, #20]
 800431a:	600f      	str	r7, [r1, #0]
 800431c:	bf18      	it	ne
 800431e:	2300      	movne	r3, #0
 8004320:	eba6 0807 	sub.w	r8, r6, r7
 8004324:	608b      	str	r3, [r1, #8]
 8004326:	f1b8 0f00 	cmp.w	r8, #0
 800432a:	dd9c      	ble.n	8004266 <__sflush_r+0x1a>
 800432c:	6a21      	ldr	r1, [r4, #32]
 800432e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004330:	4643      	mov	r3, r8
 8004332:	463a      	mov	r2, r7
 8004334:	4628      	mov	r0, r5
 8004336:	47b0      	blx	r6
 8004338:	2800      	cmp	r0, #0
 800433a:	dc06      	bgt.n	800434a <__sflush_r+0xfe>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	e78e      	b.n	8004268 <__sflush_r+0x1c>
 800434a:	4407      	add	r7, r0
 800434c:	eba8 0800 	sub.w	r8, r8, r0
 8004350:	e7e9      	b.n	8004326 <__sflush_r+0xda>
 8004352:	bf00      	nop
 8004354:	20400001 	.word	0x20400001

08004358 <_fflush_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	690b      	ldr	r3, [r1, #16]
 800435c:	4605      	mov	r5, r0
 800435e:	460c      	mov	r4, r1
 8004360:	b913      	cbnz	r3, 8004368 <_fflush_r+0x10>
 8004362:	2500      	movs	r5, #0
 8004364:	4628      	mov	r0, r5
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	b118      	cbz	r0, 8004372 <_fflush_r+0x1a>
 800436a:	6983      	ldr	r3, [r0, #24]
 800436c:	b90b      	cbnz	r3, 8004372 <_fflush_r+0x1a>
 800436e:	f000 f887 	bl	8004480 <__sinit>
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <_fflush_r+0x6c>)
 8004374:	429c      	cmp	r4, r3
 8004376:	d11b      	bne.n	80043b0 <_fflush_r+0x58>
 8004378:	686c      	ldr	r4, [r5, #4]
 800437a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ef      	beq.n	8004362 <_fflush_r+0xa>
 8004382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004384:	07d0      	lsls	r0, r2, #31
 8004386:	d404      	bmi.n	8004392 <_fflush_r+0x3a>
 8004388:	0599      	lsls	r1, r3, #22
 800438a:	d402      	bmi.n	8004392 <_fflush_r+0x3a>
 800438c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800438e:	f000 f915 	bl	80045bc <__retarget_lock_acquire_recursive>
 8004392:	4628      	mov	r0, r5
 8004394:	4621      	mov	r1, r4
 8004396:	f7ff ff59 	bl	800424c <__sflush_r>
 800439a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800439c:	07da      	lsls	r2, r3, #31
 800439e:	4605      	mov	r5, r0
 80043a0:	d4e0      	bmi.n	8004364 <_fflush_r+0xc>
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	059b      	lsls	r3, r3, #22
 80043a6:	d4dd      	bmi.n	8004364 <_fflush_r+0xc>
 80043a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043aa:	f000 f908 	bl	80045be <__retarget_lock_release_recursive>
 80043ae:	e7d9      	b.n	8004364 <_fflush_r+0xc>
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <_fflush_r+0x70>)
 80043b2:	429c      	cmp	r4, r3
 80043b4:	d101      	bne.n	80043ba <_fflush_r+0x62>
 80043b6:	68ac      	ldr	r4, [r5, #8]
 80043b8:	e7df      	b.n	800437a <_fflush_r+0x22>
 80043ba:	4b04      	ldr	r3, [pc, #16]	; (80043cc <_fflush_r+0x74>)
 80043bc:	429c      	cmp	r4, r3
 80043be:	bf08      	it	eq
 80043c0:	68ec      	ldreq	r4, [r5, #12]
 80043c2:	e7da      	b.n	800437a <_fflush_r+0x22>
 80043c4:	080053a8 	.word	0x080053a8
 80043c8:	080053c8 	.word	0x080053c8
 80043cc:	08005388 	.word	0x08005388

080043d0 <std>:
 80043d0:	2300      	movs	r3, #0
 80043d2:	b510      	push	{r4, lr}
 80043d4:	4604      	mov	r4, r0
 80043d6:	e9c0 3300 	strd	r3, r3, [r0]
 80043da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043de:	6083      	str	r3, [r0, #8]
 80043e0:	8181      	strh	r1, [r0, #12]
 80043e2:	6643      	str	r3, [r0, #100]	; 0x64
 80043e4:	81c2      	strh	r2, [r0, #14]
 80043e6:	6183      	str	r3, [r0, #24]
 80043e8:	4619      	mov	r1, r3
 80043ea:	2208      	movs	r2, #8
 80043ec:	305c      	adds	r0, #92	; 0x5c
 80043ee:	f7ff fdc1 	bl	8003f74 <memset>
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <std+0x38>)
 80043f4:	6263      	str	r3, [r4, #36]	; 0x24
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <std+0x3c>)
 80043f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <std+0x40>)
 80043fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <std+0x44>)
 8004400:	6224      	str	r4, [r4, #32]
 8004402:	6323      	str	r3, [r4, #48]	; 0x30
 8004404:	bd10      	pop	{r4, pc}
 8004406:	bf00      	nop
 8004408:	08004ed9 	.word	0x08004ed9
 800440c:	08004efb 	.word	0x08004efb
 8004410:	08004f33 	.word	0x08004f33
 8004414:	08004f57 	.word	0x08004f57

08004418 <_cleanup_r>:
 8004418:	4901      	ldr	r1, [pc, #4]	; (8004420 <_cleanup_r+0x8>)
 800441a:	f000 b8af 	b.w	800457c <_fwalk_reent>
 800441e:	bf00      	nop
 8004420:	08004359 	.word	0x08004359

08004424 <__sfmoreglue>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	2268      	movs	r2, #104	; 0x68
 8004428:	1e4d      	subs	r5, r1, #1
 800442a:	4355      	muls	r5, r2
 800442c:	460e      	mov	r6, r1
 800442e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004432:	f000 f997 	bl	8004764 <_malloc_r>
 8004436:	4604      	mov	r4, r0
 8004438:	b140      	cbz	r0, 800444c <__sfmoreglue+0x28>
 800443a:	2100      	movs	r1, #0
 800443c:	e9c0 1600 	strd	r1, r6, [r0]
 8004440:	300c      	adds	r0, #12
 8004442:	60a0      	str	r0, [r4, #8]
 8004444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004448:	f7ff fd94 	bl	8003f74 <memset>
 800444c:	4620      	mov	r0, r4
 800444e:	bd70      	pop	{r4, r5, r6, pc}

08004450 <__sfp_lock_acquire>:
 8004450:	4801      	ldr	r0, [pc, #4]	; (8004458 <__sfp_lock_acquire+0x8>)
 8004452:	f000 b8b3 	b.w	80045bc <__retarget_lock_acquire_recursive>
 8004456:	bf00      	nop
 8004458:	200006c1 	.word	0x200006c1

0800445c <__sfp_lock_release>:
 800445c:	4801      	ldr	r0, [pc, #4]	; (8004464 <__sfp_lock_release+0x8>)
 800445e:	f000 b8ae 	b.w	80045be <__retarget_lock_release_recursive>
 8004462:	bf00      	nop
 8004464:	200006c1 	.word	0x200006c1

08004468 <__sinit_lock_acquire>:
 8004468:	4801      	ldr	r0, [pc, #4]	; (8004470 <__sinit_lock_acquire+0x8>)
 800446a:	f000 b8a7 	b.w	80045bc <__retarget_lock_acquire_recursive>
 800446e:	bf00      	nop
 8004470:	200006c2 	.word	0x200006c2

08004474 <__sinit_lock_release>:
 8004474:	4801      	ldr	r0, [pc, #4]	; (800447c <__sinit_lock_release+0x8>)
 8004476:	f000 b8a2 	b.w	80045be <__retarget_lock_release_recursive>
 800447a:	bf00      	nop
 800447c:	200006c2 	.word	0x200006c2

08004480 <__sinit>:
 8004480:	b510      	push	{r4, lr}
 8004482:	4604      	mov	r4, r0
 8004484:	f7ff fff0 	bl	8004468 <__sinit_lock_acquire>
 8004488:	69a3      	ldr	r3, [r4, #24]
 800448a:	b11b      	cbz	r3, 8004494 <__sinit+0x14>
 800448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004490:	f7ff bff0 	b.w	8004474 <__sinit_lock_release>
 8004494:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004498:	6523      	str	r3, [r4, #80]	; 0x50
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <__sinit+0x68>)
 800449c:	4a13      	ldr	r2, [pc, #76]	; (80044ec <__sinit+0x6c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80044a2:	42a3      	cmp	r3, r4
 80044a4:	bf04      	itt	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	61a3      	streq	r3, [r4, #24]
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 f820 	bl	80044f0 <__sfp>
 80044b0:	6060      	str	r0, [r4, #4]
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 f81c 	bl	80044f0 <__sfp>
 80044b8:	60a0      	str	r0, [r4, #8]
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f818 	bl	80044f0 <__sfp>
 80044c0:	2200      	movs	r2, #0
 80044c2:	60e0      	str	r0, [r4, #12]
 80044c4:	2104      	movs	r1, #4
 80044c6:	6860      	ldr	r0, [r4, #4]
 80044c8:	f7ff ff82 	bl	80043d0 <std>
 80044cc:	68a0      	ldr	r0, [r4, #8]
 80044ce:	2201      	movs	r2, #1
 80044d0:	2109      	movs	r1, #9
 80044d2:	f7ff ff7d 	bl	80043d0 <std>
 80044d6:	68e0      	ldr	r0, [r4, #12]
 80044d8:	2202      	movs	r2, #2
 80044da:	2112      	movs	r1, #18
 80044dc:	f7ff ff78 	bl	80043d0 <std>
 80044e0:	2301      	movs	r3, #1
 80044e2:	61a3      	str	r3, [r4, #24]
 80044e4:	e7d2      	b.n	800448c <__sinit+0xc>
 80044e6:	bf00      	nop
 80044e8:	08005384 	.word	0x08005384
 80044ec:	08004419 	.word	0x08004419

080044f0 <__sfp>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	4607      	mov	r7, r0
 80044f4:	f7ff ffac 	bl	8004450 <__sfp_lock_acquire>
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <__sfp+0x84>)
 80044fa:	681e      	ldr	r6, [r3, #0]
 80044fc:	69b3      	ldr	r3, [r6, #24]
 80044fe:	b913      	cbnz	r3, 8004506 <__sfp+0x16>
 8004500:	4630      	mov	r0, r6
 8004502:	f7ff ffbd 	bl	8004480 <__sinit>
 8004506:	3648      	adds	r6, #72	; 0x48
 8004508:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800450c:	3b01      	subs	r3, #1
 800450e:	d503      	bpl.n	8004518 <__sfp+0x28>
 8004510:	6833      	ldr	r3, [r6, #0]
 8004512:	b30b      	cbz	r3, 8004558 <__sfp+0x68>
 8004514:	6836      	ldr	r6, [r6, #0]
 8004516:	e7f7      	b.n	8004508 <__sfp+0x18>
 8004518:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800451c:	b9d5      	cbnz	r5, 8004554 <__sfp+0x64>
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <__sfp+0x88>)
 8004520:	60e3      	str	r3, [r4, #12]
 8004522:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004526:	6665      	str	r5, [r4, #100]	; 0x64
 8004528:	f000 f847 	bl	80045ba <__retarget_lock_init_recursive>
 800452c:	f7ff ff96 	bl	800445c <__sfp_lock_release>
 8004530:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004534:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004538:	6025      	str	r5, [r4, #0]
 800453a:	61a5      	str	r5, [r4, #24]
 800453c:	2208      	movs	r2, #8
 800453e:	4629      	mov	r1, r5
 8004540:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004544:	f7ff fd16 	bl	8003f74 <memset>
 8004548:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800454c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004550:	4620      	mov	r0, r4
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004554:	3468      	adds	r4, #104	; 0x68
 8004556:	e7d9      	b.n	800450c <__sfp+0x1c>
 8004558:	2104      	movs	r1, #4
 800455a:	4638      	mov	r0, r7
 800455c:	f7ff ff62 	bl	8004424 <__sfmoreglue>
 8004560:	4604      	mov	r4, r0
 8004562:	6030      	str	r0, [r6, #0]
 8004564:	2800      	cmp	r0, #0
 8004566:	d1d5      	bne.n	8004514 <__sfp+0x24>
 8004568:	f7ff ff78 	bl	800445c <__sfp_lock_release>
 800456c:	230c      	movs	r3, #12
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	e7ee      	b.n	8004550 <__sfp+0x60>
 8004572:	bf00      	nop
 8004574:	08005384 	.word	0x08005384
 8004578:	ffff0001 	.word	0xffff0001

0800457c <_fwalk_reent>:
 800457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004580:	4606      	mov	r6, r0
 8004582:	4688      	mov	r8, r1
 8004584:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004588:	2700      	movs	r7, #0
 800458a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800458e:	f1b9 0901 	subs.w	r9, r9, #1
 8004592:	d505      	bpl.n	80045a0 <_fwalk_reent+0x24>
 8004594:	6824      	ldr	r4, [r4, #0]
 8004596:	2c00      	cmp	r4, #0
 8004598:	d1f7      	bne.n	800458a <_fwalk_reent+0xe>
 800459a:	4638      	mov	r0, r7
 800459c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a0:	89ab      	ldrh	r3, [r5, #12]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d907      	bls.n	80045b6 <_fwalk_reent+0x3a>
 80045a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045aa:	3301      	adds	r3, #1
 80045ac:	d003      	beq.n	80045b6 <_fwalk_reent+0x3a>
 80045ae:	4629      	mov	r1, r5
 80045b0:	4630      	mov	r0, r6
 80045b2:	47c0      	blx	r8
 80045b4:	4307      	orrs	r7, r0
 80045b6:	3568      	adds	r5, #104	; 0x68
 80045b8:	e7e9      	b.n	800458e <_fwalk_reent+0x12>

080045ba <__retarget_lock_init_recursive>:
 80045ba:	4770      	bx	lr

080045bc <__retarget_lock_acquire_recursive>:
 80045bc:	4770      	bx	lr

080045be <__retarget_lock_release_recursive>:
 80045be:	4770      	bx	lr

080045c0 <__swhatbuf_r>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	460e      	mov	r6, r1
 80045c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c8:	2900      	cmp	r1, #0
 80045ca:	b096      	sub	sp, #88	; 0x58
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	da08      	bge.n	80045e4 <__swhatbuf_r+0x24>
 80045d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	602a      	str	r2, [r5, #0]
 80045da:	061a      	lsls	r2, r3, #24
 80045dc:	d410      	bmi.n	8004600 <__swhatbuf_r+0x40>
 80045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e2:	e00e      	b.n	8004602 <__swhatbuf_r+0x42>
 80045e4:	466a      	mov	r2, sp
 80045e6:	f000 fcdd 	bl	8004fa4 <_fstat_r>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	dbf1      	blt.n	80045d2 <__swhatbuf_r+0x12>
 80045ee:	9a01      	ldr	r2, [sp, #4]
 80045f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045f8:	425a      	negs	r2, r3
 80045fa:	415a      	adcs	r2, r3
 80045fc:	602a      	str	r2, [r5, #0]
 80045fe:	e7ee      	b.n	80045de <__swhatbuf_r+0x1e>
 8004600:	2340      	movs	r3, #64	; 0x40
 8004602:	2000      	movs	r0, #0
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	b016      	add	sp, #88	; 0x58
 8004608:	bd70      	pop	{r4, r5, r6, pc}
	...

0800460c <__smakebuf_r>:
 800460c:	898b      	ldrh	r3, [r1, #12]
 800460e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004610:	079d      	lsls	r5, r3, #30
 8004612:	4606      	mov	r6, r0
 8004614:	460c      	mov	r4, r1
 8004616:	d507      	bpl.n	8004628 <__smakebuf_r+0x1c>
 8004618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	2301      	movs	r3, #1
 8004622:	6163      	str	r3, [r4, #20]
 8004624:	b002      	add	sp, #8
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	ab01      	add	r3, sp, #4
 800462a:	466a      	mov	r2, sp
 800462c:	f7ff ffc8 	bl	80045c0 <__swhatbuf_r>
 8004630:	9900      	ldr	r1, [sp, #0]
 8004632:	4605      	mov	r5, r0
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f895 	bl	8004764 <_malloc_r>
 800463a:	b948      	cbnz	r0, 8004650 <__smakebuf_r+0x44>
 800463c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004640:	059a      	lsls	r2, r3, #22
 8004642:	d4ef      	bmi.n	8004624 <__smakebuf_r+0x18>
 8004644:	f023 0303 	bic.w	r3, r3, #3
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	e7e3      	b.n	8004618 <__smakebuf_r+0xc>
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <__smakebuf_r+0x7c>)
 8004652:	62b3      	str	r3, [r6, #40]	; 0x28
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	6020      	str	r0, [r4, #0]
 8004658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	9b00      	ldr	r3, [sp, #0]
 8004660:	6163      	str	r3, [r4, #20]
 8004662:	9b01      	ldr	r3, [sp, #4]
 8004664:	6120      	str	r0, [r4, #16]
 8004666:	b15b      	cbz	r3, 8004680 <__smakebuf_r+0x74>
 8004668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800466c:	4630      	mov	r0, r6
 800466e:	f000 fcab 	bl	8004fc8 <_isatty_r>
 8004672:	b128      	cbz	r0, 8004680 <__smakebuf_r+0x74>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	89a0      	ldrh	r0, [r4, #12]
 8004682:	4305      	orrs	r5, r0
 8004684:	81a5      	strh	r5, [r4, #12]
 8004686:	e7cd      	b.n	8004624 <__smakebuf_r+0x18>
 8004688:	08004419 	.word	0x08004419

0800468c <_free_r>:
 800468c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800468e:	2900      	cmp	r1, #0
 8004690:	d044      	beq.n	800471c <_free_r+0x90>
 8004692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004696:	9001      	str	r0, [sp, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f1a1 0404 	sub.w	r4, r1, #4
 800469e:	bfb8      	it	lt
 80046a0:	18e4      	addlt	r4, r4, r3
 80046a2:	f000 fcb3 	bl	800500c <__malloc_lock>
 80046a6:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <_free_r+0x94>)
 80046a8:	9801      	ldr	r0, [sp, #4]
 80046aa:	6813      	ldr	r3, [r2, #0]
 80046ac:	b933      	cbnz	r3, 80046bc <_free_r+0x30>
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	6014      	str	r4, [r2, #0]
 80046b2:	b003      	add	sp, #12
 80046b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046b8:	f000 bcae 	b.w	8005018 <__malloc_unlock>
 80046bc:	42a3      	cmp	r3, r4
 80046be:	d908      	bls.n	80046d2 <_free_r+0x46>
 80046c0:	6825      	ldr	r5, [r4, #0]
 80046c2:	1961      	adds	r1, r4, r5
 80046c4:	428b      	cmp	r3, r1
 80046c6:	bf01      	itttt	eq
 80046c8:	6819      	ldreq	r1, [r3, #0]
 80046ca:	685b      	ldreq	r3, [r3, #4]
 80046cc:	1949      	addeq	r1, r1, r5
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	e7ed      	b.n	80046ae <_free_r+0x22>
 80046d2:	461a      	mov	r2, r3
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b10b      	cbz	r3, 80046dc <_free_r+0x50>
 80046d8:	42a3      	cmp	r3, r4
 80046da:	d9fa      	bls.n	80046d2 <_free_r+0x46>
 80046dc:	6811      	ldr	r1, [r2, #0]
 80046de:	1855      	adds	r5, r2, r1
 80046e0:	42a5      	cmp	r5, r4
 80046e2:	d10b      	bne.n	80046fc <_free_r+0x70>
 80046e4:	6824      	ldr	r4, [r4, #0]
 80046e6:	4421      	add	r1, r4
 80046e8:	1854      	adds	r4, r2, r1
 80046ea:	42a3      	cmp	r3, r4
 80046ec:	6011      	str	r1, [r2, #0]
 80046ee:	d1e0      	bne.n	80046b2 <_free_r+0x26>
 80046f0:	681c      	ldr	r4, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	6053      	str	r3, [r2, #4]
 80046f6:	4421      	add	r1, r4
 80046f8:	6011      	str	r1, [r2, #0]
 80046fa:	e7da      	b.n	80046b2 <_free_r+0x26>
 80046fc:	d902      	bls.n	8004704 <_free_r+0x78>
 80046fe:	230c      	movs	r3, #12
 8004700:	6003      	str	r3, [r0, #0]
 8004702:	e7d6      	b.n	80046b2 <_free_r+0x26>
 8004704:	6825      	ldr	r5, [r4, #0]
 8004706:	1961      	adds	r1, r4, r5
 8004708:	428b      	cmp	r3, r1
 800470a:	bf04      	itt	eq
 800470c:	6819      	ldreq	r1, [r3, #0]
 800470e:	685b      	ldreq	r3, [r3, #4]
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	bf04      	itt	eq
 8004714:	1949      	addeq	r1, r1, r5
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	6054      	str	r4, [r2, #4]
 800471a:	e7ca      	b.n	80046b2 <_free_r+0x26>
 800471c:	b003      	add	sp, #12
 800471e:	bd30      	pop	{r4, r5, pc}
 8004720:	200006c4 	.word	0x200006c4

08004724 <sbrk_aligned>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4e0e      	ldr	r6, [pc, #56]	; (8004760 <sbrk_aligned+0x3c>)
 8004728:	460c      	mov	r4, r1
 800472a:	6831      	ldr	r1, [r6, #0]
 800472c:	4605      	mov	r5, r0
 800472e:	b911      	cbnz	r1, 8004736 <sbrk_aligned+0x12>
 8004730:	f000 fbc2 	bl	8004eb8 <_sbrk_r>
 8004734:	6030      	str	r0, [r6, #0]
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	f000 fbbd 	bl	8004eb8 <_sbrk_r>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d00a      	beq.n	8004758 <sbrk_aligned+0x34>
 8004742:	1cc4      	adds	r4, r0, #3
 8004744:	f024 0403 	bic.w	r4, r4, #3
 8004748:	42a0      	cmp	r0, r4
 800474a:	d007      	beq.n	800475c <sbrk_aligned+0x38>
 800474c:	1a21      	subs	r1, r4, r0
 800474e:	4628      	mov	r0, r5
 8004750:	f000 fbb2 	bl	8004eb8 <_sbrk_r>
 8004754:	3001      	adds	r0, #1
 8004756:	d101      	bne.n	800475c <sbrk_aligned+0x38>
 8004758:	f04f 34ff 	mov.w	r4, #4294967295
 800475c:	4620      	mov	r0, r4
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	200006c8 	.word	0x200006c8

08004764 <_malloc_r>:
 8004764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	1ccd      	adds	r5, r1, #3
 800476a:	f025 0503 	bic.w	r5, r5, #3
 800476e:	3508      	adds	r5, #8
 8004770:	2d0c      	cmp	r5, #12
 8004772:	bf38      	it	cc
 8004774:	250c      	movcc	r5, #12
 8004776:	2d00      	cmp	r5, #0
 8004778:	4607      	mov	r7, r0
 800477a:	db01      	blt.n	8004780 <_malloc_r+0x1c>
 800477c:	42a9      	cmp	r1, r5
 800477e:	d905      	bls.n	800478c <_malloc_r+0x28>
 8004780:	230c      	movs	r3, #12
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	2600      	movs	r6, #0
 8004786:	4630      	mov	r0, r6
 8004788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478c:	4e2e      	ldr	r6, [pc, #184]	; (8004848 <_malloc_r+0xe4>)
 800478e:	f000 fc3d 	bl	800500c <__malloc_lock>
 8004792:	6833      	ldr	r3, [r6, #0]
 8004794:	461c      	mov	r4, r3
 8004796:	bb34      	cbnz	r4, 80047e6 <_malloc_r+0x82>
 8004798:	4629      	mov	r1, r5
 800479a:	4638      	mov	r0, r7
 800479c:	f7ff ffc2 	bl	8004724 <sbrk_aligned>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	4604      	mov	r4, r0
 80047a4:	d14d      	bne.n	8004842 <_malloc_r+0xde>
 80047a6:	6834      	ldr	r4, [r6, #0]
 80047a8:	4626      	mov	r6, r4
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	d140      	bne.n	8004830 <_malloc_r+0xcc>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	4631      	mov	r1, r6
 80047b2:	4638      	mov	r0, r7
 80047b4:	eb04 0803 	add.w	r8, r4, r3
 80047b8:	f000 fb7e 	bl	8004eb8 <_sbrk_r>
 80047bc:	4580      	cmp	r8, r0
 80047be:	d13a      	bne.n	8004836 <_malloc_r+0xd2>
 80047c0:	6821      	ldr	r1, [r4, #0]
 80047c2:	3503      	adds	r5, #3
 80047c4:	1a6d      	subs	r5, r5, r1
 80047c6:	f025 0503 	bic.w	r5, r5, #3
 80047ca:	3508      	adds	r5, #8
 80047cc:	2d0c      	cmp	r5, #12
 80047ce:	bf38      	it	cc
 80047d0:	250c      	movcc	r5, #12
 80047d2:	4629      	mov	r1, r5
 80047d4:	4638      	mov	r0, r7
 80047d6:	f7ff ffa5 	bl	8004724 <sbrk_aligned>
 80047da:	3001      	adds	r0, #1
 80047dc:	d02b      	beq.n	8004836 <_malloc_r+0xd2>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	442b      	add	r3, r5
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	e00e      	b.n	8004804 <_malloc_r+0xa0>
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	1b52      	subs	r2, r2, r5
 80047ea:	d41e      	bmi.n	800482a <_malloc_r+0xc6>
 80047ec:	2a0b      	cmp	r2, #11
 80047ee:	d916      	bls.n	800481e <_malloc_r+0xba>
 80047f0:	1961      	adds	r1, r4, r5
 80047f2:	42a3      	cmp	r3, r4
 80047f4:	6025      	str	r5, [r4, #0]
 80047f6:	bf18      	it	ne
 80047f8:	6059      	strne	r1, [r3, #4]
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	bf08      	it	eq
 80047fe:	6031      	streq	r1, [r6, #0]
 8004800:	5162      	str	r2, [r4, r5]
 8004802:	604b      	str	r3, [r1, #4]
 8004804:	4638      	mov	r0, r7
 8004806:	f104 060b 	add.w	r6, r4, #11
 800480a:	f000 fc05 	bl	8005018 <__malloc_unlock>
 800480e:	f026 0607 	bic.w	r6, r6, #7
 8004812:	1d23      	adds	r3, r4, #4
 8004814:	1af2      	subs	r2, r6, r3
 8004816:	d0b6      	beq.n	8004786 <_malloc_r+0x22>
 8004818:	1b9b      	subs	r3, r3, r6
 800481a:	50a3      	str	r3, [r4, r2]
 800481c:	e7b3      	b.n	8004786 <_malloc_r+0x22>
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	42a3      	cmp	r3, r4
 8004822:	bf0c      	ite	eq
 8004824:	6032      	streq	r2, [r6, #0]
 8004826:	605a      	strne	r2, [r3, #4]
 8004828:	e7ec      	b.n	8004804 <_malloc_r+0xa0>
 800482a:	4623      	mov	r3, r4
 800482c:	6864      	ldr	r4, [r4, #4]
 800482e:	e7b2      	b.n	8004796 <_malloc_r+0x32>
 8004830:	4634      	mov	r4, r6
 8004832:	6876      	ldr	r6, [r6, #4]
 8004834:	e7b9      	b.n	80047aa <_malloc_r+0x46>
 8004836:	230c      	movs	r3, #12
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4638      	mov	r0, r7
 800483c:	f000 fbec 	bl	8005018 <__malloc_unlock>
 8004840:	e7a1      	b.n	8004786 <_malloc_r+0x22>
 8004842:	6025      	str	r5, [r4, #0]
 8004844:	e7de      	b.n	8004804 <_malloc_r+0xa0>
 8004846:	bf00      	nop
 8004848:	200006c4 	.word	0x200006c4

0800484c <__sfputc_r>:
 800484c:	6893      	ldr	r3, [r2, #8]
 800484e:	3b01      	subs	r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	b410      	push	{r4}
 8004854:	6093      	str	r3, [r2, #8]
 8004856:	da08      	bge.n	800486a <__sfputc_r+0x1e>
 8004858:	6994      	ldr	r4, [r2, #24]
 800485a:	42a3      	cmp	r3, r4
 800485c:	db01      	blt.n	8004862 <__sfputc_r+0x16>
 800485e:	290a      	cmp	r1, #10
 8004860:	d103      	bne.n	800486a <__sfputc_r+0x1e>
 8004862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004866:	f7ff bc31 	b.w	80040cc <__swbuf_r>
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	1c58      	adds	r0, r3, #1
 800486e:	6010      	str	r0, [r2, #0]
 8004870:	7019      	strb	r1, [r3, #0]
 8004872:	4608      	mov	r0, r1
 8004874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004878:	4770      	bx	lr

0800487a <__sfputs_r>:
 800487a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487c:	4606      	mov	r6, r0
 800487e:	460f      	mov	r7, r1
 8004880:	4614      	mov	r4, r2
 8004882:	18d5      	adds	r5, r2, r3
 8004884:	42ac      	cmp	r4, r5
 8004886:	d101      	bne.n	800488c <__sfputs_r+0x12>
 8004888:	2000      	movs	r0, #0
 800488a:	e007      	b.n	800489c <__sfputs_r+0x22>
 800488c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004890:	463a      	mov	r2, r7
 8004892:	4630      	mov	r0, r6
 8004894:	f7ff ffda 	bl	800484c <__sfputc_r>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d1f3      	bne.n	8004884 <__sfputs_r+0xa>
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048a0 <_vfiprintf_r>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	460d      	mov	r5, r1
 80048a6:	b09d      	sub	sp, #116	; 0x74
 80048a8:	4614      	mov	r4, r2
 80048aa:	4698      	mov	r8, r3
 80048ac:	4606      	mov	r6, r0
 80048ae:	b118      	cbz	r0, 80048b8 <_vfiprintf_r+0x18>
 80048b0:	6983      	ldr	r3, [r0, #24]
 80048b2:	b90b      	cbnz	r3, 80048b8 <_vfiprintf_r+0x18>
 80048b4:	f7ff fde4 	bl	8004480 <__sinit>
 80048b8:	4b89      	ldr	r3, [pc, #548]	; (8004ae0 <_vfiprintf_r+0x240>)
 80048ba:	429d      	cmp	r5, r3
 80048bc:	d11b      	bne.n	80048f6 <_vfiprintf_r+0x56>
 80048be:	6875      	ldr	r5, [r6, #4]
 80048c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048c2:	07d9      	lsls	r1, r3, #31
 80048c4:	d405      	bmi.n	80048d2 <_vfiprintf_r+0x32>
 80048c6:	89ab      	ldrh	r3, [r5, #12]
 80048c8:	059a      	lsls	r2, r3, #22
 80048ca:	d402      	bmi.n	80048d2 <_vfiprintf_r+0x32>
 80048cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048ce:	f7ff fe75 	bl	80045bc <__retarget_lock_acquire_recursive>
 80048d2:	89ab      	ldrh	r3, [r5, #12]
 80048d4:	071b      	lsls	r3, r3, #28
 80048d6:	d501      	bpl.n	80048dc <_vfiprintf_r+0x3c>
 80048d8:	692b      	ldr	r3, [r5, #16]
 80048da:	b9eb      	cbnz	r3, 8004918 <_vfiprintf_r+0x78>
 80048dc:	4629      	mov	r1, r5
 80048de:	4630      	mov	r0, r6
 80048e0:	f7ff fc46 	bl	8004170 <__swsetup_r>
 80048e4:	b1c0      	cbz	r0, 8004918 <_vfiprintf_r+0x78>
 80048e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048e8:	07dc      	lsls	r4, r3, #31
 80048ea:	d50e      	bpl.n	800490a <_vfiprintf_r+0x6a>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	b01d      	add	sp, #116	; 0x74
 80048f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f6:	4b7b      	ldr	r3, [pc, #492]	; (8004ae4 <_vfiprintf_r+0x244>)
 80048f8:	429d      	cmp	r5, r3
 80048fa:	d101      	bne.n	8004900 <_vfiprintf_r+0x60>
 80048fc:	68b5      	ldr	r5, [r6, #8]
 80048fe:	e7df      	b.n	80048c0 <_vfiprintf_r+0x20>
 8004900:	4b79      	ldr	r3, [pc, #484]	; (8004ae8 <_vfiprintf_r+0x248>)
 8004902:	429d      	cmp	r5, r3
 8004904:	bf08      	it	eq
 8004906:	68f5      	ldreq	r5, [r6, #12]
 8004908:	e7da      	b.n	80048c0 <_vfiprintf_r+0x20>
 800490a:	89ab      	ldrh	r3, [r5, #12]
 800490c:	0598      	lsls	r0, r3, #22
 800490e:	d4ed      	bmi.n	80048ec <_vfiprintf_r+0x4c>
 8004910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004912:	f7ff fe54 	bl	80045be <__retarget_lock_release_recursive>
 8004916:	e7e9      	b.n	80048ec <_vfiprintf_r+0x4c>
 8004918:	2300      	movs	r3, #0
 800491a:	9309      	str	r3, [sp, #36]	; 0x24
 800491c:	2320      	movs	r3, #32
 800491e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004922:	f8cd 800c 	str.w	r8, [sp, #12]
 8004926:	2330      	movs	r3, #48	; 0x30
 8004928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004aec <_vfiprintf_r+0x24c>
 800492c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004930:	f04f 0901 	mov.w	r9, #1
 8004934:	4623      	mov	r3, r4
 8004936:	469a      	mov	sl, r3
 8004938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800493c:	b10a      	cbz	r2, 8004942 <_vfiprintf_r+0xa2>
 800493e:	2a25      	cmp	r2, #37	; 0x25
 8004940:	d1f9      	bne.n	8004936 <_vfiprintf_r+0x96>
 8004942:	ebba 0b04 	subs.w	fp, sl, r4
 8004946:	d00b      	beq.n	8004960 <_vfiprintf_r+0xc0>
 8004948:	465b      	mov	r3, fp
 800494a:	4622      	mov	r2, r4
 800494c:	4629      	mov	r1, r5
 800494e:	4630      	mov	r0, r6
 8004950:	f7ff ff93 	bl	800487a <__sfputs_r>
 8004954:	3001      	adds	r0, #1
 8004956:	f000 80aa 	beq.w	8004aae <_vfiprintf_r+0x20e>
 800495a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800495c:	445a      	add	r2, fp
 800495e:	9209      	str	r2, [sp, #36]	; 0x24
 8004960:	f89a 3000 	ldrb.w	r3, [sl]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80a2 	beq.w	8004aae <_vfiprintf_r+0x20e>
 800496a:	2300      	movs	r3, #0
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004974:	f10a 0a01 	add.w	sl, sl, #1
 8004978:	9304      	str	r3, [sp, #16]
 800497a:	9307      	str	r3, [sp, #28]
 800497c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004980:	931a      	str	r3, [sp, #104]	; 0x68
 8004982:	4654      	mov	r4, sl
 8004984:	2205      	movs	r2, #5
 8004986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498a:	4858      	ldr	r0, [pc, #352]	; (8004aec <_vfiprintf_r+0x24c>)
 800498c:	f7fb fc30 	bl	80001f0 <memchr>
 8004990:	9a04      	ldr	r2, [sp, #16]
 8004992:	b9d8      	cbnz	r0, 80049cc <_vfiprintf_r+0x12c>
 8004994:	06d1      	lsls	r1, r2, #27
 8004996:	bf44      	itt	mi
 8004998:	2320      	movmi	r3, #32
 800499a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800499e:	0713      	lsls	r3, r2, #28
 80049a0:	bf44      	itt	mi
 80049a2:	232b      	movmi	r3, #43	; 0x2b
 80049a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049a8:	f89a 3000 	ldrb.w	r3, [sl]
 80049ac:	2b2a      	cmp	r3, #42	; 0x2a
 80049ae:	d015      	beq.n	80049dc <_vfiprintf_r+0x13c>
 80049b0:	9a07      	ldr	r2, [sp, #28]
 80049b2:	4654      	mov	r4, sl
 80049b4:	2000      	movs	r0, #0
 80049b6:	f04f 0c0a 	mov.w	ip, #10
 80049ba:	4621      	mov	r1, r4
 80049bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c0:	3b30      	subs	r3, #48	; 0x30
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	d94e      	bls.n	8004a64 <_vfiprintf_r+0x1c4>
 80049c6:	b1b0      	cbz	r0, 80049f6 <_vfiprintf_r+0x156>
 80049c8:	9207      	str	r2, [sp, #28]
 80049ca:	e014      	b.n	80049f6 <_vfiprintf_r+0x156>
 80049cc:	eba0 0308 	sub.w	r3, r0, r8
 80049d0:	fa09 f303 	lsl.w	r3, r9, r3
 80049d4:	4313      	orrs	r3, r2
 80049d6:	9304      	str	r3, [sp, #16]
 80049d8:	46a2      	mov	sl, r4
 80049da:	e7d2      	b.n	8004982 <_vfiprintf_r+0xe2>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	1d19      	adds	r1, r3, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	9103      	str	r1, [sp, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bfbb      	ittet	lt
 80049e8:	425b      	neglt	r3, r3
 80049ea:	f042 0202 	orrlt.w	r2, r2, #2
 80049ee:	9307      	strge	r3, [sp, #28]
 80049f0:	9307      	strlt	r3, [sp, #28]
 80049f2:	bfb8      	it	lt
 80049f4:	9204      	strlt	r2, [sp, #16]
 80049f6:	7823      	ldrb	r3, [r4, #0]
 80049f8:	2b2e      	cmp	r3, #46	; 0x2e
 80049fa:	d10c      	bne.n	8004a16 <_vfiprintf_r+0x176>
 80049fc:	7863      	ldrb	r3, [r4, #1]
 80049fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004a00:	d135      	bne.n	8004a6e <_vfiprintf_r+0x1ce>
 8004a02:	9b03      	ldr	r3, [sp, #12]
 8004a04:	1d1a      	adds	r2, r3, #4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	9203      	str	r2, [sp, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bfb8      	it	lt
 8004a0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a12:	3402      	adds	r4, #2
 8004a14:	9305      	str	r3, [sp, #20]
 8004a16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004afc <_vfiprintf_r+0x25c>
 8004a1a:	7821      	ldrb	r1, [r4, #0]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	4650      	mov	r0, sl
 8004a20:	f7fb fbe6 	bl	80001f0 <memchr>
 8004a24:	b140      	cbz	r0, 8004a38 <_vfiprintf_r+0x198>
 8004a26:	2340      	movs	r3, #64	; 0x40
 8004a28:	eba0 000a 	sub.w	r0, r0, sl
 8004a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8004a30:	9b04      	ldr	r3, [sp, #16]
 8004a32:	4303      	orrs	r3, r0
 8004a34:	3401      	adds	r4, #1
 8004a36:	9304      	str	r3, [sp, #16]
 8004a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3c:	482c      	ldr	r0, [pc, #176]	; (8004af0 <_vfiprintf_r+0x250>)
 8004a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a42:	2206      	movs	r2, #6
 8004a44:	f7fb fbd4 	bl	80001f0 <memchr>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d03f      	beq.n	8004acc <_vfiprintf_r+0x22c>
 8004a4c:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <_vfiprintf_r+0x254>)
 8004a4e:	bb1b      	cbnz	r3, 8004a98 <_vfiprintf_r+0x1f8>
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	3307      	adds	r3, #7
 8004a54:	f023 0307 	bic.w	r3, r3, #7
 8004a58:	3308      	adds	r3, #8
 8004a5a:	9303      	str	r3, [sp, #12]
 8004a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5e:	443b      	add	r3, r7
 8004a60:	9309      	str	r3, [sp, #36]	; 0x24
 8004a62:	e767      	b.n	8004934 <_vfiprintf_r+0x94>
 8004a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a68:	460c      	mov	r4, r1
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	e7a5      	b.n	80049ba <_vfiprintf_r+0x11a>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	3401      	adds	r4, #1
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f04f 0c0a 	mov.w	ip, #10
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a80:	3a30      	subs	r2, #48	; 0x30
 8004a82:	2a09      	cmp	r2, #9
 8004a84:	d903      	bls.n	8004a8e <_vfiprintf_r+0x1ee>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0c5      	beq.n	8004a16 <_vfiprintf_r+0x176>
 8004a8a:	9105      	str	r1, [sp, #20]
 8004a8c:	e7c3      	b.n	8004a16 <_vfiprintf_r+0x176>
 8004a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a92:	4604      	mov	r4, r0
 8004a94:	2301      	movs	r3, #1
 8004a96:	e7f0      	b.n	8004a7a <_vfiprintf_r+0x1da>
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <_vfiprintf_r+0x258>)
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f3af 8000 	nop.w
 8004aa8:	4607      	mov	r7, r0
 8004aaa:	1c78      	adds	r0, r7, #1
 8004aac:	d1d6      	bne.n	8004a5c <_vfiprintf_r+0x1bc>
 8004aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ab0:	07d9      	lsls	r1, r3, #31
 8004ab2:	d405      	bmi.n	8004ac0 <_vfiprintf_r+0x220>
 8004ab4:	89ab      	ldrh	r3, [r5, #12]
 8004ab6:	059a      	lsls	r2, r3, #22
 8004ab8:	d402      	bmi.n	8004ac0 <_vfiprintf_r+0x220>
 8004aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004abc:	f7ff fd7f 	bl	80045be <__retarget_lock_release_recursive>
 8004ac0:	89ab      	ldrh	r3, [r5, #12]
 8004ac2:	065b      	lsls	r3, r3, #25
 8004ac4:	f53f af12 	bmi.w	80048ec <_vfiprintf_r+0x4c>
 8004ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aca:	e711      	b.n	80048f0 <_vfiprintf_r+0x50>
 8004acc:	ab03      	add	r3, sp, #12
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	462a      	mov	r2, r5
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <_vfiprintf_r+0x258>)
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f000 f880 	bl	8004bdc <_printf_i>
 8004adc:	e7e4      	b.n	8004aa8 <_vfiprintf_r+0x208>
 8004ade:	bf00      	nop
 8004ae0:	080053a8 	.word	0x080053a8
 8004ae4:	080053c8 	.word	0x080053c8
 8004ae8:	08005388 	.word	0x08005388
 8004aec:	080053e8 	.word	0x080053e8
 8004af0:	080053f2 	.word	0x080053f2
 8004af4:	00000000 	.word	0x00000000
 8004af8:	0800487b 	.word	0x0800487b
 8004afc:	080053ee 	.word	0x080053ee

08004b00 <_printf_common>:
 8004b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b04:	4616      	mov	r6, r2
 8004b06:	4699      	mov	r9, r3
 8004b08:	688a      	ldr	r2, [r1, #8]
 8004b0a:	690b      	ldr	r3, [r1, #16]
 8004b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b10:	4293      	cmp	r3, r2
 8004b12:	bfb8      	it	lt
 8004b14:	4613      	movlt	r3, r2
 8004b16:	6033      	str	r3, [r6, #0]
 8004b18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	b10a      	cbz	r2, 8004b26 <_printf_common+0x26>
 8004b22:	3301      	adds	r3, #1
 8004b24:	6033      	str	r3, [r6, #0]
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	0699      	lsls	r1, r3, #26
 8004b2a:	bf42      	ittt	mi
 8004b2c:	6833      	ldrmi	r3, [r6, #0]
 8004b2e:	3302      	addmi	r3, #2
 8004b30:	6033      	strmi	r3, [r6, #0]
 8004b32:	6825      	ldr	r5, [r4, #0]
 8004b34:	f015 0506 	ands.w	r5, r5, #6
 8004b38:	d106      	bne.n	8004b48 <_printf_common+0x48>
 8004b3a:	f104 0a19 	add.w	sl, r4, #25
 8004b3e:	68e3      	ldr	r3, [r4, #12]
 8004b40:	6832      	ldr	r2, [r6, #0]
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	42ab      	cmp	r3, r5
 8004b46:	dc26      	bgt.n	8004b96 <_printf_common+0x96>
 8004b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b4c:	1e13      	subs	r3, r2, #0
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	bf18      	it	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	0692      	lsls	r2, r2, #26
 8004b56:	d42b      	bmi.n	8004bb0 <_printf_common+0xb0>
 8004b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c0      	blx	r8
 8004b62:	3001      	adds	r0, #1
 8004b64:	d01e      	beq.n	8004ba4 <_printf_common+0xa4>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	68e5      	ldr	r5, [r4, #12]
 8004b6a:	6832      	ldr	r2, [r6, #0]
 8004b6c:	f003 0306 	and.w	r3, r3, #6
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	bf08      	it	eq
 8004b74:	1aad      	subeq	r5, r5, r2
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	6922      	ldr	r2, [r4, #16]
 8004b7a:	bf0c      	ite	eq
 8004b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b80:	2500      	movne	r5, #0
 8004b82:	4293      	cmp	r3, r2
 8004b84:	bfc4      	itt	gt
 8004b86:	1a9b      	subgt	r3, r3, r2
 8004b88:	18ed      	addgt	r5, r5, r3
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	341a      	adds	r4, #26
 8004b8e:	42b5      	cmp	r5, r6
 8004b90:	d11a      	bne.n	8004bc8 <_printf_common+0xc8>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e008      	b.n	8004ba8 <_printf_common+0xa8>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4652      	mov	r2, sl
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	47c0      	blx	r8
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d103      	bne.n	8004bac <_printf_common+0xac>
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bac:	3501      	adds	r5, #1
 8004bae:	e7c6      	b.n	8004b3e <_printf_common+0x3e>
 8004bb0:	18e1      	adds	r1, r4, r3
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	2030      	movs	r0, #48	; 0x30
 8004bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bba:	4422      	add	r2, r4
 8004bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	e7c7      	b.n	8004b58 <_printf_common+0x58>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4622      	mov	r2, r4
 8004bcc:	4649      	mov	r1, r9
 8004bce:	4638      	mov	r0, r7
 8004bd0:	47c0      	blx	r8
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d0e6      	beq.n	8004ba4 <_printf_common+0xa4>
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7d9      	b.n	8004b8e <_printf_common+0x8e>
	...

08004bdc <_printf_i>:
 8004bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	7e0f      	ldrb	r7, [r1, #24]
 8004be2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004be4:	2f78      	cmp	r7, #120	; 0x78
 8004be6:	4691      	mov	r9, r2
 8004be8:	4680      	mov	r8, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	469a      	mov	sl, r3
 8004bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bf2:	d807      	bhi.n	8004c04 <_printf_i+0x28>
 8004bf4:	2f62      	cmp	r7, #98	; 0x62
 8004bf6:	d80a      	bhi.n	8004c0e <_printf_i+0x32>
 8004bf8:	2f00      	cmp	r7, #0
 8004bfa:	f000 80d8 	beq.w	8004dae <_printf_i+0x1d2>
 8004bfe:	2f58      	cmp	r7, #88	; 0x58
 8004c00:	f000 80a3 	beq.w	8004d4a <_printf_i+0x16e>
 8004c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c0c:	e03a      	b.n	8004c84 <_printf_i+0xa8>
 8004c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c12:	2b15      	cmp	r3, #21
 8004c14:	d8f6      	bhi.n	8004c04 <_printf_i+0x28>
 8004c16:	a101      	add	r1, pc, #4	; (adr r1, 8004c1c <_printf_i+0x40>)
 8004c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c1c:	08004c75 	.word	0x08004c75
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c05 	.word	0x08004c05
 8004c28:	08004c05 	.word	0x08004c05
 8004c2c:	08004c05 	.word	0x08004c05
 8004c30:	08004c05 	.word	0x08004c05
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004c05 	.word	0x08004c05
 8004c3c:	08004c05 	.word	0x08004c05
 8004c40:	08004c05 	.word	0x08004c05
 8004c44:	08004c05 	.word	0x08004c05
 8004c48:	08004d95 	.word	0x08004d95
 8004c4c:	08004cb9 	.word	0x08004cb9
 8004c50:	08004d77 	.word	0x08004d77
 8004c54:	08004c05 	.word	0x08004c05
 8004c58:	08004c05 	.word	0x08004c05
 8004c5c:	08004db7 	.word	0x08004db7
 8004c60:	08004c05 	.word	0x08004c05
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004c05 	.word	0x08004c05
 8004c6c:	08004c05 	.word	0x08004c05
 8004c70:	08004d7f 	.word	0x08004d7f
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	602a      	str	r2, [r5, #0]
 8004c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0a3      	b.n	8004dd0 <_printf_i+0x1f4>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	6829      	ldr	r1, [r5, #0]
 8004c8c:	0606      	lsls	r6, r0, #24
 8004c8e:	f101 0304 	add.w	r3, r1, #4
 8004c92:	d50a      	bpl.n	8004caa <_printf_i+0xce>
 8004c94:	680e      	ldr	r6, [r1, #0]
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	2e00      	cmp	r6, #0
 8004c9a:	da03      	bge.n	8004ca4 <_printf_i+0xc8>
 8004c9c:	232d      	movs	r3, #45	; 0x2d
 8004c9e:	4276      	negs	r6, r6
 8004ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ca4:	485e      	ldr	r0, [pc, #376]	; (8004e20 <_printf_i+0x244>)
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	e019      	b.n	8004cde <_printf_i+0x102>
 8004caa:	680e      	ldr	r6, [r1, #0]
 8004cac:	602b      	str	r3, [r5, #0]
 8004cae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cb2:	bf18      	it	ne
 8004cb4:	b236      	sxthne	r6, r6
 8004cb6:	e7ef      	b.n	8004c98 <_printf_i+0xbc>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	6820      	ldr	r0, [r4, #0]
 8004cbc:	1d19      	adds	r1, r3, #4
 8004cbe:	6029      	str	r1, [r5, #0]
 8004cc0:	0601      	lsls	r1, r0, #24
 8004cc2:	d501      	bpl.n	8004cc8 <_printf_i+0xec>
 8004cc4:	681e      	ldr	r6, [r3, #0]
 8004cc6:	e002      	b.n	8004cce <_printf_i+0xf2>
 8004cc8:	0646      	lsls	r6, r0, #25
 8004cca:	d5fb      	bpl.n	8004cc4 <_printf_i+0xe8>
 8004ccc:	881e      	ldrh	r6, [r3, #0]
 8004cce:	4854      	ldr	r0, [pc, #336]	; (8004e20 <_printf_i+0x244>)
 8004cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2308      	moveq	r3, #8
 8004cd6:	230a      	movne	r3, #10
 8004cd8:	2100      	movs	r1, #0
 8004cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cde:	6865      	ldr	r5, [r4, #4]
 8004ce0:	60a5      	str	r5, [r4, #8]
 8004ce2:	2d00      	cmp	r5, #0
 8004ce4:	bfa2      	ittt	ge
 8004ce6:	6821      	ldrge	r1, [r4, #0]
 8004ce8:	f021 0104 	bicge.w	r1, r1, #4
 8004cec:	6021      	strge	r1, [r4, #0]
 8004cee:	b90e      	cbnz	r6, 8004cf4 <_printf_i+0x118>
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	d04d      	beq.n	8004d90 <_printf_i+0x1b4>
 8004cf4:	4615      	mov	r5, r2
 8004cf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cfa:	fb03 6711 	mls	r7, r3, r1, r6
 8004cfe:	5dc7      	ldrb	r7, [r0, r7]
 8004d00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d04:	4637      	mov	r7, r6
 8004d06:	42bb      	cmp	r3, r7
 8004d08:	460e      	mov	r6, r1
 8004d0a:	d9f4      	bls.n	8004cf6 <_printf_i+0x11a>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d10b      	bne.n	8004d28 <_printf_i+0x14c>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	07de      	lsls	r6, r3, #31
 8004d14:	d508      	bpl.n	8004d28 <_printf_i+0x14c>
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	6861      	ldr	r1, [r4, #4]
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	bfde      	ittt	le
 8004d1e:	2330      	movle	r3, #48	; 0x30
 8004d20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d28:	1b52      	subs	r2, r2, r5
 8004d2a:	6122      	str	r2, [r4, #16]
 8004d2c:	f8cd a000 	str.w	sl, [sp]
 8004d30:	464b      	mov	r3, r9
 8004d32:	aa03      	add	r2, sp, #12
 8004d34:	4621      	mov	r1, r4
 8004d36:	4640      	mov	r0, r8
 8004d38:	f7ff fee2 	bl	8004b00 <_printf_common>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d14c      	bne.n	8004dda <_printf_i+0x1fe>
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	b004      	add	sp, #16
 8004d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d4a:	4835      	ldr	r0, [pc, #212]	; (8004e20 <_printf_i+0x244>)
 8004d4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d50:	6829      	ldr	r1, [r5, #0]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d58:	6029      	str	r1, [r5, #0]
 8004d5a:	061d      	lsls	r5, r3, #24
 8004d5c:	d514      	bpl.n	8004d88 <_printf_i+0x1ac>
 8004d5e:	07df      	lsls	r7, r3, #31
 8004d60:	bf44      	itt	mi
 8004d62:	f043 0320 	orrmi.w	r3, r3, #32
 8004d66:	6023      	strmi	r3, [r4, #0]
 8004d68:	b91e      	cbnz	r6, 8004d72 <_printf_i+0x196>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f023 0320 	bic.w	r3, r3, #32
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	2310      	movs	r3, #16
 8004d74:	e7b0      	b.n	8004cd8 <_printf_i+0xfc>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f043 0320 	orr.w	r3, r3, #32
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	2378      	movs	r3, #120	; 0x78
 8004d80:	4828      	ldr	r0, [pc, #160]	; (8004e24 <_printf_i+0x248>)
 8004d82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d86:	e7e3      	b.n	8004d50 <_printf_i+0x174>
 8004d88:	0659      	lsls	r1, r3, #25
 8004d8a:	bf48      	it	mi
 8004d8c:	b2b6      	uxthmi	r6, r6
 8004d8e:	e7e6      	b.n	8004d5e <_printf_i+0x182>
 8004d90:	4615      	mov	r5, r2
 8004d92:	e7bb      	b.n	8004d0c <_printf_i+0x130>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	6826      	ldr	r6, [r4, #0]
 8004d98:	6961      	ldr	r1, [r4, #20]
 8004d9a:	1d18      	adds	r0, r3, #4
 8004d9c:	6028      	str	r0, [r5, #0]
 8004d9e:	0635      	lsls	r5, r6, #24
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	d501      	bpl.n	8004da8 <_printf_i+0x1cc>
 8004da4:	6019      	str	r1, [r3, #0]
 8004da6:	e002      	b.n	8004dae <_printf_i+0x1d2>
 8004da8:	0670      	lsls	r0, r6, #25
 8004daa:	d5fb      	bpl.n	8004da4 <_printf_i+0x1c8>
 8004dac:	8019      	strh	r1, [r3, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	6123      	str	r3, [r4, #16]
 8004db2:	4615      	mov	r5, r2
 8004db4:	e7ba      	b.n	8004d2c <_printf_i+0x150>
 8004db6:	682b      	ldr	r3, [r5, #0]
 8004db8:	1d1a      	adds	r2, r3, #4
 8004dba:	602a      	str	r2, [r5, #0]
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	6862      	ldr	r2, [r4, #4]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f7fb fa14 	bl	80001f0 <memchr>
 8004dc8:	b108      	cbz	r0, 8004dce <_printf_i+0x1f2>
 8004dca:	1b40      	subs	r0, r0, r5
 8004dcc:	6060      	str	r0, [r4, #4]
 8004dce:	6863      	ldr	r3, [r4, #4]
 8004dd0:	6123      	str	r3, [r4, #16]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd8:	e7a8      	b.n	8004d2c <_printf_i+0x150>
 8004dda:	6923      	ldr	r3, [r4, #16]
 8004ddc:	462a      	mov	r2, r5
 8004dde:	4649      	mov	r1, r9
 8004de0:	4640      	mov	r0, r8
 8004de2:	47d0      	blx	sl
 8004de4:	3001      	adds	r0, #1
 8004de6:	d0ab      	beq.n	8004d40 <_printf_i+0x164>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	079b      	lsls	r3, r3, #30
 8004dec:	d413      	bmi.n	8004e16 <_printf_i+0x23a>
 8004dee:	68e0      	ldr	r0, [r4, #12]
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	4298      	cmp	r0, r3
 8004df4:	bfb8      	it	lt
 8004df6:	4618      	movlt	r0, r3
 8004df8:	e7a4      	b.n	8004d44 <_printf_i+0x168>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	4649      	mov	r1, r9
 8004e00:	4640      	mov	r0, r8
 8004e02:	47d0      	blx	sl
 8004e04:	3001      	adds	r0, #1
 8004e06:	d09b      	beq.n	8004d40 <_printf_i+0x164>
 8004e08:	3501      	adds	r5, #1
 8004e0a:	68e3      	ldr	r3, [r4, #12]
 8004e0c:	9903      	ldr	r1, [sp, #12]
 8004e0e:	1a5b      	subs	r3, r3, r1
 8004e10:	42ab      	cmp	r3, r5
 8004e12:	dcf2      	bgt.n	8004dfa <_printf_i+0x21e>
 8004e14:	e7eb      	b.n	8004dee <_printf_i+0x212>
 8004e16:	2500      	movs	r5, #0
 8004e18:	f104 0619 	add.w	r6, r4, #25
 8004e1c:	e7f5      	b.n	8004e0a <_printf_i+0x22e>
 8004e1e:	bf00      	nop
 8004e20:	080053f9 	.word	0x080053f9
 8004e24:	0800540a 	.word	0x0800540a

08004e28 <_putc_r>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	4606      	mov	r6, r0
 8004e30:	b118      	cbz	r0, 8004e3a <_putc_r+0x12>
 8004e32:	6983      	ldr	r3, [r0, #24]
 8004e34:	b90b      	cbnz	r3, 8004e3a <_putc_r+0x12>
 8004e36:	f7ff fb23 	bl	8004480 <__sinit>
 8004e3a:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <_putc_r+0x84>)
 8004e3c:	429c      	cmp	r4, r3
 8004e3e:	d124      	bne.n	8004e8a <_putc_r+0x62>
 8004e40:	6874      	ldr	r4, [r6, #4]
 8004e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e44:	07d8      	lsls	r0, r3, #31
 8004e46:	d405      	bmi.n	8004e54 <_putc_r+0x2c>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	0599      	lsls	r1, r3, #22
 8004e4c:	d402      	bmi.n	8004e54 <_putc_r+0x2c>
 8004e4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e50:	f7ff fbb4 	bl	80045bc <__retarget_lock_acquire_recursive>
 8004e54:	68a3      	ldr	r3, [r4, #8]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	60a3      	str	r3, [r4, #8]
 8004e5c:	da05      	bge.n	8004e6a <_putc_r+0x42>
 8004e5e:	69a2      	ldr	r2, [r4, #24]
 8004e60:	4293      	cmp	r3, r2
 8004e62:	db1c      	blt.n	8004e9e <_putc_r+0x76>
 8004e64:	b2eb      	uxtb	r3, r5
 8004e66:	2b0a      	cmp	r3, #10
 8004e68:	d019      	beq.n	8004e9e <_putc_r+0x76>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	6022      	str	r2, [r4, #0]
 8004e70:	701d      	strb	r5, [r3, #0]
 8004e72:	b2ed      	uxtb	r5, r5
 8004e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e76:	07da      	lsls	r2, r3, #31
 8004e78:	d405      	bmi.n	8004e86 <_putc_r+0x5e>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	059b      	lsls	r3, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <_putc_r+0x5e>
 8004e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e82:	f7ff fb9c 	bl	80045be <__retarget_lock_release_recursive>
 8004e86:	4628      	mov	r0, r5
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <_putc_r+0x88>)
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	d101      	bne.n	8004e94 <_putc_r+0x6c>
 8004e90:	68b4      	ldr	r4, [r6, #8]
 8004e92:	e7d6      	b.n	8004e42 <_putc_r+0x1a>
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <_putc_r+0x8c>)
 8004e96:	429c      	cmp	r4, r3
 8004e98:	bf08      	it	eq
 8004e9a:	68f4      	ldreq	r4, [r6, #12]
 8004e9c:	e7d1      	b.n	8004e42 <_putc_r+0x1a>
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f7ff f912 	bl	80040cc <__swbuf_r>
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	e7e3      	b.n	8004e74 <_putc_r+0x4c>
 8004eac:	080053a8 	.word	0x080053a8
 8004eb0:	080053c8 	.word	0x080053c8
 8004eb4:	08005388 	.word	0x08005388

08004eb8 <_sbrk_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d06      	ldr	r5, [pc, #24]	; (8004ed4 <_sbrk_r+0x1c>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fc f9d0 	bl	8001268 <_sbrk>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_sbrk_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_sbrk_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	200006cc 	.word	0x200006cc

08004ed8 <__sread>:
 8004ed8:	b510      	push	{r4, lr}
 8004eda:	460c      	mov	r4, r1
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	f000 f8a0 	bl	8005024 <_read_r>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	bfab      	itete	ge
 8004ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004eea:	89a3      	ldrhlt	r3, [r4, #12]
 8004eec:	181b      	addge	r3, r3, r0
 8004eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ef2:	bfac      	ite	ge
 8004ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ef6:	81a3      	strhlt	r3, [r4, #12]
 8004ef8:	bd10      	pop	{r4, pc}

08004efa <__swrite>:
 8004efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efe:	461f      	mov	r7, r3
 8004f00:	898b      	ldrh	r3, [r1, #12]
 8004f02:	05db      	lsls	r3, r3, #23
 8004f04:	4605      	mov	r5, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	4616      	mov	r6, r2
 8004f0a:	d505      	bpl.n	8004f18 <__swrite+0x1e>
 8004f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f10:	2302      	movs	r3, #2
 8004f12:	2200      	movs	r2, #0
 8004f14:	f000 f868 	bl	8004fe8 <_lseek_r>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f22:	81a3      	strh	r3, [r4, #12]
 8004f24:	4632      	mov	r2, r6
 8004f26:	463b      	mov	r3, r7
 8004f28:	4628      	mov	r0, r5
 8004f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	f000 b817 	b.w	8004f60 <_write_r>

08004f32 <__sseek>:
 8004f32:	b510      	push	{r4, lr}
 8004f34:	460c      	mov	r4, r1
 8004f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f3a:	f000 f855 	bl	8004fe8 <_lseek_r>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	bf15      	itete	ne
 8004f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f4e:	81a3      	strheq	r3, [r4, #12]
 8004f50:	bf18      	it	ne
 8004f52:	81a3      	strhne	r3, [r4, #12]
 8004f54:	bd10      	pop	{r4, pc}

08004f56 <__sclose>:
 8004f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5a:	f000 b813 	b.w	8004f84 <_close_r>
	...

08004f60 <_write_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	; (8004f80 <_write_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fc f929 	bl	80011c6 <_write>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_write_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_write_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	200006cc 	.word	0x200006cc

08004f84 <_close_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d06      	ldr	r5, [pc, #24]	; (8004fa0 <_close_r+0x1c>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fc f935 	bl	80011fe <_close>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_close_r+0x1a>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_close_r+0x1a>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	200006cc 	.word	0x200006cc

08004fa4 <_fstat_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d07      	ldr	r5, [pc, #28]	; (8004fc4 <_fstat_r+0x20>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	f7fc f930 	bl	8001216 <_fstat>
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	d102      	bne.n	8004fc0 <_fstat_r+0x1c>
 8004fba:	682b      	ldr	r3, [r5, #0]
 8004fbc:	b103      	cbz	r3, 8004fc0 <_fstat_r+0x1c>
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	bd38      	pop	{r3, r4, r5, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200006cc 	.word	0x200006cc

08004fc8 <_isatty_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d06      	ldr	r5, [pc, #24]	; (8004fe4 <_isatty_r+0x1c>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	f7fc f92f 	bl	8001236 <_isatty>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_isatty_r+0x1a>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_isatty_r+0x1a>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	200006cc 	.word	0x200006cc

08004fe8 <_lseek_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d07      	ldr	r5, [pc, #28]	; (8005008 <_lseek_r+0x20>)
 8004fec:	4604      	mov	r4, r0
 8004fee:	4608      	mov	r0, r1
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	602a      	str	r2, [r5, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f7fc f928 	bl	800124c <_lseek>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_lseek_r+0x1e>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_lseek_r+0x1e>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	200006cc 	.word	0x200006cc

0800500c <__malloc_lock>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__malloc_lock+0x8>)
 800500e:	f7ff bad5 	b.w	80045bc <__retarget_lock_acquire_recursive>
 8005012:	bf00      	nop
 8005014:	200006c0 	.word	0x200006c0

08005018 <__malloc_unlock>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__malloc_unlock+0x8>)
 800501a:	f7ff bad0 	b.w	80045be <__retarget_lock_release_recursive>
 800501e:	bf00      	nop
 8005020:	200006c0 	.word	0x200006c0

08005024 <_read_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4d07      	ldr	r5, [pc, #28]	; (8005044 <_read_r+0x20>)
 8005028:	4604      	mov	r4, r0
 800502a:	4608      	mov	r0, r1
 800502c:	4611      	mov	r1, r2
 800502e:	2200      	movs	r2, #0
 8005030:	602a      	str	r2, [r5, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	f7fc f8aa 	bl	800118c <_read>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_read_r+0x1e>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_read_r+0x1e>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	200006cc 	.word	0x200006cc

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr
